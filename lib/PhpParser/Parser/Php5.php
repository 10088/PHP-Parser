<?php

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Php5 extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 1199;
    protected $gotoTableSize = 628;

    protected $invalidSymbol = 157;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 413;
    protected $YYNLSTATES   = 652;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_YIELD_FROM = 267;
    const T_PLUS_EQUAL = 268;
    const T_MINUS_EQUAL = 269;
    const T_MUL_EQUAL = 270;
    const T_DIV_EQUAL = 271;
    const T_CONCAT_EQUAL = 272;
    const T_MOD_EQUAL = 273;
    const T_AND_EQUAL = 274;
    const T_OR_EQUAL = 275;
    const T_XOR_EQUAL = 276;
    const T_SL_EQUAL = 277;
    const T_SR_EQUAL = 278;
    const T_POW_EQUAL = 279;
    const T_COALESCE = 280;
    const T_BOOLEAN_OR = 281;
    const T_BOOLEAN_AND = 282;
    const T_IS_EQUAL = 283;
    const T_IS_NOT_EQUAL = 284;
    const T_IS_IDENTICAL = 285;
    const T_IS_NOT_IDENTICAL = 286;
    const T_SPACESHIP = 287;
    const T_IS_SMALLER_OR_EQUAL = 288;
    const T_IS_GREATER_OR_EQUAL = 289;
    const T_SL = 290;
    const T_SR = 291;
    const T_INSTANCEOF = 292;
    const T_INC = 293;
    const T_DEC = 294;
    const T_INT_CAST = 295;
    const T_DOUBLE_CAST = 296;
    const T_STRING_CAST = 297;
    const T_ARRAY_CAST = 298;
    const T_OBJECT_CAST = 299;
    const T_BOOL_CAST = 300;
    const T_UNSET_CAST = 301;
    const T_POW = 302;
    const T_NEW = 303;
    const T_CLONE = 304;
    const T_EXIT = 305;
    const T_IF = 306;
    const T_ELSEIF = 307;
    const T_ELSE = 308;
    const T_ENDIF = 309;
    const T_LNUMBER = 310;
    const T_DNUMBER = 311;
    const T_STRING = 312;
    const T_STRING_VARNAME = 313;
    const T_VARIABLE = 314;
    const T_NUM_STRING = 315;
    const T_INLINE_HTML = 316;
    const T_CHARACTER = 317;
    const T_BAD_CHARACTER = 318;
    const T_ENCAPSED_AND_WHITESPACE = 319;
    const T_CONSTANT_ENCAPSED_STRING = 320;
    const T_ECHO = 321;
    const T_DO = 322;
    const T_WHILE = 323;
    const T_ENDWHILE = 324;
    const T_FOR = 325;
    const T_ENDFOR = 326;
    const T_FOREACH = 327;
    const T_ENDFOREACH = 328;
    const T_DECLARE = 329;
    const T_ENDDECLARE = 330;
    const T_AS = 331;
    const T_SWITCH = 332;
    const T_ENDSWITCH = 333;
    const T_CASE = 334;
    const T_DEFAULT = 335;
    const T_BREAK = 336;
    const T_CONTINUE = 337;
    const T_GOTO = 338;
    const T_FUNCTION = 339;
    const T_CONST = 340;
    const T_RETURN = 341;
    const T_TRY = 342;
    const T_CATCH = 343;
    const T_FINALLY = 344;
    const T_THROW = 345;
    const T_USE = 346;
    const T_INSTEADOF = 347;
    const T_GLOBAL = 348;
    const T_STATIC = 349;
    const T_ABSTRACT = 350;
    const T_FINAL = 351;
    const T_PRIVATE = 352;
    const T_PROTECTED = 353;
    const T_PUBLIC = 354;
    const T_VAR = 355;
    const T_UNSET = 356;
    const T_ISSET = 357;
    const T_EMPTY = 358;
    const T_HALT_COMPILER = 359;
    const T_CLASS = 360;
    const T_TRAIT = 361;
    const T_INTERFACE = 362;
    const T_EXTENDS = 363;
    const T_IMPLEMENTS = 364;
    const T_OBJECT_OPERATOR = 365;
    const T_DOUBLE_ARROW = 366;
    const T_LIST = 367;
    const T_ARRAY = 368;
    const T_CALLABLE = 369;
    const T_CLASS_C = 370;
    const T_TRAIT_C = 371;
    const T_METHOD_C = 372;
    const T_FUNC_C = 373;
    const T_LINE = 374;
    const T_FILE = 375;
    const T_COMMENT = 376;
    const T_DOC_COMMENT = 377;
    const T_OPEN_TAG = 378;
    const T_OPEN_TAG_WITH_ECHO = 379;
    const T_CLOSE_TAG = 380;
    const T_WHITESPACE = 381;
    const T_START_HEREDOC = 382;
    const T_END_HEREDOC = 383;
    const T_DOLLAR_OPEN_CURLY_BRACES = 384;
    const T_CURLY_OPEN = 385;
    const T_PAAMAYIM_NEKUDOTAYIM = 386;
    const T_NAMESPACE = 387;
    const T_NS_C = 388;
    const T_DIR = 389;
    const T_NS_SEPARATOR = 390;
    const T_ELLIPSIS = 391;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   52,  156,  157,  153,   51,   34,  157,
          151,  152,   49,   46,    7,   47,   48,   50,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   28,  148,
           40,   14,   42,   27,   64,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   66,  157,  155,   33,  157,  154,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   32,  150,   54,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           29,   30,   31,   35,   36,   37,   38,   39,   41,   43,
           44,   45,   53,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   65,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,  157,  157,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
          717,   60,   61,  424,   62,   63,-32766,-32766,-32766,-32766,
           64,   65,   66,  223,  224,  225,  226,  227,  228,  229,
          230,  231,    0,  232,  233,  234,  235,  236,  237,  238,
          239,  240,  241,  242,  243,-32766,-32766,-32766,-32766,-32766,
        -32767,-32767,-32767,-32767,  656,   67,   68,   58,  244,  245,
          342,   69,  313,   70,  297,  298,   71,   72,   73,   74,
           75,   76,   77,   78,-32766,   32,  305,   79,  415,  425,
        -32766,-32766,-32766,  978,  979,  467, -122, 1071,  359,  706,
          451,  468,   46,   27,  426,  367,  469,  442,  470,-32766,
          471,-32766,-32766,  427,  220,  221,  222,   36,   37,  472,
          428,  445,   38,  473,  221,  222,   80, 1065,  329,  360,
          361,  495,  761,  207,  429,  474,  475,  476,  477,  478,
          614,-32766,  207,   54,  688,  733,  479,  480,  481,  482,
          128,  984,  985,  986,  987,  981,  982,  315,   84,   85,
           86,   31,  495,  988,  983,  429,  211,  712,  624,  641,
           47,  135,  340,  327,  301,  331,  447,   40,  444,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
           98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
          108,  109,  348,  308,-32766,-32766,-32766,-32766,-32766,  423,
        -32766,  785,  786,  288,  815,  110,  656,  220,  221,  222,
        -32766,-32766, 1037,-32766,-32766,-32766,  124,-32766,  443,-32766,
          575,-32766,  927, -127,-32766,  636,  207,  129,-32766,-32766,
        -32766,  432,  432,-32766,-32766,   22,  703,-32766,   35,  133,
        -32766,  494,  762,-32766,  301, 1100,  474,  475,-32766,  801,
          303, 1028,  704,  379,  927,  688,  733,  479,  480,  622,
           -1,   41,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  670,  671,  299,  132,-32766,-32766,
        -32766, 1103,  791, 1105, 1104,-32766,  656,  220,  221,  222,
        -32766,-32766,  304,-32766,-32766,-32766,  792,-32766,  432,-32766,
        -32766,-32766,  866,  868,-32766,  464,  207,  248,-32766,-32766,
        -32766,  432,-32766,-32766,-32766,   39,  300,-32766,  656,  420,
        -32766,  494,-32766,-32766,  290,-32766,-32766,-32766,-32766,-32766,
          212,-32766,   57,-32766,  927, 1071,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,  432,  945,-32766,-32766, 1036, 1078,-32766,
          213, 1029,-32766,  494,  629,-32766,  302,  132,-32766,-32766,
        -32766,  621,  416,  241,  242,  243,  927,   55,  325,-32766,
        -32766,-32766,  474,  475, -405,  623,  238,  239,  240,  244,
          245,  662,  733,  479,  480,  474,  475,  481,  289,  249,
        -32766,-32766,-32766, 1037,  688,  733,  479,  480,  656,  220,
          221,  222,-32766,  339,  286,-32766,-32766,-32766,-32766,-32766,
          340,-32766,  627,-32766, 1093,  126,-32766,  250,  207,  927,
        -32766,-32766,-32766,  432,-32766,-32766,-32766,  432, -123,-32766,
          656,  137,-32766,  494,-32766,  572, -175,-32766,-32766,-32766,
        -32766,-32766,  648,-32766,  123,-32766,  810,  820,-32766,  214,
          125,-32766,-32766,-32766,-32766,  432,  207,-32766,-32766,  417,
        -32766,-32766,  927,  308,-32766,  494,-32766,  220,  221,  222,
        -32766,-32766,-32766, 1075,  716,-32766,  645,-32766,  131,  104,
          105,  106,  640,  656,  389,  432,  207,-32766,-32766, 1034,
        -32766,-32766,-32766,  449,-32766,  222,-32766,  656,-32766, 1071,
          581,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  432,  347,
        -32766,-32766,  207,  332,-32766,  432,-32766,-32766,  494,  246,
        -32766,-32766,-32766,-32766,  314,-32766,  656,  107,  108,  109,
        -32766,  308,  955,-32766,-32766,-32766,-32766,-32766, 1093,-32766,
        -32766,-32766,  438,  110,-32766,  626,  134,  927,-32766,-32766,
        -32766,  432,  136,-32766,-32766,-32766,-32766,-32766,  990,  726,
        -32766,  494,-32766,-32766,  495,  110,  133,  429,-32766,  305,
          544,  990,  433,-32766,  340,-32766,-32766,  244,  245,  656,
          453,   28,   50,-32766,  138,  368,-32766,-32766,-32766,-32766,
        -32766,  599,-32766,   59,-32766,   56, 1035,-32766,-32766,-32766,
          927,-32766,-32766,-32766,  432,-32766,-32766,-32766,  458,  587,
        -32766,  656,   51,-32766,  494,-32766,  594,  595,-32766,-32766,
        -32766,-32766,-32766,   49,-32766,   53,-32766,  785,  786,-32766,
          814,  644,-32766,-32766,-32766,-32766,  432,   52,-32766,-32766,
          663,  631,-32766,  927,  533,-32766,  494,  825,  651,  520,
          516,-32766,-32766,-32766,  515,  971,  534,  611,-32766,  439,
          437,  822,  657,  656,  656,  679, 1098,  677,-32766,  307,
          613,-32766,-32766,-32766,  519,-32766,  596,-32766,  948,-32766,
          606,  338,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  432,
         1093,-32766,-32766,  345,  346,-32766,  927,  536,-32766,  494,
          441,-32766,  590,  285,  565,  591,-32766,  656,  336, -172,
          438,-32766,  578,  526,-32766,-32766,-32766,-32766,-32766,  436,
        -32766,  432,-32766,  462,  612,-32766,  335,  735,  734,-32766,
        -32766,-32766,  432,  341,-32766,-32766,  696,-32766,-32766,  420,
          396,-32766,  494,  481,  646, -312,  474,  475, -405,-32766,
          330, -406,  328,  925,-32766,  688,  733,  479,  480,    0,
          656,  127,    0,   42,-32766,  989,  728,-32766,-32766,-32766,
          619,-32766, -304,-32766,  318,-32766,  625,  756,-32766,  700,
        -32766,  369,-32766,-32766,-32766,  432,-32766,-32766,-32766,  334,
         -313,-32766,  656,  382,-32766,  494,-32766,   45,  384,-32766,
        -32766,-32766,-32766,-32766,  749,-32766,  747,-32766,  745,  705,
        -32766,  764,  247,  708,-32766,-32766,-32766,  432,  821,-32766,
        -32766,  693,  819,-32766,  818,  691,-32766,  494,  666,  667,
          215,  216,  698,-32766,-32766,   44,  217,  715,  218,  702,
          669,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
          209,-32767,-32767,-32767,-32767,  215,  216,  633,  978,  979,
          632,  217,-32766,  218,-32766,-32766,  980,  811,  755,  714,
          701,-32766,-32766,-32766,  699,  209,  697,  707,-32766,  357,
          630,  635,  130,  978,  979,  637,  638,-32766,  643,  647,
        -32766,  980,-32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,-32767,  649,-32767,-32767,-32767,-32767,  102,  103,
          104,  105,  106,  650,  562,  358,  984,  985,  986,  987,
          981,  982,  395,   83,   33,  754, 1102,  730,  988,  983,
          732,  457, 1056, 1099,  597,  219, 1072,-32766,  603,  562,
         1070,  984,  985,  986,  987,  981,  982,  395, -107, -107,
         -107, 1066, 1076,  988,  983, -108, -108, -108,  474,  475,
          219,  419,-32766,  803,  969,  474,  475,  688,  733,  479,
          480,  673,  474,  475,  688,  733,  479,  480, 1068,  416,
          753,  688,  733,  479,  480,  325, 1101,  941,  672,  474,
          475,  731,  906,   30,   34,   43,  416,  566,  662,  733,
          479,  480,  325, -107, -124,  414,  474,  475,  343,  312,
         -108, -116, -116, -116,  931,  662,  733,  479,  480,  311,
          339,  310,  474,  475,-32766,-32766,-32766,  665, -118, -118,
         -118,  688,  733,  479,  480,  309,  296,  339,  295,  287,
          210,   82,   81,-32766,  664,-32766,-32766,-32766,-32766,-32766,
        -32766,   48,  474,  475,-32766,-32766,-32766,  994,  793,  935,
          826,  688,  733,  479,  480,-32766,-32766,-32766,  932,  474,
          475,  618,  557,-32766,  465,-32766,-32766,-32766,  688,  733,
          479,  480,  461,  459,-32766,  421,-32766,-32766,-32766,-32766,
        -32766,  337, 1050,  907,  836,  837,  838,  835,  834,  833,
          828,-32766,-32766,-32766,  474,  475,  454,  390,   25,    0,
           24,   23, -123,  688,  733,  479,  480,  474,  475,  995,
        -32766, 1097,-32766,-32766,-32766,-32766,  688,  733,  479,  480,
          968, 1067, 1051, 1055,  474,  475, 1069,  954,  474,  475,
          939,  940,  720,  688,  733,  479,  480,  688,  733,  479,
          480,  474,  475,  937,  938,  722,  474,  475,  936,    0,
          688,  733,  479,  480,    0,  688,  733,  479,  480,    0,
          474,  475,  930,    0,    0,    0,  929,    0,    0,  688,
          733,  479,  480,    0,    0,    0,    0,    0,    0,  729,
            0,    0,    0,    0,  634,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  689
    );

    protected $actionCheck = array(
            1,    2,    3,    4,    5,    6,   30,   31,   32,   33,
           11,   12,   13,   30,   31,   32,   33,   34,   35,   36,
           37,   38,    0,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   76,   46,   47,   66,   65,   66,
            7,   52,    7,   54,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,    8,   66,   67,   68,   69,   70,
            8,    9,   10,   74,   75,   76,   73,   78,    7,   80,
            7,   82,   83,   84,   85,    7,   87,   28,   89,   27,
           91,   29,   30,   94,    8,    9,   10,   98,   99,  100,
          101,    7,  103,  104,    9,   10,  107,   78,  127,  110,
          111,  143,   28,   27,  146,  112,  113,  118,  119,  120,
           76,    1,   27,   66,  121,  122,  123,  124,  129,  130,
          149,  132,  133,  134,  135,  136,  137,  138,    8,    9,
           10,    7,  143,  144,  145,  146,    7,  148,  149,   28,
          151,   66,  153,  154,   34,  156,   76,   27,    7,   29,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,  153,   53,   30,   31,   32,   33,   34,    7,
           70,  130,  131,    7,  150,   65,   76,    8,    9,   10,
           80,    1,  122,   83,   84,   85,  149,   87,  149,   89,
           86,   91,   12,  152,   94,   28,   27,    7,   98,   99,
          100,  101,  101,  103,  104,  152,  148,  107,    7,  149,
          110,  111,  148,    1,   34,  150,  112,  113,  118,   78,
            7,  155,  148,   78,   12,  121,  122,  123,  124,   76,
            0,   14,   15,   16,   17,   18,   19,   20,   21,   22,
           23,   24,   25,   26,  101,  102,   34,  147,  148,  149,
           70,   76,  152,   78,   79,  102,   76,    8,    9,   10,
           80,  108,   34,   83,   84,   85,  152,   87,  101,   89,
          117,   91,   55,   56,   94,    7,   27,   28,   98,   99,
          100,  101,   70,  103,  104,  140,  141,  107,   76,  146,
          110,  111,   80,    1,  153,   83,   84,   85,  118,   87,
           14,   89,   66,   91,   12,   78,   94,    8,    9,   10,
           98,   99,  100,  101,  152,  103,  104,   76,  152,  107,
           14,  152,  110,  111,   28,    1,   34,  147,  148,  149,
          118,   88,  102,   49,   50,   51,   12,   66,  108,   30,
           31,   32,  112,  113,  127,   76,   46,   47,   48,   65,
           66,  121,  122,  123,  124,  112,  113,  129,   34,   14,
          148,  149,   70,  122,  121,  122,  123,  124,   76,    8,
            9,   10,   80,  143,  128,   83,   84,   85,    1,   87,
          153,   89,   28,   91,   81,  149,   94,   14,   27,   12,
           98,   99,  100,  101,   70,  103,  104,  101,  152,  107,
           76,  149,  110,  111,   80,  153,   78,   83,   84,   85,
          118,   87,   28,   89,   14,   91,  148,  148,   94,   14,
          149,    1,   98,   99,  100,  101,   27,  103,  104,  122,
          102,  107,   12,   53,  110,  111,  108,    8,    9,   10,
          148,  149,  118,   76,   28,  117,   28,   70,   28,   46,
           47,   48,   28,   76,   77,  101,   27,   80,  151,  156,
           83,   84,   85,   76,   87,   10,   89,   76,   91,   78,
           81,   94,  148,  149,    1,   98,   99,  100,  101,   66,
          103,  104,   27,   81,  107,  101,   30,  110,  111,  128,
           70,    8,    9,   10,   28,  118,   76,   49,   50,   51,
           80,   53,  111,   83,   84,   85,    1,   87,   81,   89,
           27,   91,  146,   65,   94,  149,  149,   12,   98,   99,
          100,  101,   28,  103,  104,  148,  149,  107,  139,   34,
          110,  111,    8,    9,  143,   65,  149,  146,  118,   67,
          127,  139,  151,   70,  153,   30,   31,   65,   66,   76,
           71,   72,   66,   80,   96,   97,   83,   84,   85,    1,
           87,   73,   89,   66,   91,   66,  139,   94,  148,  149,
           12,   98,   99,  100,  101,   70,  103,  104,   71,   72,
          107,   76,   66,  110,  111,   80,  105,  106,   83,   84,
           85,  118,   87,   66,   89,   66,   91,  130,  131,   94,
          148,  149,    1,   98,   99,  100,  101,   66,  103,  104,
          148,  149,  107,   12,   76,  110,  111,  148,  149,   76,
           76,  148,  149,  118,   76,  152,   76,   76,   70,   76,
           76,   76,   76,   76,   76,   76,   76,   76,   80,   93,
           78,   83,   84,   85,   78,   87,   78,   89,   78,   91,
           78,  109,   94,  148,  149,    1,   98,   99,  100,  101,
           81,  103,  104,   81,   81,  107,   12,   93,  110,  111,
           85,   70,   95,   93,   93,  108,  118,   76,  126,   93,
          146,   80,   95,  146,   83,   84,   85,    1,   87,  101,
           89,  101,   91,  101,   90,   94,  125,  122,  122,   98,
           99,  100,  101,  125,  103,  104,  148,  149,  107,  146,
          146,  110,  111,  129,  149,  142,  112,  113,  127,  118,
          127,  127,  127,  154,   70,  121,  122,  123,  124,   -1,
           76,  128,   -1,  128,   80,  139,  147,   83,   84,   85,
          142,   87,  142,   89,  142,   91,  149,  148,   94,  148,
          149,  142,   98,   99,  100,  101,   70,  103,  104,  142,
          142,  107,   76,  142,  110,  111,   80,  148,  146,   83,
           84,   85,  118,   87,  148,   89,  148,   91,  148,  148,
           94,  148,   28,  148,   98,   99,  100,  101,  148,  103,
          104,  148,  148,  107,  148,  148,  110,  111,  148,  148,
           46,   47,  148,  149,  118,  148,   52,  148,   54,  148,
          148,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           66,   40,   41,   42,   43,   46,   47,  148,   74,   75,
          148,   52,   78,   54,  148,  149,   82,  148,  148,  148,
          148,    8,    9,   10,  148,   66,  148,  148,  151,  149,
          149,  149,  149,   74,   75,  149,  149,   78,  149,  149,
           27,   82,   29,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,  149,   40,   41,   42,   43,   44,   45,
           46,   47,   48,  149,  130,  149,  132,  133,  134,  135,
          136,  137,  138,  149,  151,  150,  150,  150,  144,  145,
          150,  150,  150,  150,  155,  151,  150,  153,   92,  130,
          150,  132,  133,  134,  135,  136,  137,  138,   95,   96,
           97,  150,  150,  144,  145,   95,   96,   97,  112,  113,
          151,  151,  153,  150,  150,  112,  113,  121,  122,  123,
          124,  150,  112,  113,  121,  122,  123,  124,  150,  102,
          150,  121,  122,  123,  124,  108,  150,  150,  150,  112,
          113,  150,  152,  151,  151,  151,  102,  152,  121,  122,
          123,  124,  108,  150,  152,  151,  112,  113,  151,  151,
          150,   71,   72,   73,  152,  121,  122,  123,  124,  151,
          143,  151,  112,  113,    8,    9,   10,  150,   71,   72,
           73,  121,  122,  123,  124,  151,  151,  143,  151,  151,
          151,  151,  151,   27,  150,   29,   30,   31,   32,   33,
           34,  151,  112,  113,    8,    9,   10,  152,  152,  152,
          150,  121,  122,  123,  124,    8,    9,   10,  152,  112,
          113,  152,  152,   27,  152,   29,   30,   31,  121,  122,
          123,  124,  152,  152,   27,  102,   29,   30,   31,   32,
           33,  108,  155,  152,  111,  112,  113,  114,  115,  116,
          117,    8,    9,   10,  112,  113,  152,  152,  152,   -1,
          152,  152,  152,  121,  122,  123,  124,  112,  113,  155,
           27,  155,   29,   30,   31,   32,  121,  122,  123,  124,
          155,  155,  155,  155,  112,  113,  155,  155,  112,  113,
          155,  155,  150,  121,  122,  123,  124,  121,  122,  123,
          124,  112,  113,  155,  155,  150,  112,  113,  155,   -1,
          121,  122,  123,  124,   -1,  121,  122,  123,  124,   -1,
          112,  113,  150,   -1,   -1,   -1,  150,   -1,   -1,  121,
          122,  123,  124,   -1,   -1,   -1,   -1,   -1,   -1,  150,
           -1,   -1,   -1,   -1,  150,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  150
    );

    protected $actionBase = array(
            0,  850,  843,  250,  867,  930,  884,  947, 1048, 1034,
          124,  836,    3,  624,  995, 1029, 1016,  263, 1012,  982,
          900,  316,  187,  121,  404,  121,  374,  610,  610,  610,
          120,  200,  232,  232,  493,  232,  578,  674,  621,  397,
          440,  344,  312,  525,  525,  525,  525,  706,  706,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
          525,  525,  525,  525,  525,  525,  525,  525,  525,   84,
          719,  623,  625,  718,  716,  712,  711,  852,  600,  931,
          773,  776,  514,  780,  772,  818,  804,  803,  771,  792,
          769,  791,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,   56,  381,  189,  269,   86,  544,  449,
          449,  449,  449,  449,  449,  319,  319,  319,  319,  319,
          319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
          319,  319,   95,  503,  503,  503,  475,  774,  419,  799,
          799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
          799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
          799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
          799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
          799,   62,  -17,  -17, 1036,  476, 1083,  535, 1047,  329,
         1006,  853,  853,  853,  853,  853,  -24,  154,    5,    5,
            5,    5,  237,  854,  854,  854,  854,  801,  801,  801,
          801,  770,  831,  767,  827,  248,  248,  604,  604,  492,
          723,  423,  423,  320,  320,  411,  411,  411,  411,  411,
          411,  411,  411,  411,  411,  327,  348,  173,  717,   61,
           61,   61,   61,  487,  487,  422,  447,  323,   80,  468,
          468,  468,  304,  304,  304,  163,   44,  602,  387,  387,
          387,  603,  616,  599,  407,  -32,  -32,  -32,  -32,  386,
          764,  -32,  -32,  -32,  291,  165,  165,  195,  272,  607,
          820,  597,  765,  472,  638,  -19,  583,  583,  583,  583,
          161,  608,  499,  527,  501,  620,   59,  161,   84,  261,
          489,  256,  400,  651,  570,  682,  670,   78,   94,  433,
          482,   57,   29,   73,  720,  671,  835,  830,  186,   85,
          614,  400,  400,  400,  134,  409,  756,   57,  266,  502,
          502,  502,  502,  828,  502,  502,  502,  502,  811,  709,
          288,  182,  666,  289,  515,  833,  564,  832,  832,  558,
          577,  564,  588,  515,  890,  890,  890,  890,  515,  577,
          832,  832,  515,  492,  832,  221,  515,  591,  577,  598,
          598,  890,  702,  699,  564,  586,  572,  832,  832,  832,
          572,  558,  515,  890,  587,  609,  139,  832,  890,  486,
          486,  587,  515,  486,  588,  486,   22,  436,  547,  834,
          881,  800,  568,  617,  596,  595,  877,  875,  880,  563,
          574,  878,  763,  557,  681,  573,  420,  506,  536,  561,
          549,  622,  519,  615,  608,  554,  490,  490,  490,  611,
          637,  611,  490,  490,  490,  490,  490,  490,  490,  490,
          993,  641,  593,  613,  605,  679,  306,  642,  594,  326,
          721,  557,  557,  906,  945,  589,  576,  874,  910,  611,
          989,  677,  210,  425,  860,  601,  581,  584,  611,  858,
          611,  722,  611,  897,  580,  766,  557,  490,  896,  988,
          976,  975,  972,  971,  968,  967,  966,  517,  965,  663,
          944,   45,  879,  620,  629,  579,  655,   43,  956,  611,
          611,  726,  764,  611,  727,  653,  639,  949,  710,  921,
          954,  616,  920,  611,  612,  927,   43,  444,  508,  842,
          619,  844,  592,  895,  847,  729,  365,  826,  438,  667,
          948,  946,  950,  646,  585,  730,  393,  571,  590,  582,
          744,  848,  648,  909,  606,  618,  562,  566,  754,  575,
          912,  650,  660,  664,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  130,  -17,  -17,  -17,  -17,
          130,  -17,  -17,  -17,  -17,  -17,  -17,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  -17,  130,  130,  130,  -17,  411,
          -17,  411,  411,  411,  411,  411,  411,  411,  411,  411,
          411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
          411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
          411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
          411,  411,  411,  130,    0,    0,  130,  -17,  130,  -17,
          130,  -17,  130,  130,  130,  130,  130,  130,  -17,  -17,
          -17,  -17,  -17,  -17,    0,  468,  468,  468,  468,  -17,
          -17,  -17,  -17,  973,  973,  973,  973,  411,  411,  411,
          411,  411,  411,  468,  468,  304,  304,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  411,  973,  973,
          411,  -32,  -32,  -32,  -32,  -32,  -32,  165,  165,  165,
           29,    0,    0,    0,    0,    0,    0,  577,  -32,  165,
          247,  247,  247,  165,  165,  165,   29,    0,    0,    0,
            0,  577,  247,    0,    0,    0,  832,    0,    0,    0,
          247,  478,  478,  478,  478,   43,   57,    0,  577,  577,
          577,  577,    0,  586,    0,    0,    0,  832,    0,    0,
            0,    0,    0,    0,  490,  210,  874,  151,   71,    0,
            0,    0,    0,    0,    0,    0,  576,   71,  233,  233,
            0,    0,  517,  490,  490,  490,    0,    0,  576,    0,
            0,    0,    0,    0,    0,   71,    0,    0,    0,    0,
           71,  151,    0,    0,   43
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  432,  432,32767,  389,32767,32767,32767,32767,
        32767,32767,32767,  193,  193,  193,32767,32767,32767,  421,
          421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
        32767,32767,32767,32767,32767,  275,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  281,  437,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  256,  257,  259,  260,  192,  422,  144,  282,
          436,  191,  146,  220,  393,32767,32767,32767,  222,   30,
          155,  100,  392,  190,  131,  274,  276,  221,  197,  202,
          203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
          213,  196,  347,  253,  252,  251,  349,32767,  348,  386,
          386,  389,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  218,  375,  374,  219,  345,  223,  346,  225,  350,
          224,  241,  242,  239,  240,  243,  352,  351,  368,  369,
          366,  367,  195,  244,  245,  246,  247,  370,  371,  372,
          373,  177,  177,  177,  177,32767,32767,  431,  431,32767,
        32767,  232,  233,  359,  360,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  178,32767,32767,  135,
          135,  135,  135,  135,32767,32767,32767,32767,32767,  227,
          228,  226,  354,  355,  353,32767,32767,  321,32767,32767,
        32767,32767,32767,  323,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  394,  322,32767,32767,32767,32767,
        32767,32767,32767,32767,  407,  310,32767,32767,32767,32767,
        32767,  303,  119,  121,   69,  378,32767,32767,32767,32767,
        32767,  412,  237,32767,32767,32767,32767,32767,32767,  444,
        32767,  407,32767,32767,32767,32767,32767,32767,32767,32767,
          250,  229,  230,  231,32767,32767,32767,  411,  405,  362,
          363,  364,  365,32767,  356,  357,  358,  361,32767,32767,
        32767,32767,32767,32767,   73,  318,32767,  324,  324,32767,
        32767,32767,32767,   73,32767,32767,32767,32767,   73,32767,
          410,  409,   73,32767,  304,  388,   73,   86,32767,   84,
           84,32767,  105,  105,32767,32767,   88,  384,  400,32767,
           88,32767,   73,32767,  292,   75,  388,32767,32767,  137,
          137,  292,   73,  137,32767,  137,32767,    4,  328,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  305,32767,32767,32767,  271,  272,  381,
          396,32767,  397,32767,  303,32767,  235,  236,  238,  215,
        32767,  217,  261,  262,  263,  264,  265,  266,  267,  269,
        32767,32767,  308,  311,32767,32767,32767,    6,   24,  154,
        32767,    6,  306,32767,  200,32767,32767,32767,32767,  439,
        32767,32767,  194,32767,32767,   26,32767,    6,  150,32767,
           71,32767,  429,32767,32767,  405,  307,  234,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  406,32767,32767,
        32767,  126,32767,  341,32767,32767,32767,   87,32767,  198,
          145,32767,32767,  438,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,   72,32767,32767,   89,32767,32767,  405,
        32767,32767,32767,32767,32767,32767,  189,32767,32767,32767,
        32767,32767,  405,32767,32767,32767,  130,32767,32767,32767,
        32767,32767,32767,32767,    4,32767,  171,32767,32767,32767,
        32767,32767,32767,32767,   32,   32,    3,   32,  113,   32,
          157,    3,  105,  105,   66,  157,   32,  157,  157,   32,
           32,   32,   32,   32,  164,   32,   32,   32,   32,   32,
           32,   32
    );

    protected $goto = array(
          168,  168,  142,  142,  147,  142,  143,  144,  145,  150,
          152,  188,  170,  166,  166,  166,  166,  147,  147,  167,
          167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
          162,  163,  164,  165,  185,  141,  186,  496,  497,  372,
          498,  502,  503,  504,  505,  506,  507,  508,  509,  853,
          146,  148,  149,  151,  173,  178,  187,  203,  251,  254,
          256,  258,  260,  261,  262,  263,  264,  265,  273,  274,
          275,  276,  291,  292,  319,  320,  321,  391,  392,  393,
          547,  189,  190,  191,  192,  193,  194,  195,  196,  197,
          198,  199,  200,  201,  153,  154,  155,  169,  156,  171,
          157,  204,  172,  158,  159,  160,  205,  161,  139,  563,
          710,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  500,  500,  500,  500,  500,  500,  659,
          659,  380,  659,  500,  500,  500,  500,  500,  500,  500,
          500,  500,  500,  511,  576,  600,  511,  763,  748,  746,
          744,  746,  628,  514,  772,  767,  795,  434,  434,  434,
          434,  434,  434,  777,  777, 1082, 1082,  434,  434,  434,
          434,  434,  434,  434,  434,  434,  434,  956,  967,  966,
          956,  784,  784,  784,  784,  784,  784,  549,  550,  551,
          552,  553,  554,  555,  556,  558,  585,  605,  615,  543,
          610,  373,  370,  350,  579,  582,  620,  742,  742,  742,
          742,  524,  535,  737,  743,  609,  564, 1086,  564,  564,
          564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
          564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
          564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
          564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
          991, 1042,  991,  991,  991,  991,  991,  991,  991,  991,
          991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
          991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
          991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
          991,  991,  991,  991,  660,  660,  593,  660,  661,  661,
            4,  661,  333,  176,  512,    6,  317,  512,  179,  180,
          181,  399,  400,  401,  402,  175,  202,  206,  208,  255,
          257,  259,  266,  267,  268,  269,  270,  271,  277,  278,
          279,  280,  293,  294,  322,  323,  324,  404,  405,  406,
          407,  177,  182,  252,  253,  183,  184,    9,  601,    5,
          282,   10,  283,  284,  586,  353,  412, 1079,   11,  387,
         1054,    1,   12,   13,    2,   14,  517,    7,   15,   16,
           17,   18,   19,   20,  398,  602,  542,  542,  569,  538,
          521,  949,  351,  352,  540,  540,  499,  501,  529,  545,
          570,  573,  583,  589,  972, 1092, 1092,  537,  521,  521,
          521,  832,  413,  910,   26,   21,  366,  385,  403,  408,
         1061, 1095, 1092, 1061,  374,  900,  513,  781,  527,  513,
          559,  799,  539, 1062, 1095, 1095, 1062,  790,  639,  381,
          381,  381,   29, 1077, 1077, 1077,  548,  598,  455,  674,
          523,  381,  992,  851,  942, 1060,  952,  953,  607,  397,
          949,  409,  947,  523,  523,  450,  680,  574,  804,  751,
         1039,  521,  463,  950, 1053,  950,  840,    0,    0,    0,
          522,    0,    0,  951,    0,    0,    0,    0,    0,  546,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  528
    );

    protected $gotoCheck = array(
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   41,
           34,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   97,   97,   97,   97,   97,   97,    6,
            6,    5,    6,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   24,   24,   97,    6,    6,    6,
            6,    6,    6,    6,    6,    6,   65,   41,   41,   41,
           41,   41,   41,   58,   58,   58,   58,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,  105,  105,
           41,   41,   41,   41,   41,   41,   41,   90,   90,   90,
           90,   90,   90,   90,   90,   90,   90,   45,   41,   89,
           45,   31,   45,   53,   44,   44,   44,   41,   41,   41,
           41,   81,    5,   41,   41,   41,  100,  121,  100,  100,
          100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
          100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
          100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
          100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
          107,  113,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,    7,    7,  109,    7,    8,    8,
            2,    8,  106,   15,  100,    2,  106,  100,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   16,   33,   16,
           49,   16,   49,   49,   51,   51,   51,  119,   16,   32,
           63,   16,   16,   16,   16,   16,    4,   16,   16,   16,
           16,   16,   16,   16,   35,   35,   35,   35,   35,   35,
            4,   63,   53,   53,   35,   35,   35,   35,   35,   35,
           35,   35,   35,   35,   18,  122,  122,    4,    4,    4,
            4,   78,   78,   18,   18,   18,   18,    9,    9,    9,
           99,  122,  122,   99,   42,   82,  103,   60,   42,  103,
           18,   66,   42,   98,  122,  122,   98,   62,   55,  104,
          104,  104,   18,   99,   99,   99,   28,   18,   42,   13,
           28,  104,  108,   81,   93,   99,   63,   63,   42,  104,
           63,   12,   95,   28,   28,   47,   14,   48,   67,   52,
          112,    4,   88,   63,   63,   63,   80,   -1,   -1,   -1,
            4,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,    4,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   81
    );

    protected $gotoBase = array(
            0,    0, -286,    0,   81, -178,  156,  331,  335,   91,
            0,    0,   70,  120,   52,  136, -238,    0,   19,    0,
            0,    0,    0,    0,  130,    0,    0,  -30,  446,    0,
            0,  185,  103,  102,   85,  129,    0,    0,    0,    0,
            0,  -98,   26,    0,  -76, -233,    0,   55,   47, -245,
            0,   58,   48, -210,    0,  100,    0,    0,  -92,    0,
          144,    0,  153,   56,    0,  155,   94,   53,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
           42,  194,  147,    0,    0,    0,    0,    0,   41,  196,
          167,    0,    0,   66,    0,   69,    0, -132,  158,  145,
           39,    0,    0,  151,  141, -121,   15,   83,  113,  126,
            0,    0,   44,   80,    0,    0,    0,    0,    0,  109,
            0,  212,  119,    0
    );

    protected $gotoDefault = array(
        -32768,  466,    3,  654,  483,  518,  685,  686,  687,  376,
          356,  668,  375,  675,  681,  174,    8,  683,  901,  362,
          690,  363,  588,  692,  531,  694,  695,  140,  484,  377,
          378,  532,  386,  577,  709,  272,  383,  711,  364,  713,
          719,  365,  608,  592,  560,  604,  485,  446,  571,  281,
          541,  567,  750,  349,  758,  642,  766,  769,  486,  561,
          780,  452,  788,  977,  394,  794,  800,  805,  808,  422,
          410,  584,  812,  813,  326,  817,  616,  617,  831,  306,
          839,  852,  418,  920,  922,  487,  488,  525,  460,  510,
          530,  489,  943,  440,  411,  946,  490,  491,  430,  431,
          964,  961,  355, 1047,  354,  448,  316, 1032, 1031,  580,
          996,  456, 1085, 1043,  344,  492,  493,  371,  388, 1080,
          435, 1087, 1094,  568
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,   10,   10,
           11,   11,    9,    9,   13,   13,   13,   13,   12,   12,
           14,   16,   16,   17,   17,   17,   17,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,   38,   38,   40,   39,
           39,   32,   32,   42,   42,   43,   43,    7,    8,    8,
            8,   46,   46,   46,   47,   47,   50,   50,   48,   48,
           51,   51,   25,   25,   34,   34,   37,   37,   36,   36,
           52,   26,   26,   26,   26,   53,   53,   54,   54,   55,
           55,   23,   23,   19,   19,   56,   21,   21,   57,   20,
           20,   22,   22,   33,   33,   33,   44,   44,   59,   59,
           60,   60,   62,   62,   62,   61,   61,   45,   45,   63,
           63,   63,   64,   64,   65,   65,   65,   29,   29,   66,
           66,   66,   30,   30,   67,   67,   49,   49,   68,   68,
           68,   68,   73,   73,   74,   74,   75,   75,   75,   75,
           76,   77,   77,   72,   72,   69,   69,   71,   71,   79,
           79,   78,   78,   78,   78,   78,   78,   70,   70,   80,
           80,   31,   31,   24,   24,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
           27,   27,   27,   27,   27,   27,   27,   27,   27,   18,
           18,   28,   28,   85,   85,   86,   86,   86,   86,   92,
           81,   81,   88,   88,   94,   94,   95,   96,   96,   96,
           96,   96,   96,  100,  100,   41,   41,   41,   82,   82,
          101,  101,   97,   97,  102,  102,  102,  102,   83,   83,
           83,   87,   87,   87,   93,   93,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,   15,
           15,   15,   15,   15,   15,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,   91,   91,
           84,   84,   84,   84,  108,  108,  109,  109,  112,  112,
          111,  111,  113,  113,   35,   35,   35,   35,  115,  115,
          114,  114,  114,  114,  114,  116,  116,   99,   99,  103,
          103,   98,   98,  117,  117,  117,  117,  104,  104,  104,
          104,   90,   90,  105,  105,  105,   58,  118,  118,  119,
          119,  119,   89,   89,  120,  120,  121,  121,  121,  121,
          106,  106,  106,  106,  122,  122,  122,  122,  122,  122,
          122,  123,  123,  123
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    1,    3,    1,    1,
            6,    7,    3,    1,    1,    3,    2,    4,    3,    1,
            3,    2,    0,    1,    1,    1,    1,    3,    5,    8,
            3,    5,    9,    3,    2,    3,    2,    3,    2,    3,
            2,    3,    3,    3,    1,    2,    5,    7,    9,    5,
            1,    6,    3,    3,    2,    1,    0,    2,    8,    0,
            4,    1,    3,    0,    1,    0,    1,   10,    7,    6,
            5,    1,    2,    2,    0,    2,    0,    2,    0,    2,
            1,    3,    1,    4,    1,    4,    1,    4,    1,    3,
            3,    3,    4,    4,    5,    0,    2,    4,    3,    1,
            1,    1,    4,    0,    2,    3,    0,    2,    4,    0,
            2,    0,    3,    1,    2,    1,    1,    0,    1,    3,
            4,    6,    1,    1,    1,    0,    1,    0,    2,    2,
            3,    3,    1,    3,    1,    2,    2,    3,    1,    1,
            2,    4,    3,    1,    1,    3,    2,    0,    3,    3,
            9,    3,    1,    3,    0,    2,    4,    5,    4,    4,
            3,    1,    1,    1,    3,    1,    1,    0,    1,    1,
            2,    1,    1,    1,    1,    1,    1,    1,    3,    1,
            3,    3,    1,    0,    1,    1,    3,    3,    4,    4,
            1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
            3,    5,    4,    3,    4,    4,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            1,    1,    1,    3,    2,    1,    2,   10,   11,    3,
            3,    2,    4,    4,    3,    4,    4,    4,    4,    7,
            3,    2,    0,    4,    1,    3,    2,    2,    4,    6,
            2,    2,    4,    1,    1,    1,    2,    3,    1,    1,
            1,    1,    1,    1,    3,    3,    4,    4,    0,    2,
            1,    0,    1,    1,    0,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    3,    2,    1,
            3,    1,    4,    3,    1,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    5,    4,    4,    3,    1,    3,
            1,    1,    3,    3,    1,    1,    0,    2,    0,    1,
            3,    1,    3,    1,    1,    1,    1,    1,    6,    4,
            3,    4,    2,    4,    4,    1,    3,    1,    2,    1,
            1,    4,    1,    3,    6,    4,    4,    4,    4,    1,
            4,    0,    1,    1,    3,    1,    4,    3,    1,    1,
            1,    0,    0,    2,    3,    1,    3,    1,    4,    2,
            2,    2,    1,    2,    1,    4,    3,    3,    3,    6,
            3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1() {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule2() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
    }

    protected function reduceRule3() {
         $this->semValue = array();
    }

    protected function reduceRule4() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule5() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule6() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule7() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule8() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule9() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule10() {
         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule11() {
         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule12() {
         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule13() {
         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule14() {
         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule15() {
         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule16() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule17() {
         $this->semValue = new Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule18() {
         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
    }

    protected function reduceRule19() {
         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
    }

    protected function reduceRule20() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-5)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule21() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-6)], $this->semStack[$this->stackPos-(7-2)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule22() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule23() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule24() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule25() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule26() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule27() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule28() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule29() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule30() {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule31() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
    }

    protected function reduceRule32() {
         $this->semValue = array();
    }

    protected function reduceRule33() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule34() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule35() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule36() {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule37() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule38() {
         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(5-2)], ['stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule39() {
         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(8-2)], ['stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule40() {
         $this->semValue = new Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule41() {
         $this->semValue = new Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule42() {
         $this->semValue = new Stmt\For_(['init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule43() {
         $this->semValue = new Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule44() {
         $this->semValue = new Stmt\Break_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule45() {
         $this->semValue = new Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule46() {
         $this->semValue = new Stmt\Continue_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule47() {
         $this->semValue = new Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule48() {
         $this->semValue = new Stmt\Return_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule49() {
         $this->semValue = new Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule50() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule51() {
         $this->semValue = new Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule52() {
         $this->semValue = new Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule53() {
         $this->semValue = new Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule54() {
         $this->semValue = new Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule55() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule56() {
         $this->semValue = new Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule57() {
         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule58() {
         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], ['keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule59() {
         $this->semValue = new Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule60() {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule61() {
         $this->semValue = new Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule62() {
         $this->semValue = new Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule63() {
         $this->semValue = new Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule64() {
         $this->semValue = new Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule65() {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule66() {
         $this->semValue = array();
    }

    protected function reduceRule67() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule68() {
         $this->semValue = new Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule69() {
         $this->semValue = null;
    }

    protected function reduceRule70() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule71() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule72() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule73() {
         $this->semValue = false;
    }

    protected function reduceRule74() {
         $this->semValue = true;
    }

    protected function reduceRule75() {
         $this->semValue = false;
    }

    protected function reduceRule76() {
         $this->semValue = true;
    }

    protected function reduceRule77() {
         $this->semValue = new Stmt\Function_($this->semStack[$this->stackPos-(10-3)], ['byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule78() {
         $this->semValue = new Stmt\Class_($this->semStack[$this->stackPos-(7-2)], ['type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule79() {
         $this->semValue = new Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], ['extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule80() {
         $this->semValue = new Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule81() {
         $this->semValue = 0;
    }

    protected function reduceRule82() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule83() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule84() {
         $this->semValue = null;
    }

    protected function reduceRule85() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule86() {
         $this->semValue = array();
    }

    protected function reduceRule87() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule88() {
         $this->semValue = array();
    }

    protected function reduceRule89() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule90() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule91() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule92() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule93() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule94() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule95() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule96() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule97() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule98() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule99() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule100() {
         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule101() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule102() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule103() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule104() {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)];
    }

    protected function reduceRule105() {
         $this->semValue = array();
    }

    protected function reduceRule106() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule107() {
         $this->semValue = new Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule108() {
         $this->semValue = new Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule109() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule110() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule111() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule112() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule113() {
         $this->semValue = array();
    }

    protected function reduceRule114() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule115() {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule116() {
         $this->semValue = array();
    }

    protected function reduceRule117() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule118() {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule119() {
         $this->semValue = null;
    }

    protected function reduceRule120() {
         $this->semValue = new Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule121() {
         $this->semValue = null;
    }

    protected function reduceRule122() {
         $this->semValue = new Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule123() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
    }

    protected function reduceRule124() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true);
    }

    protected function reduceRule125() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
    }

    protected function reduceRule126() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule127() {
         $this->semValue = array();
    }

    protected function reduceRule128() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule129() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule130() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule131() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule132() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule133() {
         $this->semValue = 'array';
    }

    protected function reduceRule134() {
         $this->semValue = 'callable';
    }

    protected function reduceRule135() {
         $this->semValue = null;
    }

    protected function reduceRule136() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule137() {
         $this->semValue = null;
    }

    protected function reduceRule138() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule139() {
         $this->semValue = array();
    }

    protected function reduceRule140() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule141() {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes));
    }

    protected function reduceRule142() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule143() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule144() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule145() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule146() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule147() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule148() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule149() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule150() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule151() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule152() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule153() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule154() {
         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule155() {
         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule156() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule157() {
         $this->semValue = array();
    }

    protected function reduceRule158() {
         $this->semValue = new Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule159() {
         $this->semValue = new Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule160() {
         $this->semValue = new Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], ['type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule161() {
         $this->semValue = new Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule162() {
         $this->semValue = array();
    }

    protected function reduceRule163() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule164() {
         $this->semValue = array();
    }

    protected function reduceRule165() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule166() {
         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule167() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule168() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule169() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule170() {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]);
    }

    protected function reduceRule171() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule172() {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule173() {
         $this->semValue = null;
    }

    protected function reduceRule174() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule175() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule176() {
         $this->semValue = 0;
    }

    protected function reduceRule177() {
         $this->semValue = 0;
    }

    protected function reduceRule178() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule179() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule180() {
         Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule181() {
         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
    }

    protected function reduceRule182() {
         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
    }

    protected function reduceRule183() {
         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
    }

    protected function reduceRule184() {
         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
    }

    protected function reduceRule185() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule186() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule187() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule188() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule189() {
         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule190() {
         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule191() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule192() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule193() {
         $this->semValue = array();
    }

    protected function reduceRule194() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule195() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule196() {
         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule197() {
         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule198() {
         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule199() {
         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule200() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule201() {
         $this->semValue = new Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule202() {
         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule203() {
         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule204() {
         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule205() {
         $this->semValue = new Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule206() {
         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule207() {
         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule208() {
         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule209() {
         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule210() {
         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule211() {
         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule212() {
         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule213() {
         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule214() {
         $this->semValue = new Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule215() {
         $this->semValue = new Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule216() {
         $this->semValue = new Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule217() {
         $this->semValue = new Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule218() {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule219() {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule220() {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule221() {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule222() {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule223() {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule224() {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule225() {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule226() {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule227() {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule228() {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule229() {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule230() {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule231() {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule232() {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule233() {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule234() {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule235() {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule236() {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule237() {
         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule238() {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule239() {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule240() {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule241() {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule242() {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule243() {
         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule244() {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule245() {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule246() {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule247() {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule248() {
         $this->semValue = new Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule249() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule250() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule251() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule252() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule253() {
         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule254() {
         $this->semValue = new Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule255() {
         $this->semValue = new Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule256() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule257() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule258() {
         $this->semValue = new Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule259() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule260() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule261() {
         $this->semValue = new Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule262() {
         $this->semValue = new Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule263() {
         $this->semValue = new Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule264() {
         $this->semValue = new Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule265() {
         $this->semValue = new Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule266() {
         $this->semValue = new Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule267() {
         $this->semValue = new Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule268() {
         $this->semValue = new Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule269() {
         $this->semValue = new Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule270() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule271() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule272() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule273() {
         $this->semValue = new Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule274() {
         $this->semValue = new Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule275() {
         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule276() {
         $this->semValue = new Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule277() {
         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule278() {
         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]], $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes);
    }

    protected function reduceRule279() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule280() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule281() {
         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule282() {
         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule283() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule284() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule285() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule286() {
         $this->semValue = new Expr\ArrayDimFetch(new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule287() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule288() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule289() {
         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-2)]);
    }

    protected function reduceRule290() {
         $this->semValue = new Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule291() {
         list($class, $ctorArgs) = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule292() {
         $this->semValue = array();
    }

    protected function reduceRule293() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule294() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule295() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule296() {
         $this->semValue = new Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule297() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule298() {
         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule299() {
         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule300() {

            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
                $tmp->var = new Expr\Variable($tmp->var->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } else {
                throw new \Exception;
            }

    }

    protected function reduceRule301() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule302() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule303() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule304() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule305() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule306() {
         $this->semValue = new Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule307() {
         $this->semValue = new Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule308() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule309() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule310() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule311() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule312() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule313() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule314() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule315() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule316() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule317() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule318() {
         $this->semValue = null;
    }

    protected function reduceRule319() {
         $this->semValue = null;
    }

    protected function reduceRule320() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule321() {
         $this->semValue = array();
    }

    protected function reduceRule322() {
         $this->semValue = array(Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`'));
    }

    protected function reduceRule323() {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule324() {
         $this->semValue = array();
    }

    protected function reduceRule325() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule326() {
         $this->semValue = new Scalar\LNumber(Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule327() {
         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule328() {
         $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule329() {
         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule330() {
         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule331() {
         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule332() {
         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule333() {
         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule334() {
         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule335() {
         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule336() {
         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule337() {
         $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule338() {
         $this->semValue = new Scalar\String_('', $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule339() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule340() {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule341() {
         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule342() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule343() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule344() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule345() {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule346() {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule347() {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule348() {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule349() {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule350() {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule351() {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule352() {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule353() {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule354() {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule355() {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule356() {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule357() {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule358() {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule359() {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule360() {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule361() {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule362() {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule363() {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule364() {
         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule365() {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule366() {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule367() {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule368() {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule369() {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule370() {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule371() {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule372() {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule373() {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule374() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule375() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule376() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule377() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule378() {
         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule379() {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule380() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule381() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule382() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule383() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule384() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule385() {
         $this->semValue = 'class';
    }

    protected function reduceRule386() {
         $this->semValue = array();
    }

    protected function reduceRule387() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule388() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule389() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule390() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule391() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule392() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule393() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule394() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule395() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule396() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule397() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule398() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule399() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule400() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule401() {
         $this->semValue = new Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule402() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule403() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule404() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule405() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule406() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule407() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule408() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule409() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule410() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule411() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule412() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule413() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule414() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule415() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule416() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule417() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule418() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule419() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule420() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule421() {
         $this->semValue = null;
    }

    protected function reduceRule422() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule423() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule424() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule425() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule426() {
         $this->semValue = new Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule427() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule428() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule429() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule430() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule431() {
         $this->semValue = null;
    }

    protected function reduceRule432() {
         $this->semValue = array();
    }

    protected function reduceRule433() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule434() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule435() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule436() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule437() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule438() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule439() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule440() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule441() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule442() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule443() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]);
    }

    protected function reduceRule444() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule445() {
         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule446() {
         $this->semValue = new Expr\PropertyFetch(new Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule447() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule448() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule449() {
         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule450() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule451() {
         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule452() {
         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule453() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }
}
