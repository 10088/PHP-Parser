<?php

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar files grammar/php5.y or grammar/php7.y
 *  * the skeleton file grammar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Php5 extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 998;
    protected $gotoTableSize = 656;

    protected $invalidSymbol = 157;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 404;
    protected $YYNLSTATES   = 669;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   53,  156,  157,  153,   52,   35,  157,
          151,  152,   50,   47,    7,   48,   49,   51,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   29,  148,
           41,   15,   43,   28,   65,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   67,  157,  155,   34,  157,  154,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   33,  150,   55,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  157,  157,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
          674,  675,  676,  677,  678,-32766,  679,  680,  681,  717,
          718,  216,  217,  218,  219,  220,  221,  222,  223,  224,
          420,  225,  226,  227,  228,  229,  230,  231,  232,  233,
          234,  235,  236,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32767,-32767,-32767,-32767,  419,  237,  238,-32766,-32766,
        -32766,-32766,  682,-32766,    0,-32766,-32766,-32766,-32766,-32766,
        -32766,-32767,-32767,-32767,-32767,-32767,  683,  684,  685,  686,
          687,  688,  689, 1177,   28,  749,-32766,-32766,-32766,-32766,
        -32766,  282,  690,  691,  692,  693,  694,  695,  696,  697,
          698,  699,  700,  720,  721,  722,  723,  724,  712,  713,
          714,  715,  716,  701,  702,  703,  704,  705,  706,  707,
          743,  744,  745,  746,  747,  748,  708,  709,  710,  711,
          741,  732,  730,  731,  727,  728,   46,  719,  725,  726,
          733,  734,  736,  735,  737,  738,   52,   53,  423,   54,
           55,  729,  740,  739,  422,   56,   57,  336,   58,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,    7,-32767,
        -32767,-32767,-32767,   50,  330,   18,  523,  949,  950,  951,
          948,  947,  946,  941,-32766,-32766,-32766,  121,  767,  768,
          825,   59,   60,-32766,-32766,-32766,  812,   61, 1177,   62,
          291,  292,   63,   64,   65,   66,   67,   68,   69,   70,
          351,   24,  299,   71,  415,-32766,-32766,-32766,  116, 1092,
         1093,  752,  751,  755,  213,  214,  215,  472,-32766,-32766,
        -32766,  826,  408, 1104,  307,-32766, 1192,-32766,-32766,-32766,
        -32766,-32766,-32766, 1041,  200, -271,  435,  414,-32766,   23,
        -32766,-32766,-32766,-32766,-32766,  120,  496,  949,  950,  951,
          948,  947,  946,  348,  480,  481,  293,  625,  125,-32766,
          897,  898,  336,  482,  483,-32766, 1098, 1099, 1100, 1101,
         1095, 1096,  310,  497,-32766,  204,  431,  497, 1102, 1097,
          431,  309, -222,  497,    8,   39,  431,  327,  321, 1059,
          322,  424, -124, -124, -124,   -4,  826,  471,   99,  100,
          101,  814,  301, 1041,   38,   19,  425, -124,  473, -124,
          474, -124,  475, -124,  102,  426, -124, -124, -124,   29,
           30,  427,  428,  626,   31,  476,  431,  816,   72,  337,
          927,  349,  350,  477,  478,-32766,-32766,-32766,  298,  479,
         1041,  811,  797,  844,  429,  430,-32767,-32767,-32767,-32767,
           94,   95,   96,   97,   98,-32766,  418,-32766,-32766,-32766,
        -32766, 1142,  213,  214,  215,  295,  424,  239,  828,  640,
         -124,  280,  471,  897,  898,  755,  814, 1041, 1210,   38,
           19,  425,  200,  473,  904,  474,  497,  475,  297,  431,
          426,  213,  214,  215,   29,   30,  427,  428,  406,   31,
          476, 1041,  445,   72,  320,  826,  349,  350,  477,  478,
          421,  200,  334,  873,  479,  214,  215,  759,  844,  429,
          430,  213,  214,  215,  295,  923,   76,   77,   78,   47,
          590, 1191,  482,  655,  200,  326,   27,  294,  332,  807,
          119,  200,  241,  828,  640,   -4,   32, 1041,   79,   80,
           81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,   34,  301,  448,  826,  424,  809,  124,-32766,-32766,
        -32766,  471,  903,  441,  102,  814,  642, 1104,   38,   19,
          425,   75,  473,  416,  474,  327,  475,  766,-32766,  426,
        -32766,-32766,  644,   29,   30,  427,  826,  751,   31,  476,
         -218,  117,   72,  805,   49,  349,  350,-32766,-32766,-32766,
          215,-32766,  446,  479,-32766,-32766,  234,  235,  236,  213,
          214,  215,  874,  207,  643, 1143,  124,-32766,  200,-32766,
        -32766,-32766,  237,  238,  424,  231,  232,  233, 1041,  200,
          471,  922,  828,  640,  814,  206,  129,   38,   19,  425,
          581,  473,  242,  474,  752,  475,  755,  115,  426,   96,
           97,   98,   29,   30,  427,  826,  424,   31,  476,  126,
          128,   72,  471,  327,  349,  350,  814,  205, 1041,   38,
           19,  425,  479,  473,  243,  474,  118,  475, 1041, 1069,
          426,  200, 1041,  646,   29,   30,  427,  826,  244,   31,
          476,  296,  313,   72,  549,  123,  349,  350,-32766,-32766,
         1219,  828,  640, 1220,  479,  283,-32766,-32766,-32766,  824,
          497,  237,  238,  431,  652,  649,  460,  596,  436,  648,
          327,  455,   20,  130,  359,  424,-32766,  767,  768,  938,
          658,  471,  -82,  828,  640,  814,  603,  604,   38,   19,
          425,-32766,  473,  837,  474,  301,  475,  760,  645,  426,
          102,  926,  668,   29,   30,  427,  826,  424,   31,  476,
           43,   51,   72,  471,  127,  349,  350,  814,   45,   48,
           38,   19,  425,  479,  473,  299,  474,  753,  475,   41,
           42,  426,   44,  609,  954,   29,   30,  427,  752,  613,
           31,  476,  444,  751,   72,  621,  755,  349,  350,  331,
          529,-32766,  860,  640,  601,  479,  845,   33,  103,  104,
          105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
          584,  634,  -80,  447,   12,  279,  424,  465,  439, -409,
          600,  587,  471,   40,  828,  640,  814,  846, 1103,   38,
           19,  425,  840,  473, 1148,  474,  240,  475,  980,  982,
          426,  329,  482,  335,   29,   30,  427,    0,    0,   31,
          476, 1149,  328,   72,  208,  209,  349,  350, -501, -500,
          210,  308,  211,  306,  479, 1039,    0,    0,    0,  358,
         -401,    3,    0,    0,  202,    0,    4,    0,   11,  208,
          209, -410, 1092, 1093,    9,  210,-32766,  211,  839,  409,
         1094,   35,  384,  828,  640,  441,  383,  372,  410,  202,
          392,  531,  641,  607,  861,  856,  800, 1092, 1093,  934,
         -500,-32766,  868,  867,  933, 1094,  817,  802,  823,  815,
          765,  663,  662,   37,   36,  932,  764,  931,  763,  930,
            0,  876,  813,  810,  858,  808,  806,  570,  822, 1098,
         1099, 1100, 1101, 1095, 1096,  382,  404,   75,  325,  324,
          122, 1102, 1097,  405,  651,  653,  284,  654,  212,  656,
        -32766,  660,  570,  665, 1098, 1099, 1100, 1101, 1095, 1096,
          382,  666,  667,  657, -419,  772, 1102, 1097,  771,  770,
          866,  865, 1163,  212, 1055,-32766,  664,  798, 1216,  459,
         1215, 1185, 1183, 1168, 1181, 1083,  915, 1189, 1179,  841,
          842,  843,  939,  831, 1044,  769, 1043,  833, 1217,  761,
          762, 1218,    0,   26,  413,  407,  338,  305,  304,   73,
           25,  303,   22,-32766,  302,  290,  289,  281,  203,   74,
            0, 1020,  574, 1021, 1045, -219, -218,   14, 1085, 1108,
          905, 1049, 1046,  631,  564,  469,  464,  463,  456,  377,
           16,   15,    0,    0,    0, 1162, 1109, 1213, 1082, 1180,
         1052, 1167, 1182, 1068, 1053, 1054, 1051, 1050
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,    8,    8,    9,   10,   11,
           12,   31,   32,   33,   34,   35,   36,   37,   38,   39,
            7,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,    8,    9,   10,   31,   32,   33,   34,
           35,   36,   37,   38,   39,    7,   66,   67,   31,   32,
           33,   34,   54,   28,    0,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   68,   69,   70,   71,
           72,   73,   74,   79,    7,   77,   31,   32,   33,   34,
           35,    7,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,   67,  129,  130,  131,
          132,  133,  134,  135,  136,  137,    2,    3,    4,    5,
            6,  143,  144,  145,    7,   11,   12,  153,   14,   31,
           32,   33,   34,   35,   36,   37,   38,   39,  103,   41,
           42,   43,   44,   67,  109,  152,   82,  112,  113,  114,
          115,  116,  117,  118,    8,    9,   10,    7,  102,  103,
            1,   47,   48,   31,   32,   33,  148,   53,   79,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
            7,   67,   68,   69,   70,    8,    9,   10,  149,   75,
           76,   77,   77,   79,    8,    9,   10,   83,    8,    9,
           10,    1,  146,  139,  128,   28,  152,   30,   31,   32,
           33,   34,   35,   12,   28,   79,  102,    7,   28,    7,
           30,   31,   32,   33,   34,  149,  112,  112,  113,  114,
          115,  116,  117,    7,  120,  121,   35,   77,  149,  103,
          130,  131,  153,  129,  130,  109,  132,  133,  134,  135,
          136,  137,  138,  143,  118,    7,  146,  143,  144,  145,
          146,    7,  152,  143,    7,  151,  146,  153,  154,  152,
          156,   71,   72,   73,   74,    0,    1,   77,   50,   51,
           52,   81,   54,   12,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   66,   95,   96,   97,   98,   99,
          100,  101,  102,  143,  104,  105,  146,  148,  108,    7,
          150,  111,  112,  113,  114,    8,    9,   10,   35,  119,
           12,  148,  122,  123,  124,  125,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   28,    7,   30,   31,   32,
           33,  155,    8,    9,   10,   35,   71,   13,  148,  149,
          150,   13,   77,  130,  131,   79,   81,   12,   82,   84,
           85,   86,   28,   88,  152,   90,  143,   92,    7,  146,
           95,    8,    9,   10,   99,  100,  101,  102,  103,  104,
          105,   12,   29,  108,  109,    1,  111,  112,  113,  114,
            7,   28,   67,   29,  119,    9,   10,  122,  123,  124,
          125,    8,    9,   10,   35,  148,    8,    9,   10,   67,
           82,    1,  129,   29,   28,    7,  140,  141,  143,  148,
           13,   28,   29,  148,  149,  150,   28,   12,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   13,   54,  128,    1,   71,  148,  147,    8,    9,
           10,   77,  152,  146,   66,   81,  149,  139,   84,   85,
           86,  149,   88,  123,   90,  153,   92,  148,   28,   95,
           30,   31,   29,   99,  100,  101,    1,   77,  104,  105,
          152,  149,  108,  148,   67,  111,  112,    8,    9,   10,
           10,  151,  149,  119,    8,    9,   50,   51,   52,    8,
            9,   10,  148,   15,   29,  152,  147,   28,   28,   30,
           31,   32,   66,   67,   71,   47,   48,   49,   12,   28,
           77,  148,  148,  149,   81,   15,  149,   84,   85,   86,
          153,   88,   15,   90,   77,   92,   79,   15,   95,   47,
           48,   49,   99,  100,  101,    1,   71,  104,  105,  149,
           29,  108,   77,  153,  111,  112,   81,   15,   12,   84,
           85,   86,  119,   88,   15,   90,  149,   92,   12,  112,
           95,   28,   12,   29,   99,  100,  101,    1,   15,  104,
          105,   35,   29,  108,   78,   29,  111,  112,   31,   32,
           77,  148,  149,   80,  119,   35,    8,    9,   10,   29,
          143,   66,   67,  146,   29,   29,   72,   73,  151,   29,
          153,   72,   73,   97,   98,   71,   28,  102,  103,  148,
          149,   77,   29,  148,  149,   81,  106,  107,   84,   85,
           86,   31,   88,   35,   90,   54,   92,  148,  149,   95,
           66,  148,  149,   99,  100,  101,    1,   71,  104,  105,
           67,   67,  108,   77,   67,  111,  112,   81,   67,   67,
           84,   85,   86,  119,   88,   68,   90,   77,   92,   67,
           67,   95,   67,   74,   79,   99,  100,  101,   77,   93,
          104,  105,   86,   77,  108,   91,   79,  111,  112,  110,
           82,   82,  148,  149,  109,  119,  123,   15,   16,   17,
           18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
           87,   89,   94,   94,   94,   94,   71,  102,  102,  142,
           96,   96,   77,  151,  148,  149,   81,  123,  139,   84,
           85,   86,  150,   88,  156,   90,   29,   92,   56,   57,
           95,  127,  129,  126,   99,  100,  101,   -1,   -1,  104,
          105,  139,  126,  108,   47,   48,  111,  112,  128,  128,
           53,  128,   55,  128,  119,  154,   -1,   -1,   -1,  142,
          142,  142,   -1,   -1,   67,   -1,  142,   -1,  142,   47,
           48,  142,   75,   76,  142,   53,   79,   55,  147,  146,
           83,  151,  146,  148,  149,  146,  146,  146,  146,   67,
          146,  146,  149,  155,  148,  148,  148,   75,   76,  148,
          128,   79,  148,  148,  148,   83,  148,  148,  148,  148,
          148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
           -1,  148,  148,  148,  148,  148,  148,  130,  148,  132,
          133,  134,  135,  136,  137,  138,  149,  149,  149,  149,
          149,  144,  145,  149,  149,  149,  153,  149,  151,  149,
          153,  149,  130,  149,  132,  133,  134,  135,  136,  137,
          138,  149,  149,  149,  154,  150,  144,  145,  150,  150,
          150,  150,  155,  151,  150,  153,  150,  150,  150,  150,
          150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
          150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
          150,  150,   -1,  151,  151,  151,  151,  151,  151,  151,
          151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
           -1,  152,  152,  152,  152,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
          152,  152,   -1,   -1,   -1,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155
    );

    protected $actionBase = array(
            0,  220,  295,  109,  109,  180,  707,   -2,   -2,   -2,
           -2,   -2,  135,  473,  606,  404,  606,  505,  574,  675,
          675,  675,  330,  389,  221,  221,  816,  536,  221,  365,
          291,  328,  586,  590,  576,  435,  435,  435,  435,  134,
          134,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
          435,  384,  179,  427,  458,  718,  717,  715,  720,  812,
          651,  811,  770,  771,  551,  772,  773,  774,  775,  776,
          769,  777,  678,  778,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,   -3,  354,  383,  413,  206,
          516,  521,  521,  521,  521,  521,  521,  521,  166,  166,
          166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
          166,  166,  166,  166,  166,  406,  618,  618,  618,  510,
          737,  573,  762,  762,  762,  762,  762,  762,  762,  762,
          762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
          762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
          762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
          762,  762,  762,  762,  762,  470,  -20,  -20,  509,  630,
          327,  587,  210,  152,  197,   25,   25,   25,   25,   25,
           17,   45,    5,    5,    5,    5,  712,  305,  305,  305,
          305,  118,  118,  118,  118,  781,  780,  779,  764,  303,
          303,  643,  643,  627,  731,  522,  522,  498,  498,  487,
          487,  487,  487,  487,  487,  487,  487,  487,  487,  370,
          156,  802,  130,  130,  130,  130,  430,  430,  430,  243,
           84,  642,  608,  243,  248,  248,  248,  476,  476,  476,
           76,  638,  296,  296,  545,  545,  545,  342,  140,  140,
          140,  140,  337,  639,  543,  140,  407,  140,  140,  362,
          655,  761,  654,  760,  523,  669,   96,  673,  682,  733,
          646,  733,  569,  564,  550,  658,  373,  803,   -6,  384,
          501,  447,  611,  714,  349,  710,  193,   38,  345,  519,
           59,   13,  730,  708,  810,  809,   74,  660,  611,  611,
          611,  232,  348,  729,  727,   59,  358,  565,  565,  565,
          565,  758,  734,  565,  565,  565,  565,  755,  785,  277,
          403,  759,  137,  711,  631,  631,  636,  636,  631,  631,
          631,  631,  625,  628,  631,  792,  801,  801,  636,  637,
          636,  625,  628,  602,  602,  602,  602,  636,  628,  636,
          636,  631,  636,  801,  801,  628,  627,  801,   67,  628,
          656,  631,  647,  647,  602,  704,  703,  636,  636,  644,
          801,  801,  801,  644,  628,  602,  615,  671,  268,  801,
          602,  583,  637,  583,  615,  628,  583,  637,  637,  583,
           54,  623,  632,  670,  798,  794,  683,  603,  634,  805,
          804,  808,  806,  799,  600,  685,  702,  701,  552,  633,
          613,  635,  621,  659,  622,  665,  646,  679,  604,  604,
          604,  661,  664,  661,  604,  604,  604,  604,  604,  604,
          604,  604,  842,  657,  607,  663,  626,  700,  572,  681,
          649,  540,  742,  619,  685,  685,  767,  820,  827,  750,
          641,  620,  803,  822,  661,  835,  706,  170,  518,  800,
          766,  680,  676,  661,  797,  661,  744,  661,  819,  768,
          617,  791,  685,  790,  604,  818,  841,  840,  839,  838,
          837,  836,  757,  834,  614,  833,  699,  653,  826,  274,
          807,  658,  672,  684,  698,  322,  832,  789,  661,  661,
          752,  728,  661,  753,  713,  705,  815,  695,  825,  831,
          619,  824,  661,  645,  830,  322,  610,  629,  813,  616,
          694,  793,  817,  795,  735,  547,  579,  788,  605,  688,
          829,  828,  814,  686,  736,  593,  738,  624,  787,  740,
          796,  716,  786,  612,  821,  648,  679,  666,  609,  650,
          652,  754,  784,  823,  687,  691,  696,  783,  709,  782,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          134,  134,   -2,   -2,   -2,   -2,    0,    0,    0,    0,
            0,   -2,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,    0,    0,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  418,  -20,  -20,  -20,  -20,  418,
          -20,  -20,  -20,  -20,  -20,  -20,  -20,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  -20,  418,  418,  418,  -20,  487,
          -20,  487,  487,  487,  487,  487,  487,  487,  487,  487,
          487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
          487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
          487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
          487,  487,  487,  487,  418,    0,    0,  418,  -20,  418,
          -20,  418,  -20,  418,  418,  418,  418,  418,  418,  -20,
          -20,  -20,  -20,  -20,  -20,    0,  248,  248,  248,  248,
          -20,  -20,  -20,  -20,   55,   55,   55,   55,  487,  487,
          487,  487,  487,  487,  248,  248,  476,  476,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  487,   55,
          487,  631,  631,  631,  631,  637,  637,  637,  631,  296,
          296,  296,  631,    0,    0,    0,    0,    0,    0,  631,
          296,    0,    0,  631,  631,  631,  637,  631,  631,  631,
          631,  631,  296,  637,  631,  637,  631,  631,  801,  546,
          546,  546,  546,  322,   59,    0,  631,  631,  637,  637,
          637,    0,    0,    0,  801,    0,  636,    0,    0,    0,
            0,  604,  170,    0,  246,    0,    0,    0,    0,    0,
            0,  620,  246,  381,  381,    0,  614,  604,  604,  604,
            0,    0,  620,  620,    0,    0,    0,    0,    0,    0,
          428,  620,    0,    0,    0,    0,  428,  230,    0,    0,
          230,    0,  322
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  529,  529,32767,32767,  484,32767,
        32767,32767,32767,32767,32767,  290,  290,  290,32767,32767,
        32767,  517,  517,  517,  517,  517,  517,  517,  517,  517,
          517,  517,32767,32767,32767,32767,32767,  372,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  378,  534,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  353,  354,  356,  357,  289,  518,
          239,  379,  533,  288,  241,  317,  488,32767,32767,32767,
          319,  118,  250,  195,  487,  121,  287,  226,  371,  373,
          318,  294,  299,  300,  301,  302,  303,  304,  305,  306,
          307,  308,  309,  310,  293,  444,  350,  349,  348,  446,
        32767,  445,  481,  481,  484,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  315,  472,  471,  316,  442,
          320,  443,  322,  447,  321,  338,  339,  336,  337,  340,
          449,  448,  465,  466,  463,  464,  292,  341,  342,  343,
          344,  467,  468,  469,  470,  273,  273,  273,  273,32767,
        32767,  528,  528,32767,32767,  329,  330,  456,  457,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          274,32767,  230,  230,  230,  230,32767,32767,32767,  230,
        32767,32767,32767,32767,  324,  325,  323,  451,  452,  450,
        32767,  418,32767,  420,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  489,
        32767,32767,32767,32767,32767,  502,  407,32767,32767,32767,
          400,32767,  214,  216,  163,  475,32767,32767,32767,32767,
        32767,  507,  334,32767,32767,32767,32767,32767,  543,32767,
          502,32767,32767,32767,32767,32767,32767,  347,  326,  327,
          328,32767,32767,32767,32767,  506,  500,  459,  460,  461,
          462,32767,32767,  453,  454,  455,  458,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  167,32767,  415,  421,  421,32767,32767,
        32767,32767,  167,32767,32767,32767,32767,32767,  167,32767,
        32767,32767,32767,  505,  504,  167,32767,  401,  483,  167,
          180,32767,  178,  178,32767,  200,  200,32767,32767,  182,
          476,  495,32767,  182,  167,32767,  389,  169,  483,32767,
        32767,  232,32767,  232,  389,  167,  232,32767,32767,  232,
        32767,   83,  425,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  402,32767,32767,32767,  368,
          369,  478,  491,32767,  492,32767,  400,32767,  332,  333,
          335,  312,32767,  314,  358,  359,  360,  361,  362,  363,
          364,  366,32767,32767,  405,  408,32767,32767,32767,   85,
          110,  249,32767,  541,   85,  403,32767,32767,  297,  541,
        32767,32767,32767,32767,  536,32767,32767,  291,32767,32767,
        32767,   85,   85,  245,32767,  165,32767,  526,32767,  542,
        32767,  500,  404,32767,  331,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  501,32767,32767,32767,32767,  221,
        32767,  438,32767,   85,32767,  181,32767,32767,  295,  240,
        32767,32767,  535,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  166,32767,32767,  183,32767,32767,  500,32767,
        32767,32767,32767,32767,32767,32767,  286,32767,32767,32767,
        32767,32767,  500,32767,32767,  225,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,   83,   60,32767,  267,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          123,  123,    3,  123,  123,    3,  123,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  123,  123,  123,  208,
          252,  211,  200,  200,  160,  252,  252,  252,  259
    );

    protected $goto = array(
          160,  160,  134,  134,  139,  142,  134,  135,  136,  137,
          144,  181,  162,  158,  158,  158,  158,  139,  139,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          154,  155,  156,  157,  178,  133,  179,  498,  499,  362,
          500,  504,  505,  506,  507,  508,  509,  510,  511,  967,
          138,  140,  141,  143,  165,  170,  180,  196,  245,  248,
          250,  252,  254,  255,  256,  257,  258,  259,  267,  268,
          269,  270,  285,  286,  314,  315,  316,  378,  379,  380,
          554,  182,  183,  184,  185,  186,  187,  188,  189,  190,
          191,  192,  193,  194,  145,  146,  147,  161,  148,  163,
          149,  197,  164,  150,  151,  152,  198,  153,  131,  627,
          572,  758,  572,  572,  572,  572,  572,  572,  572,  572,
          572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
          572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
          572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
          572,  572,  572,  572,  572, 1105,  757, 1105, 1105, 1105,
         1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
         1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
         1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
         1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
          636,  889,  889, 1196, 1196,    6, 1174,  168, 1174,  514,
          788,  514,  171,  172,  173,  387,  388,  389,  390,  167,
          195,  199,  201,  249,  251,  253,  260,  261,  262,  263,
          264,  265,  271,  272,  273,  274,  287,  288,  317,  318,
          319,  393,  394,  395,  396,  169,  174,  246,  247,  175,
          176,  177,  502,  502,  502,  502,  502,  502,  528,  588,
          591,  633,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  513,  635,  513,  386,  612,  547,  547,  578,
          543,  585,  610,  794,  756,  545,  545,  501,  503,  534,
          551,  579,  582,  592,  598,  875,  515,  855,  515,  659,
          341,  516,  884,  879,  571,  819,  571,  571,  571,  571,
          571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
          571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
          571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
          571,  571,  571,  571,  571,  571,  571,  571,  571,  556,
          557,  558,  559,  560,  561,  562,  563,  565,  594,  859,
          553,  555,  519,  577, 1200,  527,  524,  524,  524,  450,
          452,  937,  638,  907,  524, 1106,  620,  935,  527,  527,
         1207, 1207,  548,  437,  437,  437,  437,  437,  437,  542,
          524,  363, 1207,  437,  437,  437,  437,  437,  437,  437,
          437,  437,  437, 1070,  602, 1070,  896,  896,  896,  896,
         1081, 1080,  357,  896, 1166,  616,  781,  896,  619,  532,
         1173,  360, 1173,  544,  370,  370,  370, 1190, 1190, 1190,
         1063, 1154,  853,  853,  853,  853,  323,  312,  457,  848,
          611,  854,  468,  781,  781,  370,  524,  524, 1172,   10,
          541,  573,  524,  524,  385,  540,  524,  661,  567, 1193,
          599,  872,  886,  617,  871,  618,  882,  622,  623,  630,
          632,  637,  639,  525,  368,  368,  368, 1206, 1206,  595,
          344,  403,  375,  552, 1014,  368,  368,  368,  893, 1206,
          276,  277,  278,  945, 1188, 1188, 1188,  368, 1221, 1209,
          774,  774,  965,  902,  782,  782,  782,  784, 1066, 1067,
          773,  347, 1063,  913,  521,  913,  342,  343,  369,  397,
         1086,  777,  373,  911,  775, 1064, 1165, 1064, 1024,   17,
           13,  356,  647,  401, 1065,  785, 1056,  953,  453,  916,
          583, 1151,  863,  466,    0,  539, 1061,    0,    0,  566,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
           21,    0,    0,    0,    0,  608,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  521,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  518,  538,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  518,    0,  538,    0,
            0,    0,    0,    0,    0,  517,    0,  522,  440,    0,
          442,    0,    0,    0,    0,    0,  615,    0,    0,    0,
            0, 1062,  624,    0,    0,  780, 1214,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  533
    );

    protected $gotoCheck = array(
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   55,
          115,   14,  115,  115,  115,  115,  115,  115,  115,  115,
          115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
          115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
          115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
          115,  115,  115,  115,  115,  122,   13,  122,  122,  122,
          122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
          122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
          122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
          122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
            8,   72,   72,   72,   72,   92,  113,   25,  113,  115,
           27,  115,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,  112,  112,  112,  112,  112,  112,   96,   58,
           58,   58,  112,  112,  112,  112,  112,  112,  112,  112,
          112,  112,  112,    5,  112,   49,   49,   49,   49,   49,
           49,   38,   38,   12,   12,   49,   49,   49,   49,   49,
           49,   49,   49,   49,   49,   12,  118,   12,  118,   12,
           67,   12,   12,   12,   55,   48,   55,   55,   55,   55,
           55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
           55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
           55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
           55,   55,   55,   55,   55,   55,   55,   55,   55,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,   31,
            2,   45,    9,    2,  136,   45,    9,    9,    9,    7,
            7,    7,    7,   79,    9,    7,    7,    7,   45,   45,
          138,  138,  104,   55,   55,   55,   55,   55,   55,    9,
            9,   44,  138,   55,   55,   55,   55,   55,   55,   55,
           55,   55,   55,   55,  123,   55,   55,   55,   55,   55,
          120,  120,   56,   55,   77,   59,   21,   55,   59,   56,
          114,   59,  114,   56,  119,  119,  119,  114,  114,  114,
           77,  127,   55,   55,   55,   55,  121,  121,   56,   55,
           47,   55,   55,   21,   21,  119,    9,    9,  114,   56,
            9,    9,    9,    9,  119,   30,    9,   30,   30,  134,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,    9,   11,   11,   11,  137,  137,   65,
           65,   65,   46,    9,   97,   11,   11,   11,   74,  137,
           63,   63,   63,   92,    8,    8,    8,   11,   11,  137,
           21,   21,   96,   76,   21,   21,   21,   21,   77,   77,
           21,   16,   77,   11,   11,   11,   67,   67,   10,   20,
           32,   23,   15,   80,   22,   77,   77,   77,   32,   32,
           32,   32,   69,   19,   77,   24,  108,   94,   61,   81,
           62,  126,   66,  103,   -1,    8,  110,   -1,   -1,   32,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           32,   -1,   -1,   -1,   -1,   32,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    8,    8,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    8,   -1,    8,   -1,
           -1,   -1,   -1,   -1,   -1,    8,   -1,    8,    8,   -1,
            8,   -1,   -1,   -1,   -1,   -1,   11,   -1,   -1,   -1,
           -1,   11,   11,   -1,   -1,    8,    8,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   96
    );

    protected $gotoBase = array(
            0,    0, -282,    0,    0,  261,    0,  366,  188,   42,
          186,  164,  282,  154,  109,  175,  191,    0,    0,  128,
          194,   96,  176,  195,  117,    7,    0,  202,    0,    0,
         -186,  341,  105,    0,    0,    0,    0,    0,  245,    0,
            0,  -22,    0,    0,  353,  339,  192,  160,  289,   -4,
            0,    0,    0,    0,    0,  104,  -16,    0,  -44,  -48,
            0,   95,   87, -175,    0,  150,  122, -146,    0,  173,
            0,    0,  -78,    0,  179,    0,  190,   75,    0,  350,
          172,  120,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  193,    0,  116,    0,  219,  183,    0,    0,
            0,    0,    0,   79,  357,  307,    0,    0,  119,    0,
          124,    0,  -27,  -93,  121,  -90,    0,    0,   -3,  118,
          103,  115,  -45,  201,    0,    0,   83,  227,    0,    0,
            0,    0,    0,    0,  177,    0,  336,  166,   69,    0,
            0
    );

    protected $gotoDefault = array(
        -32768,  470,  670,    2,  671,  742,  750,  605,  484,  485,
          520, 1184,  857,  795,  796,  365,  411,  486,  364,  398,
          391,  783,  776,  778,  786,  166,  399,  789,    1,  791,
          526,  827, 1015,  352,  799,  353,  597,  801,  536,  803,
          804,  132,  366,  367,  537,  487,  374,  586,  818,  266,
          371,  820,  354,  821,  830,  355,  467,  462,  568,  614,
          432,  449,  580,  275,  546,  575,  862,  340,  870,  650,
          878,  881,  488,  569,  892,  454,  900, 1091,  381,  906,
          912,  917,  920,  412,  400,  593,  924,  925,    5,  929,
          628,  629,  944,  300,  952,  606,  966,  417, 1034, 1036,
          489,  490,  530,  461,  512,  535,  491, 1057,  443,  402,
         1060,  492,  493,  433,  434, 1078, 1075,  346, 1159,  345,
          451,  311, 1146,  589, 1110,  458, 1199, 1155,  339,  494,
          495,  361, 1178,  376, 1194,  438, 1201, 1208,  333,  550,
          576
    );

    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
            7,    7,    8,    9,    9,   10,   11,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,   16,   16,
           17,   17,   17,   17,   19,   19,   15,   15,   20,   20,
           21,   21,   22,   22,   23,   23,   18,   18,   24,   26,
           26,   27,   28,   28,   30,   29,   29,   29,   29,   31,
           31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
           31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
           31,   31,   31,   31,   31,   31,   31,   31,   12,   12,
           52,   52,   54,   53,   53,   46,   46,   56,   56,   57,
           57,   13,   14,   14,   14,   60,   60,   60,   61,   61,
           64,   64,   62,   62,   65,   65,   39,   39,   48,   48,
           51,   51,   51,   50,   50,   66,   40,   40,   40,   40,
           67,   67,   68,   68,   69,   69,   37,   37,   33,   33,
           70,   35,   35,   71,   34,   34,   36,   36,   47,   47,
           47,   58,   58,   73,   73,   74,   74,   76,   76,   76,
           75,   75,   59,   59,   77,   77,   77,   78,   78,   79,
           79,   79,   42,   42,   80,   80,   80,   43,   43,   81,
           81,   63,   63,   82,   82,   82,   82,   87,   87,   88,
           88,   89,   89,   89,   89,   89,   90,   91,   91,   86,
           86,   83,   83,   85,   85,   93,   93,   92,   92,   92,
           92,   92,   92,   84,   84,   95,   94,   94,   44,   44,
           38,   38,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
           41,   41,   41,   41,   41,   41,   32,   32,   45,   45,
          100,  100,  101,  101,  101,  101,  107,   96,   96,  103,
          103,  109,  109,  110,  111,  111,  111,  111,  111,  111,
          115,  115,   55,   55,   55,   97,   97,  116,  116,  112,
          112,  117,  117,  117,  117,   98,   98,   98,  102,  102,
          102,  108,  108,  122,  122,  122,  122,  122,  122,  122,
          122,  122,  122,  122,  122,  122,   25,   25,   25,   25,
           25,   25,  124,  124,  124,  124,  124,  124,  124,  124,
          124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
          124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
          124,  124,  124,  124,  124,  106,  106,   99,   99,   99,
           99,  123,  123,  126,  126,  125,  125,  127,  127,   49,
           49,   49,   49,  129,  129,  128,  128,  128,  128,  128,
          130,  130,  114,  114,  118,  118,  113,  113,  132,  131,
          131,  131,  131,  119,  119,  119,  119,  105,  105,  120,
          120,  120,  120,   72,  133,  133,  134,  134,  134,  104,
          104,  135,  135,  136,  136,  136,  136,  121,  121,  121,
          121,  138,  139,  137,  137,  137,  137,  137,  137,  137,
          140,  140,  140
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    2,    3,    1,    1,
            7,    8,    6,    7,    3,    1,    3,    1,    3,    1,
            1,    3,    1,    2,    1,    2,    3,    1,    3,    3,
            1,    3,    2,    0,    1,    1,    1,    1,    1,    3,
            5,    8,    3,    5,    9,    3,    2,    3,    2,    3,
            2,    3,    3,    3,    3,    1,    2,    2,    5,    7,
            9,    5,    6,    3,    3,    2,    2,    1,    1,    1,
            0,    2,    8,    0,    4,    1,    3,    0,    1,    0,
            1,   10,    7,    6,    5,    1,    2,    2,    0,    2,
            0,    2,    0,    2,    1,    3,    1,    4,    1,    4,
            1,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    4,    3,    1,    1,    1,
            3,    1,    1,    0,    1,    1,    2,    1,    1,    1,
            1,    1,    1,    1,    3,    1,    1,    3,    3,    1,
            0,    1,    1,    3,    3,    4,    4,    1,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    2,    2,    2,    2,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    1,    3,    5,    4,
            3,    4,    4,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
            3,    2,    1,    2,   10,   11,    3,    3,    2,    4,
            4,    3,    4,    4,    4,    4,    7,    3,    2,    0,
            4,    1,    3,    2,    2,    4,    6,    2,    2,    4,
            1,    1,    1,    2,    3,    1,    1,    1,    1,    1,
            1,    3,    3,    4,    4,    0,    2,    1,    0,    1,
            1,    0,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    3,    2,    1,    3,    1,    4,
            3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    5,    4,    4,    3,    1,    3,    1,    1,    3,
            3,    0,    2,    0,    1,    3,    1,    3,    1,    1,
            1,    1,    1,    6,    4,    3,    4,    2,    4,    4,
            1,    3,    1,    2,    1,    1,    4,    1,    1,    3,
            6,    4,    4,    4,    4,    1,    4,    0,    1,    1,
            3,    1,    1,    4,    3,    1,    1,    1,    0,    0,
            2,    3,    1,    3,    1,    4,    2,    2,    2,    1,
            2,    1,    1,    1,    4,    3,    3,    3,    6,    3,
            1,    1,    1
    );

    protected function reduceRule0($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule1($stackPos) {
         $this->semValue = $this->handleNamespaces($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule2($stackPos) {
         if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
    }

    protected function reduceRule3($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule4($stackPos) {
         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule5($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule6($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule7($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule8($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule9($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule10($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule11($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule12($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule13($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule14($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule15($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule16($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule17($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule18($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule19($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule20($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule21($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule22($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule23($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule24($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule25($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule26($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule27($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule28($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule29($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule30($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule31($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule32($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule33($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule34($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule35($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule36($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule37($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule38($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule39($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule40($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule41($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule42($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule43($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule44($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule45($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule46($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule47($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule48($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule49($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule50($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule51($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule52($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule53($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule54($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule55($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule56($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule57($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule58($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule59($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule60($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule61($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule62($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule63($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule64($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule65($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule66($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule67($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule68($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule69($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule70($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule71($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule72($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule73($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule74($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule75($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule76($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule77($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule78($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule79($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule80($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule81($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule82($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule83($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule84($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule85($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule86($stackPos) {
         $this->semValue = new Expr\Variable(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule87($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule88($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule89($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule90($stackPos) {
         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule91($stackPos) {
         $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(3-2)], null, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule92($stackPos) {
         $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule93($stackPos) {
         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule94($stackPos) {
         $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule95($stackPos) {
         $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule96($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule97($stackPos) {
         $this->semValue = new Stmt\Const_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule98($stackPos) {
         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
    }

    protected function reduceRule99($stackPos) {
         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
    }

    protected function reduceRule100($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(7-3)], $this->startAttributeStack[$stackPos-(7-3)] + $this->endAttributeStack[$stackPos-(7-3)]), $this->semStack[$stackPos-(7-6)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule101($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(8-4)], $this->startAttributeStack[$stackPos-(8-4)] + $this->endAttributeStack[$stackPos-(8-4)]), $this->semStack[$stackPos-(8-7)], $this->semStack[$stackPos-(8-2)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule102($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(6-2)], $this->startAttributeStack[$stackPos-(6-2)] + $this->endAttributeStack[$stackPos-(6-2)]), $this->semStack[$stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule103($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(7-3)], $this->startAttributeStack[$stackPos-(7-3)] + $this->endAttributeStack[$stackPos-(7-3)]), $this->semStack[$stackPos-(7-6)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule104($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule105($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule106($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule107($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule108($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule109($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule110($stackPos) {
         $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));
    }

    protected function reduceRule111($stackPos) {
         $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));
    }

    protected function reduceRule112($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule113($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule114($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
    }

    protected function reduceRule115($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue->type = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule116($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule117($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule118($stackPos) {
         $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule119($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule120($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule121($stackPos) {
         $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule122($stackPos) {
         if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
    }

    protected function reduceRule123($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule124($stackPos) {
         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule125($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule126($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule127($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule128($stackPos) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule129($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)]; $attrs = $this->startAttributeStack[$stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments']) && isset($stmts[0])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };
    }

    protected function reduceRule130($stackPos) {
         $this->semValue = new Stmt\If_($this->semStack[$stackPos-(5-2)], ['stmts' => is_array($this->semStack[$stackPos-(5-3)]) ? $this->semStack[$stackPos-(5-3)] : array($this->semStack[$stackPos-(5-3)]), 'elseifs' => $this->semStack[$stackPos-(5-4)], 'else' => $this->semStack[$stackPos-(5-5)]], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule131($stackPos) {
         $this->semValue = new Stmt\If_($this->semStack[$stackPos-(8-2)], ['stmts' => $this->semStack[$stackPos-(8-4)], 'elseifs' => $this->semStack[$stackPos-(8-5)], 'else' => $this->semStack[$stackPos-(8-6)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule132($stackPos) {
         $this->semValue = new Stmt\While_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule133($stackPos) {
         $this->semValue = new Stmt\Do_($this->semStack[$stackPos-(5-4)], is_array($this->semStack[$stackPos-(5-2)]) ? $this->semStack[$stackPos-(5-2)] : array($this->semStack[$stackPos-(5-2)]), $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule134($stackPos) {
         $this->semValue = new Stmt\For_(['init' => $this->semStack[$stackPos-(9-3)], 'cond' => $this->semStack[$stackPos-(9-5)], 'loop' => $this->semStack[$stackPos-(9-7)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule135($stackPos) {
         $this->semValue = new Stmt\Switch_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule136($stackPos) {
         $this->semValue = new Stmt\Break_(null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule137($stackPos) {
         $this->semValue = new Stmt\Break_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule138($stackPos) {
         $this->semValue = new Stmt\Continue_(null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule139($stackPos) {
         $this->semValue = new Stmt\Continue_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule140($stackPos) {
         $this->semValue = new Stmt\Return_(null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule141($stackPos) {
         $this->semValue = new Stmt\Return_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule142($stackPos) {
         $this->semValue = new Stmt\Global_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule143($stackPos) {
         $this->semValue = new Stmt\Static_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule144($stackPos) {
         $this->semValue = new Stmt\Echo_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule145($stackPos) {
         $this->semValue = new Stmt\InlineHTML($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule146($stackPos) {
         $this->semValue = new Stmt\Expression($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule147($stackPos) {
         $this->semValue = new Stmt\Expression($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule148($stackPos) {
         $this->semValue = new Stmt\Unset_($this->semStack[$stackPos-(5-3)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule149($stackPos) {
         $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$stackPos-(7-5)][1], 'stmts' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule150($stackPos) {
         $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(9-3)], $this->semStack[$stackPos-(9-7)][0], ['keyVar' => $this->semStack[$stackPos-(9-5)], 'byRef' => $this->semStack[$stackPos-(9-7)][1], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule151($stackPos) {
         $this->semValue = new Stmt\Declare_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule152($stackPos) {
         $this->semValue = new Stmt\TryCatch($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);
    }

    protected function reduceRule153($stackPos) {
         $this->semValue = new Stmt\Throw_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule154($stackPos) {
         $this->semValue = new Stmt\Goto_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule155($stackPos) {
         $this->semValue = new Stmt\Label($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule156($stackPos) {
         $this->semValue = new Stmt\Expression($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule157($stackPos) {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule158($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule159($stackPos) {
         $startAttributes = $this->startAttributeStack[$stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };
            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule160($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule161($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule162($stackPos) {
         $this->semValue = new Stmt\Catch_(array($this->semStack[$stackPos-(8-3)]), $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-7)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule163($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule164($stackPos) {
         $this->semValue = new Stmt\Finally_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule165($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule166($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule167($stackPos) {
         $this->semValue = false;
    }

    protected function reduceRule168($stackPos) {
         $this->semValue = true;
    }

    protected function reduceRule169($stackPos) {
         $this->semValue = false;
    }

    protected function reduceRule170($stackPos) {
         $this->semValue = true;
    }

    protected function reduceRule171($stackPos) {
         $this->semValue = new Stmt\Function_($this->semStack[$stackPos-(10-3)], ['byRef' => $this->semStack[$stackPos-(10-2)], 'params' => $this->semStack[$stackPos-(10-5)], 'returnType' => $this->semStack[$stackPos-(10-7)], 'stmts' => $this->semStack[$stackPos-(10-9)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule172($stackPos) {
         $this->semValue = new Stmt\Class_($this->semStack[$stackPos-(7-2)], ['type' => $this->semStack[$stackPos-(7-1)], 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            $this->checkClass($this->semValue, $stackPos-(7-2));
    }

    protected function reduceRule173($stackPos) {
         $this->semValue = new Stmt\Interface_($this->semStack[$stackPos-(6-2)], ['extends' => $this->semStack[$stackPos-(6-3)], 'stmts' => $this->semStack[$stackPos-(6-5)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            $this->checkInterface($this->semValue, $stackPos-(6-2));
    }

    protected function reduceRule174($stackPos) {
         $this->semValue = new Stmt\Trait_($this->semStack[$stackPos-(5-2)], ['stmts' => $this->semStack[$stackPos-(5-4)]], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule175($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule176($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule177($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule178($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule179($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule180($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule181($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule182($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule183($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule184($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule185($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule186($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule187($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule188($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule189($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule190($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule191($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule192($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule193($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule194($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule195($stackPos) {
         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule196($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule197($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-3)];
    }

    protected function reduceRule198($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule199($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(5-3)];
    }

    protected function reduceRule200($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule201($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule202($stackPos) {
         $this->semValue = new Stmt\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule203($stackPos) {
         $this->semValue = new Stmt\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule204($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule205($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule206($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule207($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule208($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule209($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule210($stackPos) {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(3-2)], is_array($this->semStack[$stackPos-(3-3)]) ? $this->semStack[$stackPos-(3-3)] : array($this->semStack[$stackPos-(3-3)]), $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule211($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule212($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule213($stackPos) {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule214($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule215($stackPos) {
         $this->semValue = new Stmt\Else_(is_array($this->semStack[$stackPos-(2-2)]) ? $this->semStack[$stackPos-(2-2)] : array($this->semStack[$stackPos-(2-2)]), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule216($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule217($stackPos) {
         $this->semValue = new Stmt\Else_($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule218($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
    }

    protected function reduceRule219($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(2-2)], true);
    }

    protected function reduceRule220($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
    }

    protected function reduceRule221($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule222($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule223($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule224($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule225($stackPos) {
         $this->semValue = new Node\Param($this->semStack[$stackPos-(4-4)], null, $this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->checkParam($this->semValue);
    }

    protected function reduceRule226($stackPos) {
         $this->semValue = new Node\Param($this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-6)], $this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-3)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkParam($this->semValue);
    }

    protected function reduceRule227($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule228($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : 'array');
    }

    protected function reduceRule229($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : 'callable');
    }

    protected function reduceRule230($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule231($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule232($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule233($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule234($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule235($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule236($stackPos) {
         $this->semValue = array(new Node\Arg($this->semStack[$stackPos-(3-2)], false, false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes));
    }

    protected function reduceRule237($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule238($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule239($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule240($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule241($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule242($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule243($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule244($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule245($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule246($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule247($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule248($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule249($stackPos) {
         $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule250($stackPos) {
         $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule251($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule252($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule253($stackPos) {
         $this->semValue = new Stmt\Property($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkProperty($this->semValue, $stackPos-(3-1));
    }

    protected function reduceRule254($stackPos) {
         $this->semValue = new Stmt\ClassConst($this->semStack[$stackPos-(3-2)], 0, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule255($stackPos) {
         $this->semValue = new Stmt\ClassMethod($this->semStack[$stackPos-(9-4)], ['type' => $this->semStack[$stackPos-(9-1)], 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-6)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            $this->checkClassMethod($this->semValue, $stackPos-(9-1));
    }

    protected function reduceRule256($stackPos) {
         $this->semValue = new Stmt\TraitUse($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule257($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule258($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule259($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule260($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule261($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule262($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(5-1)][0], $this->semStack[$stackPos-(5-1)][1], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule263($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule264($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule265($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule266($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
    }

    protected function reduceRule267($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule268($stackPos) {
         $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule269($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule270($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule271($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule272($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule273($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule274($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule275($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule276($stackPos) {
         $this->checkModifier($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $this->semValue = $this->semStack[$stackPos-(2-1)] | $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule277($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
    }

    protected function reduceRule278($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
    }

    protected function reduceRule279($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
    }

    protected function reduceRule280($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
    }

    protected function reduceRule281($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule282($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule283($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule284($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule285($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : substr($this->semStack[$stackPos-(1-1)], 1));
    }

    protected function reduceRule286($stackPos) {
         $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule287($stackPos) {
         $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule288($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule289($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule290($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule291($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule292($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule293($stackPos) {
         $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule294($stackPos) {
         $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule295($stackPos) {
         $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule296($stackPos) {
         $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule297($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule298($stackPos) {
         $this->semValue = new Expr\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule299($stackPos) {
         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule300($stackPos) {
         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule301($stackPos) {
         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule302($stackPos) {
         $this->semValue = new Expr\AssignOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule303($stackPos) {
         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule304($stackPos) {
         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule305($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule306($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule307($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule308($stackPos) {
         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule309($stackPos) {
         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule310($stackPos) {
         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule311($stackPos) {
         $this->semValue = new Expr\PostInc($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule312($stackPos) {
         $this->semValue = new Expr\PreInc($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule313($stackPos) {
         $this->semValue = new Expr\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule314($stackPos) {
         $this->semValue = new Expr\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule315($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule316($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule317($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule318($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule319($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule320($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule321($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule322($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule323($stackPos) {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule324($stackPos) {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule325($stackPos) {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule326($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule327($stackPos) {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule328($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule329($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule330($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule331($stackPos) {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule332($stackPos) {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule333($stackPos) {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule334($stackPos) {
         $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule335($stackPos) {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule336($stackPos) {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule337($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule338($stackPos) {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule339($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule340($stackPos) {
         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule341($stackPos) {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule342($stackPos) {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule343($stackPos) {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule344($stackPos) {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule345($stackPos) {
         $this->semValue = new Expr\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule346($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule347($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule348($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule349($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule350($stackPos) {
         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule351($stackPos) {
         $this->semValue = new Expr\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule352($stackPos) {
         $this->semValue = new Expr\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule353($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule354($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule355($stackPos) {
         $this->semValue = new Expr\Eval_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule356($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule357($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule358($stackPos) {
         $this->semValue = new Expr\Cast\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule359($stackPos) {
         $this->semValue = new Expr\Cast\Double($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule360($stackPos) {
         $this->semValue = new Expr\Cast\String_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule361($stackPos) {
         $this->semValue = new Expr\Cast\Array_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule362($stackPos) {
         $this->semValue = new Expr\Cast\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule363($stackPos) {
         $this->semValue = new Expr\Cast\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule364($stackPos) {
         $this->semValue = new Expr\Cast\Unset_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule365($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
            $attrs['kind'] = strtolower($this->semStack[$stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
            $this->semValue = new Expr\Exit_($this->semStack[$stackPos-(2-2)], $attrs);
    }

    protected function reduceRule366($stackPos) {
         $this->semValue = new Expr\ErrorSuppress($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule367($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule368($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule369($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule370($stackPos) {
         $this->semValue = new Expr\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule371($stackPos) {
         $this->semValue = new Expr\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule372($stackPos) {
         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule373($stackPos) {
         $this->semValue = new Expr\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule374($stackPos) {
         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(10-2)], 'params' => $this->semStack[$stackPos-(10-4)], 'uses' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-7)], 'stmts' => $this->semStack[$stackPos-(10-9)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule375($stackPos) {
         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(11-3)], 'params' => $this->semStack[$stackPos-(11-5)], 'uses' => $this->semStack[$stackPos-(11-7)], 'returnType' => $this->semStack[$stackPos-(11-8)], 'stmts' => $this->semStack[$stackPos-(11-10)]], $this->startAttributeStack[$stackPos-(11-1)] + $this->endAttributes);
    }

    protected function reduceRule376($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule377($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule378($stackPos) {
         $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule379($stackPos) {
         $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule380($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(4-3)], $attrs);
    }

    protected function reduceRule381($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule382($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule383($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(4-1)][0] === "'" || ($this->semStack[$stackPos-(4-1)][1] === "'" && ($this->semStack[$stackPos-(4-1)][0] === 'b' || $this->semStack[$stackPos-(4-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
            $this->semValue = new Expr\ArrayDimFetch(new Scalar\String_(Scalar\String_::parse($this->semStack[$stackPos-(4-1)]), $attrs), $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule384($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule385($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule386($stackPos) {
         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes), $this->semStack[$stackPos-(7-2)]);
            $this->checkClass($this->semValue[0], -1);
    }

    protected function reduceRule387($stackPos) {
         $this->semValue = new Expr\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule388($stackPos) {
         list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule389($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule390($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-3)];
    }

    protected function reduceRule391($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule392($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule393($stackPos) {
         $this->semValue = new Expr\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule394($stackPos) {
         $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule395($stackPos) {
         $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule396($stackPos) {
         $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule397($stackPos) {
         $this->semValue = $this->fixupPhp5StaticPropCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule398($stackPos) {
         $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule399($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule400($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule401($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule402($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule403($stackPos) {
         $this->semValue = new Name\FullyQualified($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule404($stackPos) {
         $this->semValue = new Name\Relative($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule405($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule406($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule407($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule408($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule409($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule410($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule411($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule412($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule413($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule414($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule415($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule416($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule417($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule418($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule419($stackPos) {
         $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`', false), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
    }

    protected function reduceRule420($stackPos) {
         foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', false); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule421($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule422($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule423($stackPos) {
         $this->semValue = $this->parseLNumber($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes, true);
    }

    protected function reduceRule424($stackPos) {
         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule425($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(1-1)][0] === "'" || ($this->semStack[$stackPos-(1-1)][1] === "'" && ($this->semStack[$stackPos-(1-1)][0] === 'b' || $this->semStack[$stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
            $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$stackPos-(1-1)], false), $attrs);
    }

    protected function reduceRule426($stackPos) {
         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule427($stackPos) {
         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule428($stackPos) {
         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule429($stackPos) {
         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule430($stackPos) {
         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule431($stackPos) {
         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule432($stackPos) {
         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule433($stackPos) {
         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule434($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], false), $attrs);
    }

    protected function reduceRule435($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(2-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(2-1)], $matches); $attrs['docLabel'] = $matches[1];;
            $this->semValue = new Scalar\String_('', $attrs);
    }

    protected function reduceRule436($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule437($stackPos) {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule438($stackPos) {
         $this->semValue = new Expr\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule439($stackPos) {
         $this->semValue = new Expr\Array_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule440($stackPos) {
         $this->semValue = new Expr\Array_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule441($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule442($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule443($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule444($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule445($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule446($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule447($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule448($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule449($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule450($stackPos) {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule451($stackPos) {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule452($stackPos) {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule453($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule454($stackPos) {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule455($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule456($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule457($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule458($stackPos) {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule459($stackPos) {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule460($stackPos) {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule461($stackPos) {
         $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule462($stackPos) {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule463($stackPos) {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule464($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule465($stackPos) {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule466($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule467($stackPos) {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule468($stackPos) {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule469($stackPos) {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule470($stackPos) {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule471($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule472($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule473($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule474($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule475($stackPos) {
         $this->semValue = new Expr\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule476($stackPos) {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule477($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule478($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule479($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule480($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, null, true); } } $s->value = preg_replace('~(\r\n|\n|\r)\z~', '', $s->value); if ('' === $s->value) array_pop($this->semStack[$stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule481($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule482($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule483($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule484($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule485($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule486($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule487($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule488($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule489($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule490($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule491($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule492($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule493($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule494($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule495($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule496($stackPos) {
         $this->semValue = new Expr\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule497($stackPos) {
         $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule498($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule499($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule500($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule501($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule502($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule503($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule504($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule505($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule506($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule507($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule508($stackPos) {
         $var = substr($this->semStack[$stackPos-(1-1)], 1); $this->semValue = \is_string($var) ? ($this->useIdentifierNodes ? new Node\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var) : $var;
    }

    protected function reduceRule509($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule510($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule511($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule512($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule513($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule514($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule515($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule516($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule517($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule518($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule519($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule520($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule521($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule522($stackPos) {
         $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
    }

    protected function reduceRule523($stackPos) {
         $this->semValue = new Expr\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule524($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule525($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule526($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule527($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule528($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule529($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule530($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule531($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule532($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule533($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule534($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule535($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule536($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule537($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule538($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule539($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule540($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);
    }

    protected function reduceRule541($stackPos) {
         $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule542($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule543($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule544($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule545($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule546($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule547($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule548($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule549($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule550($stackPos) {
         $this->semValue = new Scalar\String_($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule551($stackPos) {
         $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule552($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }
}
