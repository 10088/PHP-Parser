<?php

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar files grammar/php5.y or grammar/php7.y
 *  * the skeleton file grammar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Php7 extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 886;
    protected $gotoTableSize = 477;

    protected $invalidSymbol = 157;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 336;
    protected $YYNLSTATES   = 567;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'`'",
        "']'",
        "'\"'",
        "'$'"
    );

    protected $tokenToSymbol = array(
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   53,  155,  157,  156,   52,   35,  157,
          151,  152,   50,   47,    7,   48,   49,   51,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   29,  148,
           41,   15,   43,   28,   65,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   67,  157,  154,   34,  157,  153,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   33,  150,   55,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  157,  157,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
          572,  573,  574,  575,  576,  215,  577,  578,  579,  615,
          616, 1011,   27,   99,  100,  101,  102,  103,  104,  105,
          106,  107,  108,  109,  110,-32766,-32766,-32766,   95,   96,
           97,    0,  239,  275, -269,-32766,-32766,-32766,-32766,-32766,
        -32766,  649,   25,  114,   98,-32766,  116,-32766,-32766,-32766,
        -32766,-32766,  580,  876,  878,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,  224,-32766,  719,  581,  582,  583,  584,
          585,  586,  587,-32766,  346,  647,  845,  846,  847,  844,
          843,  842,  588,  589,  590,  591,  592,  593,  594,  595,
          596,  597,  598,  618,  619,  620,  621,  622,  610,  611,
          612,  613,  614,  599,  600,  601,  602,  603,  604,  605,
          641,  642,  643,  644,  645,  646,  606,  607,  608,  609,
          639,  630,  628,  629,  625,  626,  286,  617,  623,  624,
          631,  632,  634,  633,  635,  636,   42,   43,  388,   44,
           45,  627,  638,  637, -216,   46,   47,  958,   48,-32767,
        -32767,-32767,-32767,   90,   91,   92,   93,   94,  269,   71,
           22,  845,  846,  847,  844,  843,  842,  837,-32766,-32766,
        -32766,  653, 1008,  350, 1047,  120,  974,  440, -428,  248,
          802,   49,   50,  665,  666,  266,    7,   51,-32766,   52,
          219,  220,   53,   54,   55,   56,   57,   58,   59,   60,
         1026,   22,  232,   61,  354,  951,-32766,-32766,-32766,  975,
          976,  650,  710, 1008,  216, -463,  478,  974,-32766,-32766,
        -32766,  720,  402,  403,  226, 1008,-32766,  340,-32766,-32766,
        -32766,-32766,   24,  222,  988,  241,  362,  349,-32766, -428,
        -32766,-32766,-32766, -240,   65, 1056,  412,  365, 1057,  259,
          540,   28,  248, -428,  400,  401,  128,  522,  951,  131,
         -428,  118, -431,  402,  403,  112,  980,  981,  982,  983,
          977,  978,  243,  117, -427, -426,  649,  413,  984,  979,
          359,  796,  797,  111,  970,   63,  130,  255,  352,  256,
          259,  389, -124, -124, -124,   -4,  720,  390,  650,  124,
           40,  709,  259, -221,   33,   17,  391, -124,  392, -124,
          393, -124,  394, -124,  707,  395, -124, -124, -124,   34,
           35,  355,  356,  523,   36,  396,  359,  819,   62,  718,
          823,  287,  288,  397,  398, -427, -426,  351, -164,  399,
           38, -426,  695,  740,  357,  358, -465,   22,  122, -427,
         -426,-32766,-32766,-32766,  796,  797, -427, -426, -430, 1008,
         -463,  247, 1008,  974,  413,   41,  389,  359,  722,  538,
         -124,-32766,  390,-32766,-32766,  290,  709, -473,  664,   33,
           17,  391,  115,  392, -474,  393,  291,  394, -240,  224,
          395,  353,  951,   21,   34,   35,  355,  356,  338,   36,
          396,  246, -426,   62,  254,  720,  287,  288,  397,  398,
          403,-32766,-32766,-32766,  399,  958, -426,  657,  740,  357,
          358,  375,  113, -426, -163,  -82,   72,   73,   74,  818,
          769,   65,  121,  544, 1008,  242,  259,  555,  272,  259,
           92,   93,   94,  722,  538,   -4,   26,  733,   75,   76,
           77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,  550,  239,  126,  720,  389,-32766,-32766,  258,  498,
           18,  390,   16, -164,   98,  709,  127,  298,   33,   17,
          391, -465,  392, 1008,  393,  119,  394,  509,  510,  395,
          276,  120,  545,   34,   35,  355,  720,  225,   36,  396,
         1027,  259,   62,  796,  797,  287,  288,  383,    6,  494,
          495,  223, -473,  399, -473,  221,  951,  706,  239, -474,
           98, -474,  665,  666,  551,  517,  944,  347,  803,  369,
          651,  376,  658,  541,  389,  822,  566,  834,  556,  770,
          390,   39,  756,  538,  709,  125,  650,   33,   17,  391,
          649,  392, 1058,  393,  850,  394,  653,  461,  395, -163,
          259,  518,   34,   35,  355,  720,  389,   36,  396,  444,
        -32766,   62,  390,  499,  287,  288,  709,  449,  532,   33,
           17,  391,  399,  392,   10,  393,  503,  394,  -80,  742,
          395,  214,  368,  542,   34,   35,  355,  720,  504,   36,
          396,  513,  363,   62,  741,  493,  287,  288,  274,  271,
          267,  722,  538,    3,  399,  735,  264,  250,    0,  268,
            0,    0,  990,    0,  987,  543,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  389,    0,    0,    0,    0,
            0,  390,    0,  722,  538,  709,  227,  325,   33,   17,
          391,    9,  392,  289,  393, -385,  394,  265,  320,  395,
          321,  341,  365,   34,   35,  355,  720,  389,   36,  396,
          342,  310,   62,  390,  446,  287,  288,  709,   22,  565,
           33,   17,  391,  399,  392,  564,  393,  663,  394,   32,
         1008,  395,  827,   31,  974,   34,   35,  355,  703,  704,
           36,  396,  717,  705,   62,  829,  716,  287,  288,  826,
          662,  661,  722,  538,  700,  399,  772,  757,  763,  764,
          828,  698,  754,  951,  752,  830,  711,  708,  932,  336,
          337,  562,  561,  559,  539,  546,  389,  548,  549,  553,
          402,  403,  390,  554,  722,  538,  709,  557,  339,   33,
           17,  391,  660,  392, 1055,  393, 1053,  394,  835,  696,
          395,  270,   65,  659,   34,   35,  355,  259, 1054,   36,
          396,  729,  938,   62,  668,  667,  287,  288,-32766,-32766,
        -32766,  736,  727,  762,  399,  670,  669, 1052, 1009, 1002,
         1016, 1021, 1024,  761,  940,  737,  558,  738,-32766,  739,
        -32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,
        -32767,  939,  297,  722,  538,  238, -397,  237,  236,  235,
          218,  217,  132,  129,  123,  345, -453, -431,   70, -430,
           69,   68, -429,   20, -455,   67,   23,   29,   66,   64,
           37,   30,    0,   19,   15,   11,  489,  531, -219,  919,
          916,  915,  476, -217,  471,  972,  962,  528,  386,  382,
          381,  377,   14,   13,   12, -216,    0,    0,  497, 1015,
         1050, 1000, 1001,  971,    0,  989
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   13,    8,    9,   10,   11,
           12,    1,   15,   16,   17,   18,   19,   20,   21,   22,
           23,   24,   25,   26,   27,    8,    9,   10,   50,   51,
           52,    0,   54,    7,   79,    8,    9,   10,    8,    9,
           10,   77,    7,   13,   66,   28,    7,   30,   31,   32,
           33,   34,   54,   56,   57,   28,    8,   30,   31,   32,
           33,   34,   35,   35,  109,    1,   68,   69,   70,   71,
           72,   73,   74,  118,    7,   77,  112,  113,  114,  115,
          116,  117,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,    7,  129,  130,  131,
          132,  133,  134,  135,  136,  137,    2,    3,    4,    5,
            6,  143,  144,  145,  152,   11,   12,    1,   14,   41,
           42,   43,   44,   45,   46,   47,   48,   49,  109,  149,
           67,  112,  113,  114,  115,  116,  117,  118,    8,    9,
           10,   79,   79,    7,   82,  147,   83,   82,   67,   28,
          152,   47,   48,  102,  103,    7,    7,   53,   28,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
            1,   67,   68,   69,   70,  112,    8,    9,   10,   75,
           76,   77,  148,   79,   13,    7,   48,   83,    8,    9,
           10,    1,  129,  130,    7,   79,   28,  146,   30,   31,
           32,   33,  140,  141,  139,    7,  102,    7,   28,  128,
           30,   31,   32,    7,  151,   77,  112,  146,   80,  156,
          149,   13,   28,  142,  120,  121,   15,   77,  112,   15,
          149,   15,  151,  129,  130,   15,  132,  133,  134,  135,
          136,  137,  138,   15,   67,   67,   77,  143,  144,  145,
          146,  130,  131,   15,    1,  151,   15,  153,    7,  155,
          156,   71,   72,   73,   74,    0,    1,   77,   77,   15,
           67,   81,  156,  152,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,  148,   95,   96,   97,   98,   99,
          100,  101,  102,  143,  104,  105,  146,  148,  108,   29,
          150,  111,  112,  113,  114,  128,  128,    7,    7,  119,
           67,   67,  122,  123,  124,  125,    7,   67,  149,  142,
          142,    8,    9,   10,  130,  131,  149,  149,  151,   79,
          152,  128,   79,   83,  143,    7,   71,  146,  148,  149,
          150,   28,   77,   30,   31,  142,   81,    7,  148,   84,
           85,   86,  149,   88,    7,   90,    7,   92,  152,   35,
           95,    7,  112,    7,   99,  100,  101,  102,  103,  104,
          105,  128,  128,  108,  109,    1,  111,  112,  113,  114,
          130,    8,    9,   10,  119,    1,  142,  122,  123,  124,
          125,   29,  149,  149,    7,   29,    8,    9,   10,  148,
           29,  151,  149,   29,   79,   29,  156,   29,  143,  156,
           47,   48,   49,  148,  149,  150,   28,   35,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   29,   54,   29,    1,   71,    8,    9,   67,   72,
           73,   77,  152,  152,   66,   81,   97,   98,   84,   85,
           86,  152,   88,   79,   90,   29,   92,   72,   73,   95,
           33,  147,   29,   99,  100,  101,    1,   35,  104,  105,
          152,  156,  108,  130,  131,  111,  112,  102,  103,  106,
          107,   35,  152,  119,  154,   35,  112,  148,   54,  152,
           66,  154,  102,  103,   29,   74,  152,  123,  152,  128,
           77,  149,  148,  149,   71,  148,  149,  148,  149,  148,
           77,   67,  148,  149,   81,   67,   77,   84,   85,   86,
           77,   88,   80,   90,   79,   92,   79,   78,   95,  152,
          156,   91,   99,  100,  101,    1,   71,  104,  105,   82,
           82,  108,   77,   87,  111,  112,   81,   86,   89,   84,
           85,   86,  119,   88,   94,   90,   93,   92,   94,  123,
           95,   94,   94,   29,   99,  100,  101,    1,   96,  104,
          105,   96,  102,  108,  123,  109,  111,  112,  126,  110,
          126,  148,  149,  142,  119,  147,  149,  152,   -1,  127,
           -1,   -1,  139,   -1,  139,   29,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   71,   -1,   -1,   -1,   -1,
           -1,   77,   -1,  148,  149,   81,   35,  146,   84,   85,
           86,  142,   88,  142,   90,  142,   92,  149,  146,   95,
          146,  146,  146,   99,  100,  101,    1,   71,  104,  105,
          146,  146,  108,   77,  146,  111,  112,   81,   67,  148,
           84,   85,   86,  119,   88,  148,   90,  148,   92,  148,
           79,   95,  148,  148,   83,   99,  100,  101,  148,  148,
          104,  105,  148,  148,  108,  148,  148,  111,  112,  148,
          148,  148,  148,  149,  148,  119,  148,  148,  148,  148,
          148,  148,  148,  112,  148,  148,  148,  148,  153,  149,
          149,  149,  149,  149,  149,  149,   71,  149,  149,  149,
          129,  130,   77,  149,  148,  149,   81,  149,  151,   84,
           85,   86,  150,   88,  150,   90,  150,   92,  150,  150,
           95,  151,  151,  150,   99,  100,  101,  156,  150,  104,
          105,  150,  150,  108,  150,  150,  111,  112,    8,    9,
           10,  150,  150,  150,  119,  150,  150,  150,  150,  150,
          150,  150,  150,  150,  150,  150,  150,  150,   28,  150,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,  150,  152,  148,  149,  151,  153,  151,  151,  151,
          151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
          151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
          151,  151,   -1,  152,  152,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,   -1,   -1,  154,  154,
          154,  154,  154,  154,   -1,  155
    );

    protected $actionBase = array(
            0,  220,  295,  283,  180,  582,   -2,   -2,   -2,   -2,
          -36,  606,  473,  505,  473,  574,  404,  675,  675,  675,
           28,  354,  490,  490,  489,  490,  466,  486,  472,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  401,   64,  238,  568,  475,  707,  712,
          702,  703,  507,  670,  708,  201,  647,  648,  444,  649,
          650,  651,  652,  704,  724,  701,  705,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,   48,   30,  468,  403,  403,  403,  403,
          403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
          403,  403,  403,  403,  403,  160,  160,  160,  343,  210,
          208,  198,   17,  274,   27,  780,  780,  780,  780,  780,
          108,  108,  108,  108,  621,  621,   93,  280,  280,  280,
          280,  280,  280,  280,  280,  280,  280,  280,  659,  657,
          655,  654,  414,  393,  393,  151,  151,  151,  151,  146,
          -45,  224,  224,   95,  493,  730,  199,  199,  383,  111,
          207,  -22,  -22,  -22,   81,  497,   92,   92,  168,   10,
          274,  274,  233,  274,  430,  430,  430,  221,  221,  221,
          221,  221,  101,  498,  221,  221,  221,  512,  653,  397,
          515,  643,  273,  377,  370,  525,  534,  355,  510,  355,
          355,  355,  413,  407,  425,  523,  678,  392,  401,  467,
          399,  474,  589,  230,  573,  379,  166,  411,  394,  330,
          477,  572,  710,  417,  709,  358,  474,  474,  474,  386,
          518,  590,  236,   -8,  646,  591,  331,  415,  339,  645,
          635,  281,  634,  179,  384,  571,  479,  479,  483,  483,
          479,  479,  479,  479,  485,  412,  479,  692,  692,  483,
          487,  483,  485,  412,  699,  483,  412,  483,  483,  479,
          483,  692,  412,  412,  494,  479,  492,  492,  483,  483,
          502,  692,  692,  502,  412,  547,  541,  506,  478,  406,
          487,  406,  506,  412,  406,  487,  406,   31,  698,  697,
          396,  694,  696,  690,  607,  689,  595,  491,  476,  680,
          679,  687,  700,  695,  300,  538,  549,  268,  250,  481,
          484,  691,  510,  526,  464,  464,  464,  484,  686,  464,
          464,  464,  464,  464,  464,  464,  464,  729,   35,  521,
          501,  560,  561,  564,  258,  565,  535,  508,  246,  608,
          495,  538,  538,  619,  673,  585,  463,  678,  714,  683,
          555,   39,  284,  677,  656,  522,  524,  676,  594,  268,
          713,  616,  488,  614,  538,  612,  464,  685,  693,  727,
          728,  688,  725,  719,  228,  511,  588,   26,  482,  726,
          623,  593,  592,  551,  722,  706,  718,  717,   26,  576,
          496,  711,  503,  684,  620,  596,  241,  628,  682,  578,
          721,  720,  723,  579,  580,  598,  271,  599,  244,  681,
          442,  461,  480,  581,  631,  600,  674,  583,  584,  632,
          641,  715,  504,  526,  519,  509,  500,  499,  604,  671,
          716,  408,  586,  587,  567,  642,  554,  618,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  134,  134,
           -2,   -2,   -2,    0,    0,    0,    0,   -2,  134,  134,
          134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
          134,  134,  134,  134,  134,  134,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,   -3,  418,  418,
           -3,  418,  418,  418,  418,  418,  418,  -22,  -22,  -22,
          -22,  221,  221,  221,  221,  221,  221,  221,  221,  221,
          221,  221,  221,  221,  221,   49,   49,   49,   49,  221,
          -22,  -22,  221,  221,  221,  221,  221,   49,  221,  221,
           92,   92,   92,  355,  355,  221,    0,    0,    0,    0,
            0,  479,   92,    0,    0,  487,  355,    0,    0,    0,
            0,  479,  479,  479,    0,    0,    0,    0,    0,  479,
           92,    0,    0,    0,  389,  389,   26,  389,  389,    0,
            0,    0,  479,  479,    0,  487,    0,    0,    0,    0,
            0,    0,  692,  483,    0,    0,  487,    0,  464,   39,
            0,  119,    0,    0,    0,    0,    0,  463,  119,  217,
            0,  217,    0,  464,  464,  464,    0,  463,  463,    0,
            0,  178,  463,    0,    0,    0,  178,   67,    0,   67,
            0,    0,   26
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  475,  475,32767,  475,32767,32767,32767,  288,
          467,  288,  288,32767,  424,  424,  424,  424,  424,  424,
          424,  467,32767,32767,32767,32767,32767,  367,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  472,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  350,  351,  353,
          354,  287,  425,  239,  471,  286,  118,  248,  241,  193,
          285,  225,  121,  315,  368,  317,  366,  370,  316,  293,
          297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
          307,  308,  291,  292,  369,  347,  346,  345,  313,  314,
          290,  318,  320,  290,  319,  336,  337,  334,  335,  338,
          339,  340,  341,  342,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  271,  271,
          271,  271,32767,  327,  328,  231,  231,  231,  231,32767,
          272,  231,32767,32767,32767,32767,32767,32767,32767,  418,
          344,  322,  323,  321,32767,  396,32767,  398,32767,32767,
          310,  312,  390,  294,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  393,  426,  426,32767,32767,32767,  384,32767,
        32767,32767,  161,  212,  214,  401,32767,32767,32767,32767,
        32767,  332,32767,32767,32767,32767,32767,  482,32767,32767,
        32767,32767,32767,  426,32767,32767,  324,  325,  326,32767,
        32767,32767,  426,  426,32767,32767,  426,32767,  426,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  165,32767,  399,  399,32767,
        32767,32767,32767,  165,  394,32767,  165,32767,32767,32767,
        32767,32767,  165,  165,  178,32767,  176,  176,32767,32767,
          180,32767,  440,  180,  165,  198,  198,  376,  167,  233,
        32767,  233,  376,  165,  233,32767,  233,32767,32767,32767,
           83,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  386,32767,32767,  406,32767,
          419,  438,  384,32767,  330,  331,  333,32767,  428,  355,
          356,  357,  358,  359,  360,  361,  363,32767,  468,  389,
        32767,32767,32767,32767,32767,32767,   85,  110,  247,32767,
          480,   85,  387,32767,  480,32767,32767,32767,32767,32767,
        32767,  289,32767,32767,32767,   85,   85,32767,32767,  464,
        32767,  481,32767,  426,  388,32767,  329,  402,  445,32767,
        32767,  427,32767,32767,  220,   85,32767,  179,32767,32767,
        32767,32767,32767,32767,32767,  406,32767,32767,  181,32767,
        32767,  426,32767,32767,32767,32767,  284,32767,32767,32767,
        32767,32767,  426,32767,32767,32767,  224,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,   83,   60,32767,  265,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  123,  123,
            3,    3,  123,  123,  123,  123,  123,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  123,  250,  156,  250,
          206,  250,  250,  209,  198,  198,  257
    );

    protected $goto = array(
          163,  163,  135,  135,  146,  135,  148,  179,  164,  161,
          145,  161,  161,  161,  162,  162,  162,  162,  162,  162,
          162,  145,  157,  158,  159,  160,  176,  174,  177,  414,
          415,  301,  416,  419,  420,  421,  422,  423,  424,  425,
          426,  863,  136,  137,  138,  139,  140,  141,  142,  143,
          144,  147,  173,  175,  178,  195,  198,  199,  201,  202,
          204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
          233,  234,  251,  252,  253,  316,  317,  318,  466,  180,
          181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
          191,  192,  193,  149,  194,  150,  165,  166,  167,  196,
          168,  151,  152,  153,  169,  154,  197,  133,  170,  155,
          171,  172,  156,  524,  200,  686,  436,  534,  507,  692,
          654,  515,    5,  300,  278,  200,  441,  441,  441,  771,
          468,  751,  655,  560,  441,  430,  780,  775,  432,  435,
          448,  469,  470,  472,  483,  500,  454,  456,  441,  563,
          490,  492,  512,  514,  768,  519,  520,  782,  527,  767,
          529,  535,  778,  537,  418,  418,  418,  418,  418,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  485,  485,
          973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
          973,  973,  679, 1018, 1019,  467,  833,  536,  441,  441,
          516,  831,  455,  475,  441,  441,  459,  429,  441,  656,
          948,  533, 1044, 1044,  429,  488,  279,  459,  335,  465,
          480,  442,  713,  679,  679, 1044,  755,  464,  417,  417,
          417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
          417,  417, 1059,  296,  229,  805,  230,  231,  460,  447,
          457,  257,  245, 1043, 1043,  486,  487,  530, 1036,  302,
         1028,  378,  501,  314,  910,  790, 1043, 1017,  801,  794,
            8,  285,  438,  329,  672,  672,  949,  675,  680,  680,
          680,  682, 1046,  521,  671,  308,  950, 1004,  311,  809,
          673,  547,  332,  941,  812,  683,  946,  373,  323,  502,
          328,  313,  313,  260,  261,  283,  463,  263,  322,  284,
          326,  491,  280,  281,  759,  482,  384,  849,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  438,    0,    0,    0,    0,    0,
            0,  952,    0,    0,  795,  795,  795,  795,  952,    0,
          795,  795,  841, 1023, 1023,    0,    0,  795,    0, 1014,
            0,    0,    0,    0,  506,    0, 1014,    0,    0,  947,
            0,    0,    0, 1025, 1025,    0,  749,  749,  749,  725,
          749,    0,    0,  744,  750,  726, 1010,    0,    0,    0,
          785,  785, 1033,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  453,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  811,    0, 1012, 1012,  811,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  434,  452,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  434,    0,  452,    0,
            0,    0,  433,    0,  439,  364,    0,  366,    0,    0,
            0,    0,    0,    0,    0,  678, 1051
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   54,   47,   27,    9,    8,   58,   12,
           12,   58,   94,   58,   66,   47,    9,    9,    9,   12,
           82,   12,   13,   12,    9,   12,   12,   12,   40,   40,
           40,   40,   40,   40,   37,   37,   30,    9,    9,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,  118,  118,  118,  118,  118,  118,
          118,  118,  118,  118,  118,  118,  118,  118,   72,   72,
           72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
           72,   72,   21,  122,  122,    7,    7,    7,    9,    9,
            7,    7,    9,    9,    9,    9,   71,  112,    9,   14,
           78,    5,  128,  128,  112,   64,   64,   71,   64,    2,
            2,    9,   46,   21,   21,  128,   31,    9,  116,  116,
          116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
          116,  116,   11,   55,   62,   80,   62,   62,  117,   55,
           55,  115,  115,  127,  127,   57,   57,   57,  126,   43,
          124,   55,   45,   44,   99,   74,  127,  120,   76,   77,
           55,   16,   11,   20,   21,   21,   78,   23,   21,   21,
           21,   21,  127,   11,   21,   10,   78,   78,   15,   81,
           22,   68,   19,  105,   83,   24,  107,   60,   47,   47,
           47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
           47,   47,   66,   66,   65,   61,  103,   96,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,
           -1,   54,   -1,   -1,   54,   54,   54,   54,   54,   -1,
           54,   54,   94,    8,    8,   -1,   -1,   54,   -1,   82,
           -1,   -1,   -1,   -1,   11,   -1,   82,   -1,   -1,   11,
           -1,   -1,   -1,   82,   82,   -1,   54,   54,   54,   54,
           54,   -1,   -1,   54,   54,   54,   82,   -1,   -1,   -1,
           71,   71,   71,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,    8,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   82,   -1,   82,   82,   82,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,    8,    8,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    8,   -1,    8,   -1,
           -1,   -1,    8,   -1,    8,    8,   -1,    8,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,    8,    8
    );

    protected $gotoBase = array(
            0,    0, -321,    0,    0,  201,    0,  192,  107, -138,
           13,  -16,  118,  130,  207,    3,   17,    0,    0,  -45,
            8,  -62,    4,   11,  -54,  -20,    0,  108,    0,    0,
         -393,  210,    0,    0,    0,    0,    0,  113,    0,    0,
          103,    0,    0,  226,   45,   47,  208,   84,    0,    0,
            0,    0,    0,    0,  109, -113,    0,   19, -263,    0,
          -70,  -58, -315,    0,  -53,  -37, -252,    0,   -7,    0,
            0,  176,  -36,    0,   24,    0,   26,   21,  -85,    0,
          224,   -2,  127,  -56,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  112,    0,  -35,    0,    0,   25,
            0,    0,    0,  -66,    0,  -55,    0,  -57,    0,    0,
            0,    0,  -25,    0,    0,   -4,   14,  225,  -50,    0,
           20,    0,  -96,    0,  219,    0,  233,    9,  -32,    0,
            0
    );

    protected $gotoDefault = array(
        -32768,  387,  568,    2,  569,  640,  648,  508,  404,  405,
          437,  307,  753,  693,  694,  304,  343,  406,  303,  330,
          324,  681,  674,  676,  684,  134,  333,  687,    1,  689,
          443,  721,  293,  697,  294,  511,  699,  450,  701,  702,
          431,  305,  306,  451,  312,  484,  712,  203,  309,  714,
          292,  715,  724,  299,  295,  385,  380,  473,  505,  360,
          370,  481,  228,  458,  477,  758,  277,  766,  552,  774,
          777,  407,  408,  474,  789,  374,  799,  793,  967,  319,
          804,  810,  999,  813,  816,  344,  331,  327,  820,  821,
            4,  825,  525,  526,  840,  240,  848,  496,  862,  348,
          929,  931,  445,  379,  942,  367,  334,  945, 1003,  361,
          409,  371,  959,  262,  282,  244,  410,  427,  249,  411,
          372, 1006, 1013,  315, 1029,  428, 1037, 1045,  273,  462,
          479
    );

    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
            7,    7,    8,    9,    9,   10,   11,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,   16,   16,
           17,   17,   17,   17,   19,   19,   15,   15,   20,   20,
           21,   21,   22,   22,   23,   23,   18,   18,   24,   26,
           26,   27,   28,   28,   30,   29,   29,   29,   29,   31,
           31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
           31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
           31,   31,   31,   31,   12,   12,   50,   50,   53,   53,
           52,   51,   51,   44,   44,   55,   55,   56,   56,   13,
           14,   14,   14,   59,   59,   59,   60,   60,   63,   63,
           61,   61,   64,   64,   38,   38,   46,   46,   49,   49,
           49,   48,   48,   65,   39,   39,   39,   39,   66,   66,
           67,   67,   68,   68,   36,   36,   32,   32,   69,   34,
           34,   70,   33,   33,   35,   35,   45,   45,   45,   45,
           57,   57,   73,   73,   74,   74,   76,   76,   77,   77,
           77,   75,   75,   58,   58,   78,   78,   79,   79,   80,
           80,   80,   41,   41,   81,   42,   42,   83,   83,   62,
           62,   84,   84,   84,   84,   89,   89,   90,   90,   91,
           91,   91,   91,   91,   92,   93,   93,   88,   88,   85,
           85,   87,   87,   95,   95,   94,   94,   94,   94,   94,
           94,   86,   86,   97,   96,   96,   43,   43,   37,   37,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,  104,   98,   98,  103,  103,  106,  106,
          107,  108,  108,  108,  112,  112,   54,   54,   54,   99,
           99,   99,  110,  110,  100,  100,  102,  102,  102,  105,
          105,  116,  116,  116,   72,  118,  118,  118,  101,  101,
          101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
          101,  101,  101,  101,   40,   40,  114,  114,  114,  109,
          109,  109,  119,  119,  119,  119,  119,  119,   47,   47,
           47,   82,   82,   82,   82,  122,  121,  113,  113,  113,
          113,  113,  113,  111,  111,  111,  120,  120,  120,  120,
           71,  123,  123,  124,  124,  124,  124,  124,  117,  125,
          125,  126,  126,  126,  126,  126,  115,  115,  115,  115,
          128,  129,  127,  127,  127,  127,  127,  127,  127,  130,
          130,  130,  130
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    2,    3,    1,    1,
            7,    8,    6,    7,    3,    1,    3,    1,    3,    1,
            1,    3,    1,    2,    1,    2,    3,    1,    3,    3,
            1,    3,    2,    0,    1,    1,    1,    1,    1,    3,
            7,   10,    5,    7,    9,    5,    3,    3,    3,    3,
            3,    3,    1,    2,    5,    7,    9,    5,    6,    3,
            3,    2,    2,    1,    1,    1,    0,    2,    1,    3,
            8,    0,    4,    1,    3,    0,    1,    0,    1,   10,
            7,    6,    5,    1,    2,    2,    0,    2,    0,    2,
            0,    2,    1,    3,    1,    4,    1,    4,    1,    1,
            4,    1,    3,    3,    3,    4,    4,    5,    0,    2,
            4,    3,    1,    1,    1,    4,    0,    2,    5,    0,
            2,    6,    0,    2,    0,    3,    1,    2,    1,    1,
            1,    0,    1,    3,    4,    6,    1,    2,    1,    1,
            1,    0,    1,    0,    2,    2,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    3,    1,    1,    3,    2,
            0,    3,    4,    9,    3,    1,    3,    0,    2,    4,
            5,    4,    4,    4,    3,    1,    1,    1,    3,    1,
            1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
            1,    1,    3,    1,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    3,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    5,    4,    3,    4,    4,
            2,    2,    4,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    1,    3,    2,    1,    2,    4,
            2,   10,   11,    7,    3,    2,    0,    4,    1,    3,
            2,    2,    2,    4,    1,    1,    1,    2,    3,    1,
            1,    1,    1,    1,    0,    3,    0,    1,    1,    0,
            1,    1,    3,    3,    3,    4,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            3,    2,    3,    3,    0,    1,    1,    3,    1,    1,
            3,    1,    1,    4,    4,    4,    1,    4,    1,    1,
            3,    1,    4,    2,    2,    1,    3,    1,    4,    4,
            3,    3,    3,    1,    3,    1,    1,    3,    1,    1,
            4,    3,    1,    1,    1,    3,    3,    0,    1,    3,
            1,    3,    1,    4,    2,    0,    2,    2,    1,    2,
            1,    1,    1,    4,    3,    3,    3,    6,    3,    1,
            1,    2,    1
    );

    protected function reduceRule0($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule1($stackPos) {
         $this->semValue = $this->handleNamespaces($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule2($stackPos) {
         if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
    }

    protected function reduceRule3($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule4($stackPos) {
         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule5($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule6($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule7($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule8($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule9($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule10($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule11($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule12($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule13($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule14($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule15($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule16($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule17($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule18($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule19($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule20($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule21($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule22($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule23($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule24($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule25($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule26($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule27($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule28($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule29($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule30($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule31($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule32($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule33($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule34($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule35($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule36($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule37($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule38($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule39($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule40($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule41($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule42($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule43($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule44($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule45($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule46($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule47($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule48($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule49($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule50($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule51($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule52($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule53($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule54($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule55($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule56($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule57($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule58($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule59($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule60($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule61($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule62($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule63($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule64($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule65($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule66($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule67($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule68($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule69($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule70($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule71($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule72($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule73($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule74($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule75($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule76($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule77($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule78($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule79($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule80($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule81($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule82($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule83($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule84($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule85($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule86($stackPos) {
         $this->semValue = new Expr\Variable(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule87($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule88($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule89($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule90($stackPos) {
         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule91($stackPos) {
         $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(3-2)], null, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule92($stackPos) {
         $this->semValue = new Stmt\Namespace_($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule93($stackPos) {
         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule94($stackPos) {
         $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule95($stackPos) {
         $this->semValue = new Stmt\Use_($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule96($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule97($stackPos) {
         $this->semValue = new Stmt\Const_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule98($stackPos) {
         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
    }

    protected function reduceRule99($stackPos) {
         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
    }

    protected function reduceRule100($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(7-3)], $this->startAttributeStack[$stackPos-(7-3)] + $this->endAttributeStack[$stackPos-(7-3)]), $this->semStack[$stackPos-(7-6)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule101($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(8-4)], $this->startAttributeStack[$stackPos-(8-4)] + $this->endAttributeStack[$stackPos-(8-4)]), $this->semStack[$stackPos-(8-7)], $this->semStack[$stackPos-(8-2)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule102($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(6-2)], $this->startAttributeStack[$stackPos-(6-2)] + $this->endAttributeStack[$stackPos-(6-2)]), $this->semStack[$stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule103($stackPos) {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$stackPos-(7-3)], $this->startAttributeStack[$stackPos-(7-3)] + $this->endAttributeStack[$stackPos-(7-3)]), $this->semStack[$stackPos-(7-6)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule104($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule105($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule106($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule107($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule108($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule109($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule110($stackPos) {
         $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));
    }

    protected function reduceRule111($stackPos) {
         $this->semValue = new Stmt\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));
    }

    protected function reduceRule112($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule113($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule114($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
    }

    protected function reduceRule115($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue->type = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule116($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule117($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule118($stackPos) {
         $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule119($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule120($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule121($stackPos) {
         $this->semValue = new Node\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule122($stackPos) {
         if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };
    }

    protected function reduceRule123($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule124($stackPos) {
         $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $nop = null; };
            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule125($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule126($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule127($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule128($stackPos) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule129($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)]; $attrs = $this->startAttributeStack[$stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments']) && isset($stmts[0])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };
    }

    protected function reduceRule130($stackPos) {
         $this->semValue = new Stmt\If_($this->semStack[$stackPos-(7-3)], ['stmts' => is_array($this->semStack[$stackPos-(7-5)]) ? $this->semStack[$stackPos-(7-5)] : array($this->semStack[$stackPos-(7-5)]), 'elseifs' => $this->semStack[$stackPos-(7-6)], 'else' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule131($stackPos) {
         $this->semValue = new Stmt\If_($this->semStack[$stackPos-(10-3)], ['stmts' => $this->semStack[$stackPos-(10-6)], 'elseifs' => $this->semStack[$stackPos-(10-7)], 'else' => $this->semStack[$stackPos-(10-8)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule132($stackPos) {
         $this->semValue = new Stmt\While_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule133($stackPos) {
         $this->semValue = new Stmt\Do_($this->semStack[$stackPos-(7-5)], is_array($this->semStack[$stackPos-(7-2)]) ? $this->semStack[$stackPos-(7-2)] : array($this->semStack[$stackPos-(7-2)]), $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule134($stackPos) {
         $this->semValue = new Stmt\For_(['init' => $this->semStack[$stackPos-(9-3)], 'cond' => $this->semStack[$stackPos-(9-5)], 'loop' => $this->semStack[$stackPos-(9-7)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule135($stackPos) {
         $this->semValue = new Stmt\Switch_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule136($stackPos) {
         $this->semValue = new Stmt\Break_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule137($stackPos) {
         $this->semValue = new Stmt\Continue_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule138($stackPos) {
         $this->semValue = new Stmt\Return_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule139($stackPos) {
         $this->semValue = new Stmt\Global_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule140($stackPos) {
         $this->semValue = new Stmt\Static_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule141($stackPos) {
         $this->semValue = new Stmt\Echo_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule142($stackPos) {
         $this->semValue = new Stmt\InlineHTML($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule143($stackPos) {
         $this->semValue = new Stmt\Expression($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule144($stackPos) {
         $this->semValue = new Stmt\Unset_($this->semStack[$stackPos-(5-3)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule145($stackPos) {
         $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$stackPos-(7-5)][1], 'stmts' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule146($stackPos) {
         $this->semValue = new Stmt\Foreach_($this->semStack[$stackPos-(9-3)], $this->semStack[$stackPos-(9-7)][0], ['keyVar' => $this->semStack[$stackPos-(9-5)], 'byRef' => $this->semStack[$stackPos-(9-7)][1], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule147($stackPos) {
         $this->semValue = new Stmt\Declare_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule148($stackPos) {
         $this->semValue = new Stmt\TryCatch($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);
    }

    protected function reduceRule149($stackPos) {
         $this->semValue = new Stmt\Throw_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule150($stackPos) {
         $this->semValue = new Stmt\Goto_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule151($stackPos) {
         $this->semValue = new Stmt\Label($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule152($stackPos) {
         $this->semValue = new Stmt\Expression($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule153($stackPos) {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule154($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule155($stackPos) {
         $startAttributes = $this->startAttributeStack[$stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };
            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule156($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule157($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule158($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule159($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule160($stackPos) {
         $this->semValue = new Stmt\Catch_($this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-7)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule161($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule162($stackPos) {
         $this->semValue = new Stmt\Finally_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule163($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule164($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule165($stackPos) {
         $this->semValue = false;
    }

    protected function reduceRule166($stackPos) {
         $this->semValue = true;
    }

    protected function reduceRule167($stackPos) {
         $this->semValue = false;
    }

    protected function reduceRule168($stackPos) {
         $this->semValue = true;
    }

    protected function reduceRule169($stackPos) {
         $this->semValue = new Stmt\Function_($this->semStack[$stackPos-(10-3)], ['byRef' => $this->semStack[$stackPos-(10-2)], 'params' => $this->semStack[$stackPos-(10-5)], 'returnType' => $this->semStack[$stackPos-(10-7)], 'stmts' => $this->semStack[$stackPos-(10-9)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule170($stackPos) {
         $this->semValue = new Stmt\Class_($this->semStack[$stackPos-(7-2)], ['type' => $this->semStack[$stackPos-(7-1)], 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
            $this->checkClass($this->semValue, $stackPos-(7-2));
    }

    protected function reduceRule171($stackPos) {
         $this->semValue = new Stmt\Interface_($this->semStack[$stackPos-(6-2)], ['extends' => $this->semStack[$stackPos-(6-3)], 'stmts' => $this->semStack[$stackPos-(6-5)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
            $this->checkInterface($this->semValue, $stackPos-(6-2));
    }

    protected function reduceRule172($stackPos) {
         $this->semValue = new Stmt\Trait_($this->semStack[$stackPos-(5-2)], ['stmts' => $this->semStack[$stackPos-(5-4)]], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule173($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule174($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule175($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule176($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule177($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule178($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule179($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule180($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule181($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule182($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule183($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule184($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule185($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule186($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule187($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule188($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule189($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule190($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule191($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule192($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule193($stackPos) {
         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule194($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule195($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-3)];
    }

    protected function reduceRule196($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule197($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(5-3)];
    }

    protected function reduceRule198($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule199($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule200($stackPos) {
         $this->semValue = new Stmt\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule201($stackPos) {
         $this->semValue = new Stmt\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule202($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule203($stackPos) {
        $this->semValue = $this->semStack[$stackPos];
    }

    protected function reduceRule204($stackPos) {
         $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule205($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-2)];
    }

    protected function reduceRule206($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule207($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule208($stackPos) {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(5-3)], is_array($this->semStack[$stackPos-(5-5)]) ? $this->semStack[$stackPos-(5-5)] : array($this->semStack[$stackPos-(5-5)]), $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule209($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule210($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule211($stackPos) {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule212($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule213($stackPos) {
         $this->semValue = new Stmt\Else_(is_array($this->semStack[$stackPos-(2-2)]) ? $this->semStack[$stackPos-(2-2)] : array($this->semStack[$stackPos-(2-2)]), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule214($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule215($stackPos) {
         $this->semValue = new Stmt\Else_($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule216($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
    }

    protected function reduceRule217($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(2-2)], true);
    }

    protected function reduceRule218($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
    }

    protected function reduceRule219($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
    }

    protected function reduceRule220($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule221($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule222($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule223($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule224($stackPos) {
         $this->semValue = new Node\Param($this->semStack[$stackPos-(4-4)], null, $this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->checkParam($this->semValue);
    }

    protected function reduceRule225($stackPos) {
         $this->semValue = new Node\Param($this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-6)], $this->semStack[$stackPos-(6-1)], $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-3)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkParam($this->semValue);
    }

    protected function reduceRule226($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule227($stackPos) {
         $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule228($stackPos) {
         $this->semValue = $this->handleBuiltinTypes($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule229($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : 'array');
    }

    protected function reduceRule230($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : 'callable');
    }

    protected function reduceRule231($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule232($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule233($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule234($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule235($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule236($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule237($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule238($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule239($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule240($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule241($stackPos) {
         $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule242($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule243($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule244($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule245($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule246($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule247($stackPos) {
         $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule248($stackPos) {
         $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule249($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule250($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule251($stackPos) {
         $this->semValue = new Stmt\Property($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkProperty($this->semValue, $stackPos-(3-1));
    }

    protected function reduceRule252($stackPos) {
         $this->semValue = new Stmt\ClassConst($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-1)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes); $this->checkClassConst($this->semValue, $stackPos-(4-1));
    }

    protected function reduceRule253($stackPos) {
         $this->semValue = new Stmt\ClassMethod($this->semStack[$stackPos-(9-4)], ['type' => $this->semStack[$stackPos-(9-1)], 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-6)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
            $this->checkClassMethod($this->semValue, $stackPos-(9-1));
    }

    protected function reduceRule254($stackPos) {
         $this->semValue = new Stmt\TraitUse($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule255($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule256($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule257($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule258($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule259($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule260($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(5-1)][0], $this->semStack[$stackPos-(5-1)][1], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule261($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule262($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule263($stackPos) {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule264($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
    }

    protected function reduceRule265($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule266($stackPos) {
         $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule267($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule268($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule269($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule270($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule271($stackPos) {
         $this->semValue = 0;
    }

    protected function reduceRule272($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule273($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule274($stackPos) {
         $this->checkModifier($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $this->semValue = $this->semStack[$stackPos-(2-1)] | $this->semStack[$stackPos-(2-2)];
    }

    protected function reduceRule275($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
    }

    protected function reduceRule276($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
    }

    protected function reduceRule277($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
    }

    protected function reduceRule278($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
    }

    protected function reduceRule279($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule280($stackPos) {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule281($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule282($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule283($stackPos) {
         $this->semValue = ($this->useIdentifierNodes ? new Node\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : substr($this->semStack[$stackPos-(1-1)], 1));
    }

    protected function reduceRule284($stackPos) {
         $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule285($stackPos) {
         $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule286($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule287($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule288($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule289($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule290($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule291($stackPos) {
         $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule292($stackPos) {
         $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule293($stackPos) {
         $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule294($stackPos) {
         $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule295($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule296($stackPos) {
         $this->semValue = new Expr\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule297($stackPos) {
         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule298($stackPos) {
         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule299($stackPos) {
         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule300($stackPos) {
         $this->semValue = new Expr\AssignOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule301($stackPos) {
         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule302($stackPos) {
         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule303($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule304($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule305($stackPos) {
         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule306($stackPos) {
         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule307($stackPos) {
         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule308($stackPos) {
         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule309($stackPos) {
         $this->semValue = new Expr\PostInc($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule310($stackPos) {
         $this->semValue = new Expr\PreInc($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule311($stackPos) {
         $this->semValue = new Expr\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule312($stackPos) {
         $this->semValue = new Expr\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule313($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule314($stackPos) {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule315($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule316($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule317($stackPos) {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule318($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule319($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule320($stackPos) {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule321($stackPos) {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule322($stackPos) {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule323($stackPos) {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule324($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule325($stackPos) {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule326($stackPos) {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule327($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule328($stackPos) {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule329($stackPos) {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule330($stackPos) {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule331($stackPos) {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule332($stackPos) {
         $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule333($stackPos) {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule334($stackPos) {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule335($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule336($stackPos) {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule337($stackPos) {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule338($stackPos) {
         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule339($stackPos) {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule340($stackPos) {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule341($stackPos) {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule342($stackPos) {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule343($stackPos) {
         $this->semValue = new Expr\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule344($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule345($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule346($stackPos) {
         $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule347($stackPos) {
         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule348($stackPos) {
         $this->semValue = new Expr\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule349($stackPos) {
         $this->semValue = new Expr\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule350($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule351($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule352($stackPos) {
         $this->semValue = new Expr\Eval_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule353($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule354($stackPos) {
         $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule355($stackPos) {
         $this->semValue = new Expr\Cast\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule356($stackPos) {
         $this->semValue = new Expr\Cast\Double($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule357($stackPos) {
         $this->semValue = new Expr\Cast\String_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule358($stackPos) {
         $this->semValue = new Expr\Cast\Array_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule359($stackPos) {
         $this->semValue = new Expr\Cast\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule360($stackPos) {
         $this->semValue = new Expr\Cast\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule361($stackPos) {
         $this->semValue = new Expr\Cast\Unset_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule362($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
            $attrs['kind'] = strtolower($this->semStack[$stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
            $this->semValue = new Expr\Exit_($this->semStack[$stackPos-(2-2)], $attrs);
    }

    protected function reduceRule363($stackPos) {
         $this->semValue = new Expr\ErrorSuppress($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule364($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule365($stackPos) {
         $this->semValue = new Expr\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule366($stackPos) {
         $this->semValue = new Expr\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule367($stackPos) {
         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule368($stackPos) {
         $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule369($stackPos) {
         $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule370($stackPos) {
         $this->semValue = new Expr\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule371($stackPos) {
         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(10-2)], 'params' => $this->semStack[$stackPos-(10-4)], 'uses' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-7)], 'stmts' => $this->semStack[$stackPos-(10-9)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule372($stackPos) {
         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(11-3)], 'params' => $this->semStack[$stackPos-(11-5)], 'uses' => $this->semStack[$stackPos-(11-7)], 'returnType' => $this->semStack[$stackPos-(11-8)], 'stmts' => $this->semStack[$stackPos-(11-10)]], $this->startAttributeStack[$stackPos-(11-1)] + $this->endAttributes);
    }

    protected function reduceRule373($stackPos) {
         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes), $this->semStack[$stackPos-(7-2)]);
            $this->checkClass($this->semValue[0], -1);
    }

    protected function reduceRule374($stackPos) {
         $this->semValue = new Expr\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule375($stackPos) {
         list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule376($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule377($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-3)];
    }

    protected function reduceRule378($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule379($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule380($stackPos) {
         $this->semValue = new Expr\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule381($stackPos) {
         $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule382($stackPos) {
         $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule383($stackPos) {
         $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule384($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule385($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule386($stackPos) {
         $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule387($stackPos) {
         $this->semValue = new Name\FullyQualified($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule388($stackPos) {
         $this->semValue = new Name\Relative($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule389($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule390($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule391($stackPos) {
         $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
    }

    protected function reduceRule392($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule393($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule394($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule395($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule396($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule397($stackPos) {
         $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`'), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
    }

    protected function reduceRule398($stackPos) {
         foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule399($stackPos) {
         $this->semValue = array();
    }

    protected function reduceRule400($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule401($stackPos) {
         $this->semValue = new Expr\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule402($stackPos) {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule403($stackPos) {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], new Expr\Error($this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes), $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->errorState = 2;
    }

    protected function reduceRule404($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule405($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
            $this->semValue = new Expr\Array_($this->semStack[$stackPos-(4-3)], $attrs);
    }

    protected function reduceRule406($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule407($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(1-1)][0] === "'" || ($this->semStack[$stackPos-(1-1)][1] === "'" && ($this->semStack[$stackPos-(1-1)][0] === 'b' || $this->semStack[$stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
            $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$stackPos-(1-1)]), $attrs);
    }

    protected function reduceRule408($stackPos) {
         $this->semValue = $this->parseLNumber($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule409($stackPos) {
         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule410($stackPos) {
         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule411($stackPos) {
         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule412($stackPos) {
         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule413($stackPos) {
         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule414($stackPos) {
         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule415($stackPos) {
         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule416($stackPos) {
         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule417($stackPos) {
         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule418($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule419($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule420($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)]), $attrs);
    }

    protected function reduceRule421($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(2-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(2-1)], $matches); $attrs['docLabel'] = $matches[1];;
            $this->semValue = new Scalar\String_('', $attrs);
    }

    protected function reduceRule422($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule423($stackPos) {
         $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = strpos($this->semStack[$stackPos-(3-1)], "'") === false ? Scalar\String_::KIND_HEREDOC : Scalar\String_::KIND_NOWDOC; preg_match('/\A[bB]?<<<[ \t]*[\'"]?([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)[\'"]?(?:\r\n|\n|\r)\z/', $this->semStack[$stackPos-(3-1)], $matches); $attrs['docLabel'] = $matches[1];;
            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, null, true); } } $s->value = preg_replace('~(\r\n|\n|\r)\z~', '', $s->value); if ('' === $s->value) array_pop($this->semStack[$stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
    }

    protected function reduceRule424($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule425($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule426($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule427($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule428($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule429($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule430($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule431($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule432($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule433($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule434($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule435($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule436($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule437($stackPos) {
         $this->semValue = new Expr\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule438($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule439($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule440($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule441($stackPos) {
         $this->semValue = substr($this->semStack[$stackPos-(1-1)], 1);
    }

    protected function reduceRule442($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(4-3)];
    }

    protected function reduceRule443($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule444($stackPos) {
         $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;
    }

    protected function reduceRule445($stackPos) {
         $var = $this->semStack[$stackPos-(1-1)]; $this->semValue = \is_string($var) ? ($this->useIdentifierNodes ? new Node\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var) : $var;
    }

    protected function reduceRule446($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule447($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule448($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule449($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule450($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule451($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule452($stackPos) {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule453($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule454($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule455($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule456($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule457($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule458($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule459($stackPos) {
         $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
    }

    protected function reduceRule460($stackPos) {
         $this->semValue = new Expr\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule461($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule462($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule463($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule464($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule465($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule466($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule467($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule468($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)]; $end = count($this->semValue)-1; if ($this->semValue[$end] === null) unset($this->semValue[$end]);
    }

    protected function reduceRule469($stackPos) {
         $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
    }

    protected function reduceRule470($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule471($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule472($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule473($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule474($stackPos) {
         $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule475($stackPos) {
         $this->semValue = null;
    }

    protected function reduceRule476($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule477($stackPos) {
         $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
    }

    protected function reduceRule478($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(1-1)]);
    }

    protected function reduceRule479($stackPos) {
         $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);
    }

    protected function reduceRule480($stackPos) {
         $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule481($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule482($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }

    protected function reduceRule483($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule484($stackPos) {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule485($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule486($stackPos) {
         $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule487($stackPos) {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule488($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(3-2)];
    }

    protected function reduceRule489($stackPos) {
         $this->semValue = new Scalar\String_($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule490($stackPos) {
         $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule491($stackPos) {
         $this->semValue = $this->parseNumString('-' . $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule492($stackPos) {
         $this->semValue = $this->semStack[$stackPos-(1-1)];
    }
}
