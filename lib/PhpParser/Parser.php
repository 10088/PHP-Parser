<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the parser skeleton grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 *
 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
 * the work by Masato Bito and is in the PUBLIC DOMAIN.
 */
class Parser
{
    const TOKEN_NONE    = -1;
    const TOKEN_INVALID = 154;

    const TOKEN_MAP_SIZE = 389;

    const YYLAST       = 978;
    const YY2TBLSTATE  = 323;
    const YYGLAST      = 434;
    const YYNLSTATES   = 550;
    const YYUNEXPECTED = 32767;
    const YYDEFAULT    = -32766;

    // {{{ Tokens
    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_BOOLEAN_OR = 279;
    const T_BOOLEAN_AND = 280;
    const T_IS_EQUAL = 281;
    const T_IS_NOT_EQUAL = 282;
    const T_IS_IDENTICAL = 283;
    const T_IS_NOT_IDENTICAL = 284;
    const T_IS_SMALLER_OR_EQUAL = 285;
    const T_IS_GREATER_OR_EQUAL = 286;
    const T_SL = 287;
    const T_SR = 288;
    const T_INSTANCEOF = 289;
    const T_INC = 290;
    const T_DEC = 291;
    const T_INT_CAST = 292;
    const T_DOUBLE_CAST = 293;
    const T_STRING_CAST = 294;
    const T_ARRAY_CAST = 295;
    const T_OBJECT_CAST = 296;
    const T_BOOL_CAST = 297;
    const T_UNSET_CAST = 298;
    const T_POW = 299;
    const T_NEW = 300;
    const T_CLONE = 301;
    const T_EXIT = 302;
    const T_IF = 303;
    const T_ELSEIF = 304;
    const T_ELSE = 305;
    const T_ENDIF = 306;
    const T_LNUMBER = 307;
    const T_DNUMBER = 308;
    const T_STRING = 309;
    const T_STRING_VARNAME = 310;
    const T_VARIABLE = 311;
    const T_NUM_STRING = 312;
    const T_INLINE_HTML = 313;
    const T_CHARACTER = 314;
    const T_BAD_CHARACTER = 315;
    const T_ENCAPSED_AND_WHITESPACE = 316;
    const T_CONSTANT_ENCAPSED_STRING = 317;
    const T_ECHO = 318;
    const T_DO = 319;
    const T_WHILE = 320;
    const T_ENDWHILE = 321;
    const T_FOR = 322;
    const T_ENDFOR = 323;
    const T_FOREACH = 324;
    const T_ENDFOREACH = 325;
    const T_DECLARE = 326;
    const T_ENDDECLARE = 327;
    const T_AS = 328;
    const T_SWITCH = 329;
    const T_ENDSWITCH = 330;
    const T_CASE = 331;
    const T_DEFAULT = 332;
    const T_BREAK = 333;
    const T_CONTINUE = 334;
    const T_GOTO = 335;
    const T_FUNCTION = 336;
    const T_CONST = 337;
    const T_RETURN = 338;
    const T_TRY = 339;
    const T_CATCH = 340;
    const T_FINALLY = 341;
    const T_THROW = 342;
    const T_USE = 343;
    const T_INSTEADOF = 344;
    const T_GLOBAL = 345;
    const T_STATIC = 346;
    const T_ABSTRACT = 347;
    const T_FINAL = 348;
    const T_PRIVATE = 349;
    const T_PROTECTED = 350;
    const T_PUBLIC = 351;
    const T_VAR = 352;
    const T_UNSET = 353;
    const T_ISSET = 354;
    const T_EMPTY = 355;
    const T_HALT_COMPILER = 356;
    const T_CLASS = 357;
    const T_TRAIT = 358;
    const T_INTERFACE = 359;
    const T_EXTENDS = 360;
    const T_IMPLEMENTS = 361;
    const T_OBJECT_OPERATOR = 362;
    const T_DOUBLE_ARROW = 363;
    const T_LIST = 364;
    const T_ARRAY = 365;
    const T_CALLABLE = 366;
    const T_CLASS_C = 367;
    const T_TRAIT_C = 368;
    const T_METHOD_C = 369;
    const T_FUNC_C = 370;
    const T_LINE = 371;
    const T_FILE = 372;
    const T_COMMENT = 373;
    const T_DOC_COMMENT = 374;
    const T_OPEN_TAG = 375;
    const T_OPEN_TAG_WITH_ECHO = 376;
    const T_CLOSE_TAG = 377;
    const T_WHITESPACE = 378;
    const T_START_HEREDOC = 379;
    const T_END_HEREDOC = 380;
    const T_DOLLAR_OPEN_CURLY_BRACES = 381;
    const T_CURLY_OPEN = 382;
    const T_PAAMAYIM_NEKUDOTAYIM = 383;
    const T_NAMESPACE = 384;
    const T_NS_C = 385;
    const T_DIR = 386;
    const T_NS_SEPARATOR = 387;
    const T_ELLIPSIS = 388;
    // }}}

    /* @var array Map of token ids to their respective names */
    protected static $terminals = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
        , "???"
    );

    /* @var array Map which translates lexer tokens to internal tokens */
    protected static $translate = array(
            0,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,   49,  153,  154,  150,   48,   32,  154,
          148,  149,   46,   43,    7,   44,   45,   47,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,   27,  145,
           37,   13,   39,   26,   61,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,   63,  154,  152,   31,  154,  151,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  146,   30,  147,   51,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   33,   34,   35,   36,   38,   40,   41,   42,   50,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   62,
           64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,  154,  154,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  154,  154,  154,  154,  154,  154,  135,
          136,  137,  138,  139,  140,  141,  142,  143,  144
    );

    protected static $yyaction = array(
           59,   60,  333,   61,   62,-32766,-32766,-32766,  652,   63,
           64,-32766,-32766,-32766,  355,  689,-32766,-32766,-32766,  924,
           57,  677,  678,-32766,   54,-32766,-32766,-32766,-32766,-32766,
        -32767,-32767,-32767,-32767,-32766,    0,-32766,-32766,-32766,-32766,
        -32766,   65,   66, -120,  100,  101,  102,   67,  302,   68,
          227,  228,   69,   70,   71,   72,   73,   74,   75,   76,
          886,   32,  237,   77,  325,  334,  220,  358,  330,  861,
          862,  370,  243,  920,  262,  598,  350,  371,   46,   27,
          335,  254,  372,  716,  373,  267,  374,  129,  504,  336,
          222,  131,  130,   36,   37,  375,  341,  337,   38,  376,
          233,  332,   78,  124,   31,  283,  284,  121,  377,  378,
           39,  230,  353,  379,  380,  381,  623,  580,  624,  382,
          383,  290,  813,-32766,  384,  385,  653,  867,  868,  869,
          870,  864,  865,  244,   82,   83,   84,  193,  397,  871,
          866,  338,  231,  604,  523,  282,   47,  914,  265,  252,
           35,  256,   40,  554,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,  102,  103,  104,  105,  949,  238,-32766,  234,-32766,
        -32766,-32766,   56,  554,-32766,-32766,-32766,-32766,  106,  513,
        -32766,-32766,-32766,  368,-32766,  351,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,  920,-32766,-32766,-32766,-32766,  927,   22,
        -32766,-32766,  231,  952,-32766,  954,  953,-32766,  396,   53,
          397,  352,  273,  338,  813,-32766,  942,-32766,-32766,-32766,
           41,  107,  108,  109,  110,  111,  112,  113,  114,  115,
          116,  117,  118,  827,  229,-32766,  680,-32766,  357,  125,
          596,  885,  942,  554,  128,-32766,-32766,-32766,  522,  595,
        -32766,-32766,-32766,  703,-32766,  122,-32766,  330,-32766,  754,
          756,-32766,  384,  262,  272,-32766,-32766,-32766,  265,-32766,
        -32766,-32766,  716,  564,-32766,  554,  196,-32766,  396,-32766,
          200,  813,-32766,-32766,-32766,-32766,-32766,  886,-32766,  330,
        -32766,  883,  120,-32766,  480,  262,  257,-32766,-32766,-32766,
          884,  221,-32766,-32766,  716,  622,-32766,-32766,-32766,-32766,
          396,  129,  337,  813,  128,-32766,-32766,-32766,  337,  679,
          708,  698,  201,  377,  378,  444,  360,   28,  127,  377,
          378, -356,  580,  624,  382,  383,-32766,  621,  580,  624,
          382,  383,  554,  365,  486,  195,-32766,-32766,-32766,-32766,
        -32766,-32766,  873,-32766,  873,-32766,  119,-32766,  194,  133,
        -32766,  714,  218,  471,-32766,-32766,-32766,  620,-32766,-32766,
        -32766,  528,  347,-32766,  554,  525,-32766,  396,-32766,  535,
          813,-32766,-32766,-32766,-32766,-32766, -116,-32766,  539,-32766,
          134,  291,-32766,  495,  496,  617,-32766,-32766,-32766,  547,
          232,-32766,-32766,  677,  678,-32766,  561,  530,-32766,  396,
          702,  544,  813,  132,-32766,-32766,-32766,-32767,-32767,-32767,
        -32767,   98,   99,  100,  101,  102,  724,  725,  726,  723,
          722,  721,  713,  549,  526,-32766,  545,  608,  538,  238,
          106,  554,   49,  500,   55,-32766,-32766,-32766,-32766,-32766,
        -32766,   50,-32766,   51,-32766,  813,-32766,   58,   52,-32766,
          237,  270,  830,-32766,-32766,-32766,  521,-32766,-32766,-32766,
          554,  510,-32766,  554,  310,-32766,  396,-32766,  710,  571,
        -32766,-32766,-32766,-32766,-32766,  947,-32766,  813,-32766,  435,
          346,-32766,  348,  569,  555,-32766,-32766,-32766,  417,  418,
        -32766,-32766,  422,  434,-32766,  271,  421,-32766,  396,  512,
        -32766,  505,  497,-32766,-32766,-32766,  554,  103,  104,  105,
        -32766,  238, -165,-32766,-32766,-32766,  942,-32766,  349,-32766,
          813,-32766,  437,  106,-32766,  464,  489,  345,-32766,-32766,
        -32766,  236,-32766,-32766,-32766,-32766,-32766,-32766,  554, -162,
        -32766,  396,-32766,  217,  476,-32766,-32766,-32766,-32766,-32766,
          491,-32766,  813,-32766,  367,  255,-32766,  263,  626,  625,
        -32766,-32766,-32766,  699,  260,-32766,-32766,  261,  266,-32766,
          706, -356,-32766,  396, -357,-32766,  543,  816,-32766,-32766,
        -32766,  554,  253,  384,  123,-32766,  329,  199,-32766,-32766,
        -32766,   42,-32766, -288,-32766,  951,-32766,    0,  427,-32766,
          872,    0, -296,-32766,-32766,-32766, -297,-32766,-32766,-32766,
          588,-32766,-32766,  554,  518,-32766,  396,-32766,  305,  292,
        -32766,-32766,-32766,-32766,-32766,  259,-32766,  247,-32766,  619,
          347,-32766,  239,  811,  707,-32766,-32766,-32766,  709,  636,
        -32766,-32766,  638,  640,-32766,  583,  647,-32766,  396,  646,
        -32766,  655,  600,  590,-32766,-32766,  554,  585,  607,  594,
        -32766,  532,  531,-32766,-32766,-32766,   45,-32766,   44,-32766,
          606,-32766,  593,  591,-32766,  589,  565,  597,-32766,-32766,
        -32766,  599,-32766,-32766,-32766,  592,-32766,-32766,  554,  524,
        -32766,  396,-32766,  529,  534,-32766,-32766,-32766,-32766,-32766,
          536,-32766,  541,-32766,   81,  126,-32766,  197,  198,  548,
        -32766,-32766,-32766,  520,  546,-32766,-32766,  542,   33,-32766,
          915,  925,-32766,  396,  691,  645,  337,  191,-32766,-32766,
        -32766,  852,  854,  337,  326,  861,  862,  377,  378,-32766,
          281,  917,  905,  863,  377,  378,  580,  624,  382,  383,
          919,  337,  921,  560,  624,  382,  383,  948,  337,  326,
        -32766,-32766,  377,  378,  364,  281,-32766,-32766,-32766,  377,
          378,  580,  624,  382,  383,  264,  644,  950,  560,  624,
          382,  383,  563,  793,-32766,   34,-32766,-32766,-32766,-32766,
          328,  461,  324,  867,  868,  869,  870,  864,  865,  316,
          264,  792,   43,  268,  242,  871,  866,  562,  337,  326,
          241,   48,-32766,  337,-32766,  281,-32766,  240,   30,  377,
          378,  226,  225,  219,  377,  378,  337,  192,  560,  624,
          382,  383,  337,  580,  624,  382,  383,  377,  378,   80,
           79,  498,  465,  377,  378,  337,  580,  624,  382,  383,
          264, -117,  580,  624,  382,  383,  377,  378,  879,  899,
          681,  820,  581,  817,    0,  580,  624,  382,  383,  517,
          490,  456,  366,  361,  311,  533,  337,  554,  473,  920,
          337,  611,  293,  880,   25,   24,   23,  377,  378, -116,
          946,  377,  378,  337,  815,  851,  580,  624,  382,  383,
          580,  624,  382,  383,  377,  378,  916,  900,  511,  904,
            0,  918,  837,  580,  624,  382,  383,  836,  824,  337,
          822,  823,  821,    0,    0,  814,    0,    0,    0,  613,
          377,  378,    0,    0,    0,-32766,-32766,-32766,    0,  580,
          624,  382,  383,    0,  397,    0,    0,  338,    0,    0,
            0,    0,  342,-32766,  265,-32766,-32766,-32766
    );

    protected static $yycheck = array(
            2,    3,    4,    5,    6,    8,    9,   10,   27,   11,
           12,    8,    9,   10,   73,   75,    8,    9,   10,   73,
           63,  127,  128,   26,   63,   28,   29,   30,   31,   32,
           33,   34,   35,   36,   26,    0,   28,   29,   30,   31,
           32,   43,   44,  149,   43,   44,   45,   49,   75,   51,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
          119,   63,   64,   65,   66,   67,    7,    7,   99,   71,
           72,   73,    7,   75,  105,   77,   27,   79,   80,   81,
           82,  124,   84,  114,   86,    7,   88,  146,   89,   91,
          150,   63,  146,   95,   96,   97,   98,   98,  100,  101,
            7,    7,  104,  146,    7,  107,  108,  146,  109,  110,
          137,  138,    7,  115,  116,  117,  147,  118,  119,  120,
          121,    7,   12,    8,  126,  127,  145,  129,  130,  131,
          132,  133,  134,  135,    8,    9,   10,    7,  140,  141,
          142,  143,   32,  145,  146,    7,  148,   75,  150,  151,
            7,  153,   26,   73,   28,   29,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,  147,   50,   67,   32,    8,
            9,   10,   63,   73,    8,    9,   10,   77,   62,   73,
           80,   81,   82,    7,   84,  146,   86,   26,   88,   28,
           29,   91,   26,   75,   28,   95,   96,   97,  149,  149,
          100,  101,   32,   73,  104,   75,   76,  107,  108,   63,
          140,    7,  150,  143,   12,  115,   78,    8,    9,   10,
           13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
           23,   24,   25,  149,   32,   26,  149,   67,   73,    7,
          145,   73,   78,   73,  144,  145,  146,   77,   73,  145,
           80,   81,   82,  147,   84,  146,   86,   99,   88,   52,
           53,   91,  126,  105,   63,   95,   96,   97,  150,   67,
          100,  101,  114,  145,  104,   73,   13,  107,  108,   77,
           13,   12,   80,   81,   82,  115,   84,  119,   86,   99,
           88,  153,  146,   91,   78,  105,   78,   95,   96,   97,
          136,   32,  100,  101,  114,  147,  104,    8,    9,  107,
          108,  146,   98,   12,  144,  145,  146,  115,   98,  149,
          145,  145,   13,  109,  110,  124,   68,   69,   27,  109,
          110,  124,  118,  119,  120,  121,   67,  147,  118,  119,
          120,  121,   73,   68,   69,   13,   77,  145,  146,   80,
           81,   82,  136,   84,  136,   86,   13,   88,   13,  146,
           91,  147,  125,  150,   95,   96,   97,  147,   67,  100,
          101,   27,  143,  104,   73,  146,  107,  108,   77,   27,
           12,   80,   81,   82,  115,   84,  149,   86,   27,   88,
           93,   94,   91,  102,  103,   32,   95,   96,   97,   27,
           32,  100,  101,  127,  128,  104,  145,  146,  107,  108,
          145,  146,   12,   27,  145,  146,  115,   37,   38,   39,
           40,   41,   42,   43,   44,   45,  108,  109,  110,  111,
          112,  113,  145,  146,   27,   67,   27,   27,   27,   50,
           62,   73,   63,   70,   63,   77,  145,  146,   80,   81,
           82,   63,   84,   63,   86,   12,   88,   63,   63,   91,
           64,   78,   75,   95,   96,   97,   73,   67,  100,  101,
           73,   73,  104,   73,   74,  107,  108,   77,   73,   73,
           80,   81,   82,  115,   84,   73,   86,   12,   88,   73,
           73,   91,   73,   73,   73,   95,   96,   97,   73,   73,
          100,  101,   73,   73,  104,   78,   75,  107,  108,   75,
           67,   75,   75,  145,  146,  115,   73,   46,   47,   48,
           77,   50,   75,   80,   81,   82,   78,   84,   82,   86,
           12,   88,   90,   62,   91,   90,   92,   98,   95,   96,
           97,   90,   67,  100,  101,  145,  146,  104,   73,   90,
          107,  108,   77,   90,   92,   80,   81,   82,  115,   84,
          105,   86,   12,   88,   98,  124,   91,  106,  119,  119,
           95,   96,   97,  145,  122,  100,  101,  123,  122,  104,
          145,  124,  107,  108,  124,   67,  146,  149,  145,  146,
          115,   73,  124,  126,  125,   77,  143,  125,   80,   81,
           82,  125,   84,  139,   86,  147,   88,   -1,  143,   91,
          136,   -1,  139,   95,   96,   97,  139,   67,  100,  101,
          145,  146,  104,   73,  139,  107,  108,   77,  139,  139,
           80,   81,   82,  115,   84,  139,   86,  139,   88,  144,
          143,   91,  148,  151,  145,   95,   96,   97,  145,  145,
          100,  101,  145,  145,  104,  145,  145,  107,  108,  145,
           67,  145,  145,  145,  146,  115,   73,  145,  145,  145,
           77,  145,  145,   80,   81,   82,  145,   84,  145,   86,
          145,   88,  145,  145,   91,  145,  145,  145,   95,   96,
           97,  145,   67,  100,  101,  145,  146,  104,   73,  146,
          107,  108,   77,  146,  146,   80,   81,   82,  115,   84,
          146,   86,  146,   88,  146,  146,   91,   43,   44,  146,
           95,   96,   97,   85,  146,  100,  101,  146,  148,  104,
          147,  147,  107,  108,  147,  147,   98,   63,  145,  146,
          115,  147,  149,   98,   99,   71,   72,  109,  110,   75,
          105,  147,  147,   79,  109,  110,  118,  119,  120,  121,
          147,   98,  147,  118,  119,  120,  121,  147,   98,   99,
          145,  146,  109,  110,  147,  105,    8,    9,   10,  109,
          110,  118,  119,  120,  121,  140,  147,  147,  118,  119,
          120,  121,  147,  149,   26,  148,   28,   29,   30,   31,
          148,  127,  148,  129,  130,  131,  132,  133,  134,  135,
          140,  149,  148,  148,  148,  141,  142,  147,   98,   99,
          148,  148,  148,   98,  150,  105,  148,  148,  148,  109,
          110,  148,  148,  148,  109,  110,   98,  148,  118,  119,
          120,  121,   98,  118,  119,  120,  121,  109,  110,  148,
          148,  152,  149,  109,  110,   98,  118,  119,  120,  121,
          140,  149,  118,  119,  120,  121,  109,  110,  149,  152,
          149,  149,  147,  149,   -1,  118,  119,  120,  121,  149,
          149,  149,  149,  149,  149,  147,   98,   73,   83,   75,
           98,  147,  149,  152,  149,  149,  149,  109,  110,  149,
          152,  109,  110,   98,  147,  152,  118,  119,  120,  121,
          118,  119,  120,  121,  109,  110,  152,  152,   87,  152,
           -1,  152,  108,  118,  119,  120,  121,  152,  152,   98,
          152,  152,  152,   -1,   -1,  147,   -1,   -1,   -1,  147,
          109,  110,   -1,   -1,   -1,    8,    9,   10,   -1,  118,
          119,  120,  121,   -1,  140,   -1,   -1,  143,   -1,   -1,
           -1,   -1,  148,   26,  150,   28,   29,   30
    );

    protected static $yybase = array(
            0,  655,  680,  730,  735,  748,  815,   -1,  841,  230,
          798,  802,  767,  648,  754,  224,  673,  673,  673,  673,
          673,  354,  362,  371,  382,  371,  417,   -2,   -2,   -2,
          180,  110,  212,  212,  603,  212,  485,  528,  560,  410,
          311,  279,  378,  453,  453,  453,  453,  635,  635,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
          453,  453,  453,  453,  453,  -19,  556,  479,  486,  550,
          548,  547,  545,  448,  473,  654,  630,  625,  396,  623,
          615,  614,  604,  597,  637,  594,  709,  593,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  115,
          309,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,  219,  219,  176,
          171,  684,  684,  684,  684,  684,  684,  684,  684,  684,
          684,  684,  947,  778,    8,   -3,   -3,   -3,   -3,  217,
          390,  390,  390,  390,  -31,  168,  200,  146,  146,  477,
          477,  406,  579,    1,    1,  824,  824,  824,  824,  824,
          824,  824,  824,  824,  824,  457,  403,  688,  688, -106,
         -106, -106, -106,  286,  228,  174,  148,  -59,  481,  481,
          481,  116,  393,  -54,  -54,  -54,  437,  484,  458,  175,
           80,   80,   80,   80,  239,  578,   80,   80,   80,  -39,
          -27,  -27,  140,  223,  472,  649,  454,  598,  275,  487,
          -43,  463,  463,  -60,  449,  268,  285,  301,  474,   49,
          -60,  -19,  178,  297,  119,  399,  552,  426,  551,  138,
          114,  105,  211,  271,  156,   72,   60,  713,  672,   59,
           28,  470,  399,  399,  399,   97,  226,  156,  247,  438,
          186,   94,  445,  185,  373,  657,  436,  690,  440,  407,
          436,  447,  373,  683,  683,  683,  683,  373,  407,  690,
          690,  373,  406,  690,  143,  373,  462,  407,  466,  683,
          537,  536,  436,  441,  464,  690,  690,  690,  440,  373,
          683,  465,  505,  130,  690,  683,  465,  373,  447,   35,
          420,  389,  674,  712,  662,  435,  563,  460,  459,  694,
          693,  711,  439,  427,  695,  590,  475,  534,  429,  353,
          398,  400,  405,  508,  391,  478,  449,  507,  388,  388,
          388,  467,  506,  467,  388,  388,  388,  388,  388,  388,
          388,  388,  790,  499,  483,  451,  456,  533,  355,  475,
          452,  342,  567,  475,  734,  745,  502,  431,  504,  742,
          467,  789,  543,  242,  273,  689,  455,  430,  467,  682,
          467,  568,  467,  732,  422,  468,  475,  388,  731,  788,
          786,  785,  779,  777,  775,  774,  404,  763,  532,  744,
           65,  699,  474,  500,  416,  527,   78,  758,  467,  467,
          574,  578,  467,  526,  541,  757,  524,  741,  482,  751,
          484,  743,  467,  476,  727,   78,  421,  383,  722,  521,
          576,  664,  591,  446,  729,  675,  450,  277,  650,  419,
          520,  756,  755,  760,  518,  319,  588,  408,  397,  444,
          676,  517,  740,  469,  495,  471,  461,  583,  415,  753,
          514,  513,  509,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,    0,    0,    0,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
          126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
          126,  824,  824,  824,  824,  824,  824,  824,  824,  824,
          824,  824,  126,  126,  126,  126,  126,  126,  126,    0,
          481,  481,  481,  481,  328,  328,  328,  824,  824,  824,
          824,  824,  824,  481,  481,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  328,  328,  824,  824,   80,
           80,   80,   80,   80,  -27,  -27,  -27,   72,    0,    0,
            0,   80,  -27,  128,  128,  128,  -27,  -27,  -27,   72,
            0,    0,    0,    0,  407,  128,    0,    0,    0,  690,
            0,    0,    0,  128,  307,  307,  307,  307,   78,  156,
            0,  407,  407,    0,  441,    0,    0,    0,  690,    0,
            0,    0,    0,    0,    0,  388,  242,  504,  214,    0,
            0,    0,    0,    0,    0,    0,    0,   93,   93,    0,
            0,  404,  388,  388,  388,    0,    0,    0,    0,  214,
            0,    0,   78
    );

    protected static $yydefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  109,  101,  115,  100,
          111,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  383,  383,32767,  340,32767,32767,32767,32767,
        32767,32767,32767,  183,  183,  183,32767,32767,32767,  372,
          372,  372,  372,  372,  372,  372,  372,  372,  372,32767,
        32767,32767,32767,32767,  263,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  268,  388,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  244,  245,
          247,  248,  182,  373,  134,  269,  387,  181,  136,  210,
          212,  262,  211,  187,  192,  193,  194,  195,  196,  197,
          198,  199,  200,  201,  202,  203,  186,  241,  240,  208,
          209,  337,  337,  340,32767,32767,32767,32767,32767,32767,
        32767,32767,  213,  215,  214,  231,  232,  229,  230,  185,
          233,  234,  235,  236,  167,  167,  167,32767,32767,  382,
          382,32767,32767,  222,  223,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  168,32767,  298,  298,  125,
          125,  125,  125,  125,32767,32767,32767,32767,  217,  218,
          216,32767,  306,32767,32767,32767,32767,32767,  308,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  345,
          307,32767,32767,32767,32767,32767,32767,32767,32767,  358,
          294,32767,32767,32767,  287,  112,  114,   62,  324,32767,
        32767,32767,32767,32767,  363,  227,32767,32767,32767,32767,
        32767,32767,  395,32767,  358,32767,32767,32767,32767,32767,
        32767,  239,  219,  220,  221,32767,32767,  362,  356,32767,
        32767,32767,32767,32767,   66,  303,32767,  309,32767,32767,
        32767,32767,   66,32767,32767,32767,32767,   66,32767,  361,
          360,   66,32767,  288,  339,   66,   79,32767,   77,32767,
           98,   98,32767,32767,   81,  335,  351,32767,32767,   66,
        32767,  276,   68,  339,32767,32767,  276,   66,32767,32767,
            4,  313,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  289,32767,32767,32767,
          259,  260,  347,32767,  348,32767,  287,32767,  225,  226,
          228,  205,32767,  207,  249,  250,  251,  252,  253,  254,
          255,  257,32767,32767,  292,  295,32767,32767,32767,    6,
           18,  144,32767,  290,32767,  190,32767,32767,32767,32767,
          390,32767,32767,  184,32767,32767,   20,32767,  140,32767,
           64,32767,  380,32767,32767,  356,  291,  224,32767,32767,
        32767,32767,32767,32767,32767,32767,  357,32767,32767,32767,
          119,32767,  324,32767,32767,32767,   80,32767,  188,  135,
        32767,32767,  389,32767,32767,32767,32767,32767,  344,32767,
        32767,32767,   65,32767,32767,   82,32767,32767,  356,32767,
        32767,32767,32767,32767,32767,32767,32767,  179,32767,32767,
        32767,32767,32767,  356,32767,  123,32767,32767,32767,32767,
        32767,32767,32767,    4,32767,  161,32767,32767,32767,32767,
        32767,32767,32767,   26,   26,    3,   26,  106,   26,  147,
            3,   98,   98,   59,  147,   26,  147,   26,   26,   26,
           26,   26,   26,   26,  154,   26,   26,   26,   26,   26
    );

    protected static $yygoto = array(
          164,  164,  138,  138,  143,  138,  139,  140,  141,  146,
          148,  173,  166,  162,  162,  162,  162,  143,  143,  163,
          163,  163,  163,  163,  163,  163,  163,  163,  163,  158,
          159,  160,  161,  171,  137,  398,  399,  295,  400,  404,
          405,  406,  407,  408,  409,  410,  411,  741,  142,  144,
          145,  147,  169,  170,  172,  189,  190,  202,  203,  204,
          205,  206,  207,  208,  210,  211,  212,  213,  223,  224,
          248,  249,  250,  312,  313,  314,  447,  174,  175,  176,
          177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
          149,  150,  151,  165,  152,  167,  153,  187,  168,  154,
          155,  156,  188,  157,  135,  462,  462,  462,  462,  462,
          462,  462,  462,  462,  462,  462,  463,  463,  463,  463,
          463,  463,  463,  463,  463,  463,  463,  668,  668,  931,
          931,  343,  343,  343,  343,  343,  343,  602,  425,  343,
          343,  343,  343,  343,  343,  343,  343,  343,  343,  683,
          275,  838,  838,  676,  676,  676,  676,  676,  559,  559,
          559,  443,  414,  414,  935,  514,  574,  695,  643,  877,
          878,  893,  730,  674,  633,  633,  633,  633,  474,  501,
          628,  634,  509,  402,  402,  402,  402,  402,  402,  941,
          941,  402,  402,  402,  402,  402,  402,  402,  402,  402,
          402,  944,  941,  413,  413,    5,  296,   16,    1,    6,
          558,  558,  558,    2,  944,  944,    7,  494,   17,   18,
            8,   19,    9,   10,   11,  303,   20,   12,   13,   14,
           15,  318,  503,  442,  442,  468,  438,  903,  891,  440,
          440,  401,  403,  430,  445,  469,  472,  482,  488,  557,
          557,  557,  875,  875,  875,  875,  875,  875,  875,  875,
          875,  875,  875,  477,  481,  519,  485,  278,  322,  654,
          639,  637,  635,  637,  527,  416,  663,  658,  449,  450,
          451,  452,  453,  454,  455,  457,  484,  258,  502,  297,
          436,  246,  419,  428,  855,  860,  215,  439,  216,  910,
          910,  928,  796,   26,   21,  289,  308,  834,  835,  419,
          419,  362,  739,  720,  323,  926,  926,  926,  458,  507,
          415,  415,  448,  832,  902,  832,  424,  909,  787,   29,
          276,  277,  833,  566,  499,  304,  304,  304,  672,  424,
          424,  911,  911,  850,  849,  687,  876,  304,  537,  319,
          829,  572,  642,  888,  692,  317,  728,  419,  506,    0,
            0,    0,    0,    0,    0,    0,  423,    0,    0,    0,
            0,    0,    0,    0,    0,  446,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  429
    );

    protected static $yygcheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   94,   94,   94,   94,
           94,   94,   94,   94,   94,   94,   94,   55,   55,   55,
           55,   39,   39,   39,   39,   39,   39,   32,   77,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   61,
           50,   39,   39,   39,   39,   39,   39,   39,    8,    8,
            8,   85,   94,   94,  114,   39,   13,   13,   13,   13,
           13,   13,   13,   13,   39,   39,   39,   39,   22,   22,
           39,   39,   39,   91,   91,   91,   91,   91,   91,  115,
          115,   91,   91,   91,   91,   91,   91,   91,   91,   91,
           91,  115,  115,   91,   91,   14,   29,   14,    2,   14,
            7,    7,    7,    2,  115,  115,   14,  103,   14,   14,
           14,   14,   14,   14,   14,    5,   14,   14,   14,   14,
           14,   33,   33,   33,   33,   33,   33,   59,  106,   33,
           33,   33,   33,   33,   33,   33,   33,   33,   33,    6,
            6,    6,  101,  101,  101,  101,  101,  101,  101,  101,
          101,  101,  101,   42,   42,   42,   48,   48,   48,    6,
            6,    6,    6,    6,    6,    6,    6,    6,   86,   86,
           86,   86,   86,   86,   86,   86,   86,  100,   31,   40,
            5,  100,    4,   40,   16,   59,   46,   40,   46,   93,
           93,  112,   16,   16,   16,   16,   30,   59,   59,    4,
            4,   40,   77,   74,   74,   93,   93,   93,   16,   40,
           97,   97,   26,   59,   59,   59,   26,   93,   78,   16,
           50,   50,   59,   11,   16,   98,   98,   98,   57,   26,
           26,   92,   92,   99,   99,   62,  102,   98,   52,   10,
           89,   12,   49,  105,   63,   98,   76,    4,   84,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   77
    );

    protected static $yygbase = array(
            0,    0, -317,    0,   28,  -39,  248,  209,  157,    0,
           19,   51,   -1,  -28, -319,    0,  -31,    0,    0,    0,
            0,    0,  134,    0,    0,  -30,  292,    0,    0,  160,
           80,   70,  112,   14,    0,    0,    0,    0,    0,  -86,
          -48,    0,   23,    0,    0,    0, -238,    0,    5,   -6,
         -201,    0,   57,    0,    0,  -90,    0,   95,    0,  -32,
            0,  118,   55,    1,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   78,    0,  -12,   91,   90,    0,
            0,    0,    0,    0,   -8,  128,  228,    0,    0,   18,
            0,  -34,  104,   62,  -75,    0,    0,   83,   82,   89,
           35,   61,   54,   25,    0,  -10,   45,    0,    0,    0,
            0,    0,   81,    0,  129,  -56,    0
    );

    protected static $yygdefault = array(
        -32768,  369,    3,  552,  386,  420,  577,  578,  579,  299,
          298,  567,  573,  478,    4,  575,  788,  285,  582,  286,
          487,  584,  432,  586,  587,  136,  387,  300,  301,  433,
          307,  475,  601,  209,  306,  603,  287,  605,  610,  288,
          508,  493,  459,  388,  354,  470,  214,  441,  466,  641,
          274,  649,  540,  657,  660,  389,  460,  671,  359,  831,
          315,  682,  688,  693,  696,  331,  320,  483,  700,  701,
          251,  705,  515,  516,  719,  235,  727,  740,  327,  806,
          808,  390,  391,  426,  492,  412,  431,  825,  321,  828,
          392,  393,  339,  340,  846,  843,  280,  896,  279,  356,
          245,  881,  882,  479,  363,  934,  892,  269,  394,  395,
          294,  309,  929,  344,  936,  943,  467
    );

    protected static $yylhs = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    9,    9,   11,   11,
           11,   11,   10,   10,   12,   14,   14,   15,   15,   15,
           15,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,   36,
           36,   38,   37,   37,   30,   30,   40,   40,   41,   41,
            7,    8,    8,    8,   43,   43,   43,   44,   44,   47,
           47,   45,   45,   48,   48,   23,   23,   32,   32,   35,
           35,   34,   34,   49,   24,   24,   24,   24,   50,   50,
           51,   51,   52,   52,   21,   21,   17,   17,   53,   19,
           19,   54,   18,   18,   20,   20,   31,   31,   31,   42,
           42,   56,   56,   57,   57,   58,   58,   58,   58,   59,
           59,   59,   60,   60,   61,   61,   61,   27,   27,   62,
           62,   62,   28,   28,   63,   63,   46,   46,   64,   64,
           64,   64,   69,   69,   70,   70,   71,   71,   71,   71,
           72,   73,   73,   68,   68,   65,   65,   67,   67,   75,
           75,   74,   74,   74,   74,   74,   74,   66,   66,   76,
           76,   29,   29,   22,   22,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   16,   16,   26,   26,
           81,   81,   82,   82,   82,   77,   84,   84,   88,   88,
           89,   90,   90,   90,   90,   90,   90,   94,   94,   39,
           39,   39,   78,   78,   95,   95,   91,   91,   96,   96,
           96,   96,   96,   79,   79,   79,   83,   83,   83,   87,
           87,  101,  101,  101,  101,  101,  101,  101,  101,  101,
          101,  101,  101,  101,  101,   13,   13,   13,   13,   13,
           13,   80,   80,   80,   80,  102,  102,  103,  103,  105,
          105,  104,  104,  106,  106,   33,   33,   33,   33,  108,
          108,  107,  107,  107,  107,  107,  109,  109,   93,   93,
           97,   97,   92,   92,  110,  110,  110,  110,   98,   98,
           98,   98,   86,   86,   99,   99,   99,   55,  111,  111,
          112,  112,  112,   85,   85,  113,  113,  114,  114,  114,
          114,  100,  100,  100,  100,  115,  115,  115,  115,  115,
          115,  115,  116,  116,  116
    );

    protected static $yylen = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    3,    3,    1,    1,    3,
            2,    4,    3,    1,    3,    2,    0,    1,    1,    1,
            1,    3,    5,    8,    3,    5,    9,    3,    2,    3,
            2,    3,    2,    3,    2,    3,    3,    3,    1,    2,
            5,    7,    9,    5,    1,    6,    3,    3,    2,    0,
            2,    8,    0,    4,    1,    3,    0,    1,    0,    1,
            9,    7,    6,    5,    1,    2,    2,    0,    2,    0,
            2,    0,    2,    1,    3,    1,    4,    1,    4,    1,
            4,    1,    3,    3,    3,    4,    4,    5,    0,    2,
            4,    3,    1,    1,    1,    4,    0,    2,    3,    0,
            2,    4,    0,    2,    0,    3,    1,    2,    1,    1,
            0,    1,    3,    4,    6,    0,    1,    1,    1,    2,
            3,    3,    1,    3,    1,    2,    2,    3,    1,    1,
            2,    4,    3,    1,    1,    3,    2,    0,    3,    3,
            8,    3,    1,    3,    0,    2,    4,    5,    4,    4,
            3,    1,    1,    1,    3,    1,    1,    0,    1,    1,
            2,    1,    1,    1,    1,    1,    1,    1,    3,    1,
            3,    3,    1,    0,    1,    1,    3,    3,    4,    4,
            1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
            5,    4,    4,    4,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
            1,    3,    2,    1,    9,   10,    3,    3,    2,    4,
            4,    3,    4,    4,    4,    3,    0,    4,    1,    3,
            2,    2,    4,    6,    2,    2,    4,    1,    1,    1,
            2,    3,    1,    1,    1,    1,    1,    1,    0,    3,
            3,    4,    4,    0,    2,    1,    0,    1,    1,    0,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    3,    2,    1,    1,    3,    2,    2,    4,
            3,    1,    3,    3,    3,    1,    1,    0,    2,    0,
            1,    3,    1,    3,    1,    1,    1,    1,    1,    6,
            4,    3,    4,    2,    4,    4,    1,    3,    1,    2,
            1,    1,    4,    1,    3,    6,    4,    4,    4,    4,
            1,    4,    0,    1,    1,    3,    1,    4,    3,    1,
            1,    1,    0,    0,    2,    3,    1,    3,    1,    4,
            2,    2,    2,    1,    2,    1,    4,    3,    3,    3,
            6,    3,    1,    1,    1
    );

    protected $yyval;
    protected $yyastk;
    protected $stackPos;
    protected $lexer;

    /**
     * Creates a parser instance.
     *
     * @param Lexer $lexer A lexer
     */
    public function __construct(Lexer $lexer) {
        $this->lexer = $lexer;
    }

    /**
     * Parses PHP code into a node tree.
     *
     * @param string $code The source code to parse
     *
     * @return Node[] Array of statements
     */
    public function parse($code) {
        $this->lexer->startLexing($code);

        // We start off with no lookahead-token
        $tokenId = self::TOKEN_NONE;

        // The attributes for a node are taken from the first and last token of the node.
        // From the first token only the startAttributes are taken and from the last only
        // the endAttributes. Both are merged using the array union operator (+).
        $startAttributes = array('startLine' => 1);
        $endAttributes   = array();

        // In order to figure out the attributes for the starting token, we have to keep
        // them in a stack
        $attributeStack = array($startAttributes);

        // Start off in the initial state and keep a stack of previous states
        $state = 0;
        $stateStack = array($state);

        // AST stack (?)
        $this->yyastk = array();

        // Current position in the stack(s)
        $this->stackPos = 0;

        for (;;) {
            if (self::$yybase[$state] == 0) {
                $yyn = self::$yydefault[$state];
            } else {
                if ($tokenId === self::TOKEN_NONE) {
                    // Fetch the next token id from the lexer and fetch additional info by-ref.
                    // The end attributes are fetched into a temporary variable and only set once the token is really
                    // shifted (not during read). Otherwise you would sometimes get off-by-one errors, when a rule is
                    // reduced after a token was read but not yet shifted.
                    $origTokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $nextEndAttributes);

                    // map the lexer token id to the internally used token id's
                    $tokenId = $origTokenId >= 0 && $origTokenId < self::TOKEN_MAP_SIZE
                        ? self::$translate[$origTokenId]
                        : self::TOKEN_INVALID;

                    if ($tokenId === self::TOKEN_INVALID) {
                        throw new \RangeException(sprintf(
                            'The lexer returned an invalid token (id=%d, value=%s)',
                            $origTokenId, $tokenValue
                        ));
                    }

                    $attributeStack[$this->stackPos] = $startAttributes;
                }

                if ((($yyn = self::$yybase[$state] + $tokenId) >= 0
                     && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokenId
                     || ($state < self::YY2TBLSTATE
                        && ($yyn = self::$yybase[$state + self::YYNLSTATES] + $tokenId) >= 0
                        && $yyn < self::YYLAST
                        && self::$yycheck[$yyn] == $tokenId))
                    && ($yyn = self::$yyaction[$yyn]) != self::YYDEFAULT) {
                    /*
                     * >= YYNLSTATE: shift and reduce
                     * > 0: shift
                     * = 0: accept
                     * < 0: reduce
                     * = -YYUNEXPECTED: error
                     */
                    if ($yyn > 0) {
                        /* shift */
                        ++$this->stackPos;

                        $stateStack[$this->stackPos]     = $state = $yyn;
                        $this->yyastk[$this->stackPos]   = $tokenValue;
                        $attributeStack[$this->stackPos] = $startAttributes;
                        $endAttributes = $nextEndAttributes;
                        $tokenId = self::TOKEN_NONE;

                        if ($yyn < self::YYNLSTATES)
                            continue;

                        /* $yyn >= YYNLSTATES means shift-and-reduce */
                        $yyn -= self::YYNLSTATES;
                    } else {
                        $yyn = -$yyn;
                    }
                } else {
                    $yyn = self::$yydefault[$state];
                }
            }

            for (;;) {
                /* reduce/error */
                if ($yyn == 0) {
                    /* accept */
                    return $this->yyval;
                } elseif ($yyn != self::YYUNEXPECTED) {
                    /* reduce */
                    try {
                        $this->{'yyn' . $yyn}(
                            $attributeStack[$this->stackPos - self::$yylen[$yyn]]
                            + $endAttributes
                        );
                    } catch (Error $e) {
                        if (-1 === $e->getRawLine()) {
                            $e->setRawLine($startAttributes['startLine']);
                        }

                        throw $e;
                    }

                    /* Goto - shift nonterminal */
                    $this->stackPos -= self::$yylen[$yyn];
                    $yyn = self::$yylhs[$yyn];
                    if (($yyp = self::$yygbase[$yyn] + $stateStack[$this->stackPos]) >= 0
                         && $yyp < self::YYGLAST
                         && self::$yygcheck[$yyp] == $yyn) {
                        $state = self::$yygoto[$yyp];
                    } else {
                        $state = self::$yygdefault[$yyn];
                    }

                    ++$this->stackPos;

                    $stateStack[$this->stackPos]     = $state;
                    $this->yyastk[$this->stackPos]   = $this->yyval;
                    $attributeStack[$this->stackPos] = $startAttributes;
                } else {
                    /* error */
                    $expected = array();

                    $base = self::$yybase[$state];
                    for ($i = 0; $i < self::TOKEN_MAP_SIZE; ++$i) {
                        $n = $base + $i;
                        if ($n >= 0 && $n < self::YYLAST && self::$yycheck[$n] == $i
                         || $state < self::YY2TBLSTATE
                            && ($n = self::$yybase[$state + self::YYNLSTATES] + $i) >= 0
                            && $n < self::YYLAST && self::$yycheck[$n] == $i
                        ) {
                            if (self::$yyaction[$n] != self::YYUNEXPECTED) {
                                if (count($expected) == 4) {
                                    /* Too many expected tokens */
                                    $expected = array();
                                    break;
                                }

                                $expected[] = self::$terminals[$i];
                            }
                        }
                    }

                    $expectedString = '';
                    if ($expected) {
                        $expectedString = ', expecting ' . implode(' or ', $expected);
                    }

                    throw new Error(
                        'Syntax error, unexpected ' . self::$terminals[$tokenId] . $expectedString,
                        $startAttributes['startLine']
                    );
                }

                if ($state < self::YYNLSTATES)
                    break;
                /* >= YYNLSTATES means shift-and-reduce */
                $yyn = $state - self::YYNLSTATES;
            }
        }
    }

    protected function yyn0() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn1($attributes) {
         $this->yyval = Node\Stmt\Namespace_::postprocess($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn2($attributes) {
         if (is_array($this->yyastk[$this->stackPos-(2-2)])) { $this->yyval = array_merge($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); } else { $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; }; 
    }

    protected function yyn3($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn4($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn5($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn6($attributes) {
         $this->yyval = new Node\Name($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn7($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn8($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn9($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn10($attributes) {
         $this->yyval = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function yyn11($attributes) {
         $this->yyval = new Node\Stmt\Namespace_($this->yyastk[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function yyn12($attributes) {
         $this->yyval = new Node\Stmt\Namespace_($this->yyastk[$this->stackPos-(5-2)], $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn13($attributes) {
         $this->yyval = new Node\Stmt\Namespace_(null, $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn14($attributes) {
         $this->yyval = new Node\Stmt\Use_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn15($attributes) {
         $this->yyval = new Node\Stmt\Const_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn16($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn17($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn18($attributes) {
         $this->yyval = new Node\Stmt\UseUse($this->yyastk[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function yyn19($attributes) {
         $this->yyval = new Node\Stmt\UseUse($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn20($attributes) {
         $this->yyval = new Node\Stmt\UseUse($this->yyastk[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function yyn21($attributes) {
         $this->yyval = new Node\Stmt\UseUse($this->yyastk[$this->stackPos-(4-2)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn22($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn23($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn24($attributes) {
         $this->yyval = new Node\Const_($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn25($attributes) {
         if (is_array($this->yyastk[$this->stackPos-(2-2)])) { $this->yyval = array_merge($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); } else { $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; }; 
    }

    protected function yyn26($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn27($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn28($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn29($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn30($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function yyn31($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn32($attributes) {
         $this->yyval = new Node\Stmt\If_($this->yyastk[$this->stackPos-(5-2)], array('stmts' => is_array($this->yyastk[$this->stackPos-(5-3)]) ? $this->yyastk[$this->stackPos-(5-3)] : array($this->yyastk[$this->stackPos-(5-3)]), 'elseifs' => $this->yyastk[$this->stackPos-(5-4)], 'else' => $this->yyastk[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function yyn33($attributes) {
         $this->yyval = new Node\Stmt\If_($this->yyastk[$this->stackPos-(8-2)], array('stmts' => $this->yyastk[$this->stackPos-(8-4)], 'elseifs' => $this->yyastk[$this->stackPos-(8-5)], 'else' => $this->yyastk[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function yyn34($attributes) {
         $this->yyval = new Node\Stmt\While_($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn35($attributes) {
         $this->yyval = new Node\Stmt\Do_($this->yyastk[$this->stackPos-(5-4)], is_array($this->yyastk[$this->stackPos-(5-2)]) ? $this->yyastk[$this->stackPos-(5-2)] : array($this->yyastk[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function yyn36($attributes) {
         $this->yyval = new Node\Stmt\For_(array('init' => $this->yyastk[$this->stackPos-(9-3)], 'cond' => $this->yyastk[$this->stackPos-(9-5)], 'loop' => $this->yyastk[$this->stackPos-(9-7)], 'stmts' => $this->yyastk[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function yyn37($attributes) {
         $this->yyval = new Node\Stmt\Switch_($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn38($attributes) {
         $this->yyval = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function yyn39($attributes) {
         $this->yyval = new Node\Stmt\Break_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn40($attributes) {
         $this->yyval = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function yyn41($attributes) {
         $this->yyval = new Node\Stmt\Continue_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn42($attributes) {
         $this->yyval = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function yyn43($attributes) {
         $this->yyval = new Node\Stmt\Return_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn44($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn45($attributes) {
         $this->yyval = new Node\Stmt\Global_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn46($attributes) {
         $this->yyval = new Node\Stmt\Static_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn47($attributes) {
         $this->yyval = new Node\Stmt\Echo_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn48($attributes) {
         $this->yyval = new Node\Stmt\InlineHTML($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn49($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn50($attributes) {
         $this->yyval = new Node\Stmt\Unset_($this->yyastk[$this->stackPos-(5-3)], $attributes); 
    }

    protected function yyn51($attributes) {
         $this->yyval = new Node\Stmt\Foreach_($this->yyastk[$this->stackPos-(7-3)], $this->yyastk[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->yyastk[$this->stackPos-(7-5)][1], 'stmts' => $this->yyastk[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function yyn52($attributes) {
         $this->yyval = new Node\Stmt\Foreach_($this->yyastk[$this->stackPos-(9-3)], $this->yyastk[$this->stackPos-(9-7)][0], array('keyVar' => $this->yyastk[$this->stackPos-(9-5)], 'byRef' => $this->yyastk[$this->stackPos-(9-7)][1], 'stmts' => $this->yyastk[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function yyn53($attributes) {
         $this->yyval = new Node\Stmt\Declare_($this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn54($attributes) {
         $this->yyval = array(); /* means: no statement */ 
    }

    protected function yyn55($attributes) {
         $this->yyval = new Node\Stmt\TryCatch($this->yyastk[$this->stackPos-(6-3)], $this->yyastk[$this->stackPos-(6-5)], $this->yyastk[$this->stackPos-(6-6)], $attributes); 
    }

    protected function yyn56($attributes) {
         $this->yyval = new Node\Stmt\Throw_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn57($attributes) {
         $this->yyval = new Node\Stmt\Goto_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn58($attributes) {
         $this->yyval = new Node\Stmt\Label($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn59($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn60($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn61($attributes) {
         $this->yyval = new Node\Stmt\Catch_($this->yyastk[$this->stackPos-(8-3)], substr($this->yyastk[$this->stackPos-(8-4)], 1), $this->yyastk[$this->stackPos-(8-7)], $attributes); 
    }

    protected function yyn62($attributes) {
         $this->yyval = null; 
    }

    protected function yyn63($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn64($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn65($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn66($attributes) {
         $this->yyval = false; 
    }

    protected function yyn67($attributes) {
         $this->yyval = true; 
    }

    protected function yyn68($attributes) {
         $this->yyval = false; 
    }

    protected function yyn69($attributes) {
         $this->yyval = true; 
    }

    protected function yyn70($attributes) {
         $this->yyval = new Node\Stmt\Function_($this->yyastk[$this->stackPos-(9-3)], array('byRef' => $this->yyastk[$this->stackPos-(9-2)], 'params' => $this->yyastk[$this->stackPos-(9-5)], 'stmts' => $this->yyastk[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function yyn71($attributes) {
         $this->yyval = new Node\Stmt\Class_($this->yyastk[$this->stackPos-(7-2)], array('type' => $this->yyastk[$this->stackPos-(7-1)], 'extends' => $this->yyastk[$this->stackPos-(7-3)], 'implements' => $this->yyastk[$this->stackPos-(7-4)], 'stmts' => $this->yyastk[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function yyn72($attributes) {
         $this->yyval = new Node\Stmt\Interface_($this->yyastk[$this->stackPos-(6-2)], array('extends' => $this->yyastk[$this->stackPos-(6-3)], 'stmts' => $this->yyastk[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function yyn73($attributes) {
         $this->yyval = new Node\Stmt\Trait_($this->yyastk[$this->stackPos-(5-2)], $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn74($attributes) {
         $this->yyval = 0; 
    }

    protected function yyn75($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function yyn76($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function yyn77($attributes) {
         $this->yyval = null; 
    }

    protected function yyn78($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn79($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn80($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn81($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn82($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn83($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn84($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn85($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn86($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn87($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn88($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn89($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn90($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn91($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn92($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn93($attributes) {
         $this->yyval = new Node\Stmt\DeclareDeclare($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn94($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn95($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn96($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn97($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(5-3)]; 
    }

    protected function yyn98($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn99($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn100($attributes) {
         $this->yyval = new Node\Stmt\Case_($this->yyastk[$this->stackPos-(4-2)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn101($attributes) {
         $this->yyval = new Node\Stmt\Case_(null, $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn102() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn103() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn104($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn105($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn106($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn107($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn108($attributes) {
         $this->yyval = new Node\Stmt\ElseIf_($this->yyastk[$this->stackPos-(3-2)], is_array($this->yyastk[$this->stackPos-(3-3)]) ? $this->yyastk[$this->stackPos-(3-3)] : array($this->yyastk[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function yyn109($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn110($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn111($attributes) {
         $this->yyval = new Node\Stmt\ElseIf_($this->yyastk[$this->stackPos-(4-2)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn112($attributes) {
         $this->yyval = null; 
    }

    protected function yyn113($attributes) {
         $this->yyval = new Node\Stmt\Else_(is_array($this->yyastk[$this->stackPos-(2-2)]) ? $this->yyastk[$this->stackPos-(2-2)] : array($this->yyastk[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function yyn114($attributes) {
         $this->yyval = null; 
    }

    protected function yyn115($attributes) {
         $this->yyval = new Node\Stmt\Else_($this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn116($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)], false); 
    }

    protected function yyn117($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(2-2)], true); 
    }

    protected function yyn118($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)], false); 
    }

    protected function yyn119($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn120($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn121($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn122($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn123($attributes) {
         $this->yyval = new Node\Param(substr($this->yyastk[$this->stackPos-(4-4)], 1), null, $this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-2)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn124($attributes) {
         $this->yyval = new Node\Param(substr($this->yyastk[$this->stackPos-(6-4)], 1), $this->yyastk[$this->stackPos-(6-6)], $this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-2)], $this->yyastk[$this->stackPos-(6-3)], $attributes); 
    }

    protected function yyn125($attributes) {
         $this->yyval = null; 
    }

    protected function yyn126($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn127($attributes) {
         $this->yyval = 'array'; 
    }

    protected function yyn128($attributes) {
         $this->yyval = 'callable'; 
    }

    protected function yyn129($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn130($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn131($attributes) {
         $this->yyval = array(new Node\Arg($this->yyastk[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function yyn132($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn133($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn134($attributes) {
         $this->yyval = new Node\Arg($this->yyastk[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function yyn135($attributes) {
         $this->yyval = new Node\Arg($this->yyastk[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function yyn136($attributes) {
         $this->yyval = new Node\Arg($this->yyastk[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function yyn137($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn138($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn139($attributes) {
         $this->yyval = new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn140($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn141($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn142($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn143($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn144($attributes) {
         $this->yyval = new Node\Stmt\StaticVar(substr($this->yyastk[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function yyn145($attributes) {
         $this->yyval = new Node\Stmt\StaticVar(substr($this->yyastk[$this->stackPos-(3-1)], 1), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn146($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn147($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn148($attributes) {
         $this->yyval = new Node\Stmt\Property($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn149($attributes) {
         $this->yyval = new Node\Stmt\ClassConst($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn150($attributes) {
         $this->yyval = new Node\Stmt\ClassMethod($this->yyastk[$this->stackPos-(8-4)], array('type' => $this->yyastk[$this->stackPos-(8-1)], 'byRef' => $this->yyastk[$this->stackPos-(8-3)], 'params' => $this->yyastk[$this->stackPos-(8-6)], 'stmts' => $this->yyastk[$this->stackPos-(8-8)]), $attributes); 
    }

    protected function yyn151($attributes) {
         $this->yyval = new Node\Stmt\TraitUse($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn152($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn153($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn154($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn155($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn156($attributes) {
         $this->yyval = new Node\Stmt\TraitUseAdaptation\Precedence($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn157($attributes) {
         $this->yyval = new Node\Stmt\TraitUseAdaptation\Alias($this->yyastk[$this->stackPos-(5-1)][0], $this->yyastk[$this->stackPos-(5-1)][1], $this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn158($attributes) {
         $this->yyval = new Node\Stmt\TraitUseAdaptation\Alias($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], $this->yyastk[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function yyn159($attributes) {
         $this->yyval = new Node\Stmt\TraitUseAdaptation\Alias($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], null, $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn160($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)]); 
    }

    protected function yyn161($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn162($attributes) {
         $this->yyval = array(null, $this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn163($attributes) {
         $this->yyval = null; 
    }

    protected function yyn164($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn165($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn166($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function yyn167($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function yyn168($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn169($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn170($attributes) {
         Node\Stmt\Class_::verifyModifier($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); $this->yyval = $this->yyastk[$this->stackPos-(2-1)] | $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn171($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function yyn172($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function yyn173($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function yyn174($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function yyn175($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function yyn176($attributes) {
         $this->yyval = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function yyn177($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn178($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn179($attributes) {
         $this->yyval = new Node\Stmt\PropertyProperty(substr($this->yyastk[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function yyn180($attributes) {
         $this->yyval = new Node\Stmt\PropertyProperty(substr($this->yyastk[$this->stackPos-(3-1)], 1), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn181($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn182($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn183($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn184($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn185($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn186($attributes) {
         $this->yyval = new Node\Expr\Assign($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn187($attributes) {
         $this->yyval = new Node\Expr\Assign($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn188($attributes) {
         $this->yyval = new Node\Expr\AssignRef($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn189($attributes) {
         $this->yyval = new Node\Expr\AssignRef($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn190($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn191($attributes) {
         $this->yyval = new Node\Expr\Clone_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn192($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Plus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn193($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Minus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn194($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Mul($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn195($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Div($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn196($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Concat($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn197($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Mod($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn198($attributes) {
         $this->yyval = new Node\Expr\AssignOp\BitwiseAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn199($attributes) {
         $this->yyval = new Node\Expr\AssignOp\BitwiseOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn200($attributes) {
         $this->yyval = new Node\Expr\AssignOp\BitwiseXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn201($attributes) {
         $this->yyval = new Node\Expr\AssignOp\ShiftLeft($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn202($attributes) {
         $this->yyval = new Node\Expr\AssignOp\ShiftRight($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn203($attributes) {
         $this->yyval = new Node\Expr\AssignOp\Pow($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn204($attributes) {
         $this->yyval = new Node\Expr\PostInc($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn205($attributes) {
         $this->yyval = new Node\Expr\PreInc($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn206($attributes) {
         $this->yyval = new Node\Expr\PostDec($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn207($attributes) {
         $this->yyval = new Node\Expr\PreDec($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn208($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\BooleanOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn209($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\BooleanAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn210($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\LogicalOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn211($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\LogicalAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn212($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\LogicalXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn213($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\BitwiseOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn214($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\BitwiseAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn215($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\BitwiseXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn216($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Concat($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn217($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Plus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn218($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Minus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn219($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Mul($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn220($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Div($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn221($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Mod($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn222($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\ShiftLeft($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn223($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\ShiftRight($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn224($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Pow($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn225($attributes) {
         $this->yyval = new Node\Expr\UnaryPlus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn226($attributes) {
         $this->yyval = new Node\Expr\UnaryMinus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn227($attributes) {
         $this->yyval = new Node\Expr\BooleanNot($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn228($attributes) {
         $this->yyval = new Node\Expr\BitwiseNot($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn229($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Identical($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn230($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\NotIdentical($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn231($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Equal($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn232($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\NotEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn233($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Smaller($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn234($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\SmallerOrEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn235($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\Greater($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn236($attributes) {
         $this->yyval = new Node\Expr\BinaryOp\GreaterOrEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn237($attributes) {
         $this->yyval = new Node\Expr\Instanceof_($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn238($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn239($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn240($attributes) {
         $this->yyval = new Node\Expr\Ternary($this->yyastk[$this->stackPos-(5-1)], $this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn241($attributes) {
         $this->yyval = new Node\Expr\Ternary($this->yyastk[$this->stackPos-(4-1)], null, $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn242($attributes) {
         $this->yyval = new Node\Expr\Isset_($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn243($attributes) {
         $this->yyval = new Node\Expr\Empty_($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn244($attributes) {
         $this->yyval = new Node\Expr\Include_($this->yyastk[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function yyn245($attributes) {
         $this->yyval = new Node\Expr\Include_($this->yyastk[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function yyn246($attributes) {
         $this->yyval = new Node\Expr\Eval_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn247($attributes) {
         $this->yyval = new Node\Expr\Include_($this->yyastk[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function yyn248($attributes) {
         $this->yyval = new Node\Expr\Include_($this->yyastk[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function yyn249($attributes) {
         $this->yyval = new Node\Expr\Cast\Int($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn250($attributes) {
         $this->yyval = new Node\Expr\Cast\Double($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn251($attributes) {
         $this->yyval = new Node\Expr\Cast\String($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn252($attributes) {
         $this->yyval = new Node\Expr\Cast\Array_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn253($attributes) {
         $this->yyval = new Node\Expr\Cast\Object($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn254($attributes) {
         $this->yyval = new Node\Expr\Cast\Bool($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn255($attributes) {
         $this->yyval = new Node\Expr\Cast\Unset_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn256($attributes) {
         $this->yyval = new Node\Expr\Exit_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn257($attributes) {
         $this->yyval = new Node\Expr\ErrorSuppress($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn258($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn259($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn260($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn261($attributes) {
         $this->yyval = new Node\Expr\ShellExec($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn262($attributes) {
         $this->yyval = new Node\Expr\Print_($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn263($attributes) {
         $this->yyval = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function yyn264($attributes) {
         $this->yyval = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->yyastk[$this->stackPos-(9-2)], 'params' => $this->yyastk[$this->stackPos-(9-4)], 'uses' => $this->yyastk[$this->stackPos-(9-6)], 'stmts' => $this->yyastk[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function yyn265($attributes) {
         $this->yyval = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->yyastk[$this->stackPos-(10-3)], 'params' => $this->yyastk[$this->stackPos-(10-5)], 'uses' => $this->yyastk[$this->stackPos-(10-7)], 'stmts' => $this->yyastk[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function yyn266($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn267($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn268($attributes) {
         $this->yyval = new Node\Expr\Yield_($this->yyastk[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function yyn269($attributes) {
         $this->yyval = new Node\Expr\Yield_($this->yyastk[$this->stackPos-(4-4)], $this->yyastk[$this->stackPos-(4-2)], $attributes); 
    }

    protected function yyn270($attributes) {
         $this->yyval = new Node\Expr\Array_($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn271($attributes) {
         $this->yyval = new Node\Expr\Array_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn272($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn273($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch(new Node\Scalar\String(Node\Scalar\String::parse($this->yyastk[$this->stackPos-(4-1)]), $attributes), $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn274($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn275($attributes) {
         $this->yyval = new Node\Expr\New_($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn276($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn277($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn278($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn279($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn280($attributes) {
         $this->yyval = new Node\Expr\ClosureUse(substr($this->yyastk[$this->stackPos-(2-2)], 1), $this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn281($attributes) {
         $this->yyval = new Node\Expr\FuncCall($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn282($attributes) {
         $this->yyval = new Node\Expr\StaticCall($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn283($attributes) {
         $this->yyval = new Node\Expr\StaticCall($this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-4)], $this->yyastk[$this->stackPos-(6-6)], $attributes); 
    }

    protected function yyn284($attributes) {
        
            if ($this->yyastk[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->yyval = new Node\Expr\StaticCall($this->yyastk[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->yyastk[$this->stackPos-(2-1)]->name, $attributes), $this->yyastk[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->yyastk[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->yyastk[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->yyval = new Node\Expr\StaticCall($tmp->var->class, $this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function yyn285($attributes) {
         $this->yyval = new Node\Expr\FuncCall($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn286($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn287($attributes) {
         $this->yyval = new Node\Name('static', $attributes); 
    }

    protected function yyn288($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn289($attributes) {
         $this->yyval = new Node\Name($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn290($attributes) {
         $this->yyval = new Node\Name\FullyQualified($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn291($attributes) {
         $this->yyval = new Node\Name\Relative($this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn292($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn293($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn294($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn295($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn296($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn297($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn298() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn299($attributes) {
         $this->yyval = new Node\Expr\PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn300($attributes) {
         $this->yyval = new Node\Expr\PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn301($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn302($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn303($attributes) {
         $this->yyval = null; 
    }

    protected function yyn304($attributes) {
         $this->yyval = null; 
    }

    protected function yyn305($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn306($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn307($attributes) {
         $this->yyval = array(Node\Scalar\String::parseEscapeSequences($this->yyastk[$this->stackPos-(1-1)], '`')); 
    }

    protected function yyn308($attributes) {
         foreach ($this->yyastk[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '`'); } }; $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn309($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn310($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn311($attributes) {
         $this->yyval = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->yyastk[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function yyn312($attributes) {
         $this->yyval = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->yyastk[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function yyn313($attributes) {
         $this->yyval = new Node\Scalar\String(Node\Scalar\String::parse($this->yyastk[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function yyn314($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function yyn315($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function yyn316($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function yyn317($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function yyn318($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function yyn319($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function yyn320($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function yyn321($attributes) {
         $this->yyval = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function yyn322($attributes) {
         $this->yyval = new Node\Scalar\String(Node\Scalar\String::parseDocString($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function yyn323($attributes) {
         $this->yyval = new Node\Scalar\String('', $attributes); 
    }

    protected function yyn324($attributes) {
         $this->yyval = new Node\Expr\ConstFetch($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn325($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn326($attributes) {
         $this->yyval = new Node\Expr\ClassConstFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn327($attributes) {
         $this->yyval = new Node\Expr\UnaryPlus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn328($attributes) {
         $this->yyval = new Node\Expr\UnaryMinus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn329($attributes) {
         $this->yyval = new Node\Expr\Array_($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn330($attributes) {
         $this->yyval = new Node\Expr\Array_($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn331($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn332($attributes) {
         $this->yyval = new Node\Expr\ClassConstFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn333($attributes) {
         foreach ($this->yyastk[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '"'); } }; $this->yyval = new Node\Scalar\Encapsed($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn334($attributes) {
         foreach ($this->yyastk[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->yyastk[$this->stackPos-(3-2)]);; $this->yyval = new Node\Scalar\Encapsed($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn335($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn336($attributes) {
         $this->yyval = 'class'; 
    }

    protected function yyn337($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn338($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn339() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn340() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn341($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn342($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn343($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(3-3)], $this->yyastk[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function yyn344($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function yyn345($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn346($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn347($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn348($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn349($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(6-2)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn350($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn351($attributes) {
         $this->yyval = new Node\Expr\PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn352($attributes) {
         $this->yyval = new Node\Expr\MethodCall($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn353($attributes) {
         $this->yyval = new Node\Expr\FuncCall($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn354($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn355($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn356($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn357($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn358($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn359($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn360($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn361($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn362($attributes) {
         $this->yyval = new Node\Expr\StaticPropertyFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn363($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn364($attributes) {
         $this->yyval = new Node\Expr\StaticPropertyFetch($this->yyastk[$this->stackPos-(3-1)], substr($this->yyastk[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function yyn365($attributes) {
         $this->yyval = new Node\Expr\StaticPropertyFetch($this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn366($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn367($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn368($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn369($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn370($attributes) {
         $this->yyval = new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn371($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn372($attributes) {
         $this->yyval = null; 
    }

    protected function yyn373($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn374($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn375($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn376($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn377($attributes) {
         $this->yyval = new Node\Expr\List_($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn378($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn379($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn380($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn381($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn382($attributes) {
         $this->yyval = null; 
    }

    protected function yyn383($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn384($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn385($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn386($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn387($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(3-3)], $this->yyastk[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function yyn388($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function yyn389($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(4-4)], $this->yyastk[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function yyn390($attributes) {
         $this->yyval = new Node\Expr\ArrayItem($this->yyastk[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function yyn391($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn392($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn393($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn394($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); 
    }

    protected function yyn395($attributes) {
         $this->yyval = new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn396($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(4-1)], 1), $attributes), $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn397($attributes) {
         $this->yyval = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(3-1)], 1), $attributes), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn398($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn399($attributes) {
         $this->yyval = new Node\Expr\Variable($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn400($attributes) {
         $this->yyval = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->yyastk[$this->stackPos-(6-2)], $attributes), $this->yyastk[$this->stackPos-(6-4)], $attributes); 
    }

    protected function yyn401($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn402($attributes) {
         $this->yyval = new Node\Scalar\String($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn403($attributes) {
         $this->yyval = new Node\Scalar\String($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn404($attributes) {
         $this->yyval = new Node\Expr\Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
