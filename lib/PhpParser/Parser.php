<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 1159;
    protected $gotoTableSize = 543;

    protected $invalidSymbol = 157;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 408;
    protected $YYNLSTATES   = 640;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_YIELD_FROM = 267;
    const T_PLUS_EQUAL = 268;
    const T_MINUS_EQUAL = 269;
    const T_MUL_EQUAL = 270;
    const T_DIV_EQUAL = 271;
    const T_CONCAT_EQUAL = 272;
    const T_MOD_EQUAL = 273;
    const T_AND_EQUAL = 274;
    const T_OR_EQUAL = 275;
    const T_XOR_EQUAL = 276;
    const T_SL_EQUAL = 277;
    const T_SR_EQUAL = 278;
    const T_POW_EQUAL = 279;
    const T_COALESCE = 280;
    const T_BOOLEAN_OR = 281;
    const T_BOOLEAN_AND = 282;
    const T_IS_EQUAL = 283;
    const T_IS_NOT_EQUAL = 284;
    const T_IS_IDENTICAL = 285;
    const T_IS_NOT_IDENTICAL = 286;
    const T_SPACESHIP = 287;
    const T_IS_SMALLER_OR_EQUAL = 288;
    const T_IS_GREATER_OR_EQUAL = 289;
    const T_SL = 290;
    const T_SR = 291;
    const T_INSTANCEOF = 292;
    const T_INC = 293;
    const T_DEC = 294;
    const T_INT_CAST = 295;
    const T_DOUBLE_CAST = 296;
    const T_STRING_CAST = 297;
    const T_ARRAY_CAST = 298;
    const T_OBJECT_CAST = 299;
    const T_BOOL_CAST = 300;
    const T_UNSET_CAST = 301;
    const T_POW = 302;
    const T_NEW = 303;
    const T_CLONE = 304;
    const T_EXIT = 305;
    const T_IF = 306;
    const T_ELSEIF = 307;
    const T_ELSE = 308;
    const T_ENDIF = 309;
    const T_LNUMBER = 310;
    const T_DNUMBER = 311;
    const T_STRING = 312;
    const T_STRING_VARNAME = 313;
    const T_VARIABLE = 314;
    const T_NUM_STRING = 315;
    const T_INLINE_HTML = 316;
    const T_CHARACTER = 317;
    const T_BAD_CHARACTER = 318;
    const T_ENCAPSED_AND_WHITESPACE = 319;
    const T_CONSTANT_ENCAPSED_STRING = 320;
    const T_ECHO = 321;
    const T_DO = 322;
    const T_WHILE = 323;
    const T_ENDWHILE = 324;
    const T_FOR = 325;
    const T_ENDFOR = 326;
    const T_FOREACH = 327;
    const T_ENDFOREACH = 328;
    const T_DECLARE = 329;
    const T_ENDDECLARE = 330;
    const T_AS = 331;
    const T_SWITCH = 332;
    const T_ENDSWITCH = 333;
    const T_CASE = 334;
    const T_DEFAULT = 335;
    const T_BREAK = 336;
    const T_CONTINUE = 337;
    const T_GOTO = 338;
    const T_FUNCTION = 339;
    const T_CONST = 340;
    const T_RETURN = 341;
    const T_TRY = 342;
    const T_CATCH = 343;
    const T_FINALLY = 344;
    const T_THROW = 345;
    const T_USE = 346;
    const T_INSTEADOF = 347;
    const T_GLOBAL = 348;
    const T_STATIC = 349;
    const T_ABSTRACT = 350;
    const T_FINAL = 351;
    const T_PRIVATE = 352;
    const T_PROTECTED = 353;
    const T_PUBLIC = 354;
    const T_VAR = 355;
    const T_UNSET = 356;
    const T_ISSET = 357;
    const T_EMPTY = 358;
    const T_HALT_COMPILER = 359;
    const T_CLASS = 360;
    const T_TRAIT = 361;
    const T_INTERFACE = 362;
    const T_EXTENDS = 363;
    const T_IMPLEMENTS = 364;
    const T_OBJECT_OPERATOR = 365;
    const T_DOUBLE_ARROW = 366;
    const T_LIST = 367;
    const T_ARRAY = 368;
    const T_CALLABLE = 369;
    const T_CLASS_C = 370;
    const T_TRAIT_C = 371;
    const T_METHOD_C = 372;
    const T_FUNC_C = 373;
    const T_LINE = 374;
    const T_FILE = 375;
    const T_COMMENT = 376;
    const T_DOC_COMMENT = 377;
    const T_OPEN_TAG = 378;
    const T_OPEN_TAG_WITH_ECHO = 379;
    const T_CLOSE_TAG = 380;
    const T_WHITESPACE = 381;
    const T_START_HEREDOC = 382;
    const T_END_HEREDOC = 383;
    const T_DOLLAR_OPEN_CURLY_BRACES = 384;
    const T_CURLY_OPEN = 385;
    const T_PAAMAYIM_NEKUDOTAYIM = 386;
    const T_NAMESPACE = 387;
    const T_NS_C = 388;
    const T_DIR = 389;
    const T_NS_SEPARATOR = 390;
    const T_ELLIPSIS = 391;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   52,  156,  157,  153,   51,   34,  157,
          151,  152,   49,   46,    7,   47,   48,   50,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   28,  148,
           40,   14,   42,   27,   64,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   66,  157,  155,   33,  157,  154,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   32,  150,   54,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           29,   30,   31,   35,   36,   37,   38,   39,   41,   43,
           44,   45,   53,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   65,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,  157,  157,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
           60,   61,  418,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,   66,  223,  224,  225,  226,  227,  228,  229,  230,
          231,    0,  232,  233,  234,  235,  236,  237,  238,  239,
          240,  241,  242,  243,-32766,-32766,-32766,-32766,-32766,-32767,
        -32767,-32767,-32767,   58,   67,   68,  432,  244,  245,  615,
           69,  377,   70,  296,  297,   71,   72,   73,   74,   75,
           76,   77,   78,  435,   32,  306,   79,  410,  419,  287,
          443,  415,  959,  960,  459,  744, 1052,  336,  690,  346,
          460,   46,   27,  420, 1056,  461,  811,  462,  129,  463,
          303,  592,  421,  768,  769,  417,   36,   37,  464,  426,
          422,   38,  465,   35,  328,   80,  221,  222,  358,  359,
          438,  466,  467,   39,  299, -122,  468,  469,  470,  715,
          672,  716,  471,  472,  207,  910,  128,  473,  474,   31,
          965,  966,  967,  968,  962,  963,  314,   84,   85,   86,
          534,  487,  969,  964,  423,  440,  696,  613,  365,   47,
          456,  339,  326,  784,  330,  644,   40,  134,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  910,  307,-32766,  436,  473,  220,  221,  222,  644,
          387, 1018,   57,-32766,  110,  745,-32766,-32766,-32766,  135,
        -32766,  211,-32766,  300,-32766,  207,  570,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766, 1059,   22,-32766,-32766,  133,   54,
        -32766,  422,  487,-32766,  486,  423,  612,-32766,  289,-32766,
        -32766,-32766,  466,  467,  312,  300,  220,  221,  222,-32766,
          926,  672,  716,  471,  472,  644,  220,  221,  222,-32766,
          341,  688,-32766,-32766,-32766,  207,-32766, 1017,-32766,  302,
        -32766,-32766,-32766,-32766,  971,  207,  437,-32766,-32766,-32766,
          623,-32766,-32766,-32766,  775,  126,-32766,  644,  603,-32766,
          486,-32766,  442, 1081,-32766,-32766,-32766,-32766,-32766,  687,
        -32766,  793,-32766,  910, 1084,-32766, 1086, 1085,  803,-32766,
        -32766,-32766,  124, 1018,-32766,-32766,  246, 1046,-32766,  355,
          356,-32766,  486,-32766,-32766,  298,  132,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,  910,  819,  820,  821,  818,
          817,  816,   41,  111,  112,  113,  114,  115,  116,  117,
          118,  119,  120,  121,  122,   55, 1052,  288,  132,-32766,
        -32766,-32766,  798,  774,  414,  133, 1074,  644,-32766,-32766,
        -32766,-32766,  357,  285,-32766,-32766,-32766,-32766,-32766,  207,
        -32766,  415,-32766,  849,  851,-32766,  123,  336,  910,-32766,
        -32766,-32766,  347,-32766,-32766,-32766,  811, -118,-32766,  644,
         1010,-32766,  486,-32766,  131,  249,-32766,-32766,-32766,-32766,
        -32766,  331,-32766,  214,-32766, 1074,  213,-32766,-32766,-32766,
          910,-32766,-32766,-32766, 1016,  636,-32766,-32766,  212,  713,
        -32766,  339,  629,-32766,  486,-32766,-32766,-32766,  125,-32766,
        -32766,-32766,  301,-32766,-32766,-32766,-32766,  220,  221,  222,
          244,  245,  644,  137,-32766, -398,-32766,  562,  250,-32766,
        -32766,-32766,  415,-32766,  222,-32766,  207,-32766,  336,  971,
        -32766,-32766,-32766,  910,-32766,-32766,-32766,  811,-32766,-32766,
        -32766,  207,-32766,-32766,  644,  136,-32766,  486,-32766,  709,
         1015,-32766,-32766,-32766,-32766,-32766,  618,-32766,  700,-32766,
          450,  576,-32766,  445,   28,  910,-32766,-32766,-32766,  307,
          714,-32766,-32766,  138,  366,-32766,  583,  584,-32766,  486,
          220,  221,  222,  633,-32766,-32766,-32766,  238,  239,  240,
          628,-32766,  104,  105,  106,  768,  769,  644,  313,  207,
          248,-32766,  808,  639,-32766,-32766,-32766,  625,-32766,  616,
        -32766,   51,-32766,  110,  306,-32766,-32766,-32766,  910,-32766,
        -32766,-32766,   59,-32766,-32766,-32766,  797,  632,-32766,  644,
           56,-32766,  486,-32766,  651,  620,-32766,-32766,-32766,-32766,
        -32766,   53,-32766,   52,-32766,  611,   50,-32766,   49,  588,
          910,-32766,-32766,-32766, 1009,  344,-32766,-32766,  434,  433,
        -32766,  600,  525,-32766,  486,  524,  431,  644,  805,  682,
        -32766,-32766,  645,  512,  661,  508,-32766, 1079,  663,  507,
          555,  345,  644,  107,  108,  109,-32766,  307, -170,-32766,
        -32766,-32766,  511,-32766,  585,-32766,  595,-32766,  929,  110,
        -32766,  680,-32766,  602,-32766,-32766,-32766, 1074,-32766,-32766,
        -32766, -398,  284,-32766,  644,  305,-32766,  486,-32766,  579,
          527,-32766,-32766,-32766,-32766,-32766, -167,-32766,  737,-32766,
          567,  430,-32766,  454,  247,  718,-32766,-32766,-32766,  580,
          340,-32766,-32766,  717, -399,-32766,  337,  970,-32766,  486,
          327,  317,  215,  216,  684,-32766,-32766,  127,  217,  711,
          218,  334,  413,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,  209,-32767,-32767,-32767,-32767,  335,   42,  329,
          959,  960,  473,-32766,-32766, -305,-32766,-32766,  961,  644,
         -297,  608,  517,-32766,  130,  794,-32766,-32766,-32766,  380,
        -32766,  367,-32766,  333,-32766, -306,  432,-32766,  414,  409,
          908,-32766,-32766,-32766,  802,  654,-32766,-32766,  689,  728,
        -32766,  730,  732,-32766,  486,  675,  739,  738,  747,  692,
          677,-32766,  241,  242,  243,  699,  552,  686,  965,  966,
          967,  968,  962,  963,  393,  622,  215,  216,  244,  245,
          969,  964,  217,  621,  218,   45,   44,  219,  657,-32766,
          656,-32766,-32766,  655,  804,  952,  209,  698,  685,  683,
          681,-32766,  691,  801,  959,  960,   83,  644,-32766,  614,
          619,-32766,  961,  624,-32766,-32766,-32766,  626,-32766,  631,
        -32766,  634,-32766,  635,  637,-32766,  638,  342,  736,-32766,
        -32766,-32766,  449, 1080,-32766,-32766,  422,  411,-32766, 1053,
         1051,-32766,  486,  325, 1037, 1049, 1047,  466,  467,-32766,
         1057, 1082, 1083,  786,  950,    0,  650,  716,  471,  472,
          552,   33,  965,  966,  967,  968,  962,  963,  393,-32766,
        -32766,-32766,   34,   43,  969,  964,   48,  311,  338,-32766,
        -32766,  219,  586,-32766,  310,  653,  890,   81,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,
        -32767,  422,  411,  309,  308,  295,  294,  286,  325,  210,
           82,   30,  466,  467,  556,  889,  914, -119,  422,  411,
          975,  650,  716,  471,  472,  325,  776,  918,  915,  466,
          467,  607,-32766,-32766,-32766,  547,  457,  453,  650,  716,
          471,  472,  451,  338,-32766,-32766,-32766,  446,  388,   25,
          652,-32766,    0,-32766,-32766,-32766,-32766,-32766,-32766,   24,
          338,   23, -118,-32766,    0,-32766,-32766,-32766,-32766,-32766,
        -32767,-32767,-32767,-32767,  102,  103,  104,  105,  106,  422,
         1031,  976, 1078,  422,  949, 1048, 1032, 1036, 1050,  935,
          466,  467,  922,  923,  466,  467,  422,  920,  921,  672,
          716,  471,  472,  672,  716,  471,  472,  466,  467,  919,
            0,    0,    0,  422,    0,    0,  672,  716,  471,  472,
            0,    0,    0,    0,  466,  467,  422,    0,  673,    0,
          422,    0,  712,  672,  716,  471,  472,  466,  467,    0,
            0,  466,  467,  422,    0,  809,  672,  716,  471,  472,
          672,  716,  471,  472,  466,  467,    0,    0,  564,    0,
            0,    0,  703,  672,  716,  471,  472,-32766,-32766,-32766,
            0,    0,    0,  422,  610,  913,    0,    0,    0,  912,
          601,  644,    0, 1052,  466,  467,-32766,  422,-32766,-32766,
        -32766,  422,  705,  672,  716,  471,  472,    0,  466,  467,
            0,    0,  466,  467,-32766,-32766,-32766,  672,  716,  471,
          472,  672,  716,  471,  472,    0,  936,    0,  422,    0,
            0,    0,    0,-32766,    0,-32766,-32766,-32766,-32766,  466,
          467,    0,    0,    0,    0,    0,    0,    0,  672,  716,
          471,  472,    0,    0,    0,    0,    0,    0,  487,    0,
            0,  423,    0,    0,    0,    0,  427,    0,  339
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   30,   31,   32,   33,   11,
           12,   13,   30,   31,   32,   33,   34,   35,   36,   37,
           38,    0,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   66,   46,   47,  146,   65,   66,  149,
           52,   78,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   28,   66,   67,   68,   69,   70,    7,
            7,  102,   74,   75,   76,   28,   78,  108,   80,   66,
           82,   83,   84,   85,   76,   87,  117,   89,    7,   91,
           34,   92,   94,  130,  131,    7,   98,   99,  100,  101,
          101,  103,  104,    7,  127,  107,    9,   10,  110,  111,
            7,  112,  113,  140,  141,  152,  118,  119,  120,  150,
          121,  122,  123,  124,   27,   12,  149,  129,  130,    7,
          132,  133,  134,  135,  136,  137,  138,    8,    9,   10,
          127,  143,  144,  145,  146,   76,  148,  149,    7,  151,
            7,  153,  154,   78,  156,   76,   27,  149,   29,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   12,   53,   70,  149,  129,    8,    9,   10,   76,
           77,  122,   66,   80,   65,  148,   83,   84,   85,   66,
           87,    7,   89,   34,   91,   27,   81,   94,    8,    9,
           10,   98,   99,  100,  152,  152,  103,  104,  149,   66,
          107,  101,  143,  110,  111,  146,   76,   27,  153,   29,
           30,  118,  112,  113,    7,   34,    8,    9,   10,   70,
          152,  121,  122,  123,  124,   76,    8,    9,   10,   80,
            7,  148,   83,   84,   85,   27,   87,   76,   89,    7,
           91,  148,  149,   94,  139,   27,    7,   98,   99,  100,
          150,   70,  103,  104,  152,  149,  107,   76,   76,  110,
          111,   80,   76,  150,   83,   84,   85,  118,   87,  148,
           89,  148,   91,   12,   76,   94,   78,   79,  148,   98,
           99,  100,  149,  122,  103,  104,  128,   78,  107,  101,
          102,  110,  111,    8,    9,   34,  147,  148,  149,  118,
           30,   31,   32,   33,   34,   12,  111,  112,  113,  114,
          115,  116,   14,   15,   16,   17,   18,   19,   20,   21,
           22,   23,   24,   25,   26,   66,   78,   34,  147,  148,
          149,   70,  150,  152,  146,  149,   81,   76,   30,   31,
           32,   80,    7,  128,   83,   84,   85,    8,   87,   27,
           89,  102,   91,   55,   56,   94,   14,  108,   12,   98,
           99,  100,  153,   70,  103,  104,  117,  152,  107,   76,
          152,  110,  111,   80,   28,   14,   83,   84,   85,  118,
           87,   81,   89,   14,   91,   81,   14,   94,   30,   31,
           12,   98,   99,  100,  139,   28,  103,  104,   14,  150,
          107,  153,   28,  110,  111,    8,    9,   10,  149,  148,
          149,  118,   34,    8,    9,   10,   70,    8,    9,   10,
           65,   66,   76,  149,   27,  127,   80,  153,   14,   83,
           84,   85,  102,   87,   10,   89,   27,   91,  108,  139,
           94,  148,  149,   12,   98,   99,  100,  117,   70,  103,
          104,   27,   30,  107,   76,   28,  110,  111,   80,   34,
          156,   83,   84,   85,  118,   87,   28,   89,   28,   91,
           71,   72,   94,   71,   72,   12,   98,   99,  100,   53,
          150,  103,  104,   96,   97,  107,  105,  106,  110,  111,
            8,    9,   10,   28,  148,  149,  118,   46,   47,   48,
           28,   70,   46,   47,   48,  130,  131,   76,   28,   27,
           28,   80,  148,  149,   83,   84,   85,   28,   87,   28,
           89,   66,   91,   65,   67,   94,  148,  149,   12,   98,
           99,  100,   66,   70,  103,  104,  148,  149,  107,   76,
           66,  110,  111,   80,  148,  149,   83,   84,   85,  118,
           87,   66,   89,   66,   91,   76,   66,   94,   66,   73,
           12,   98,   99,  100,  155,   81,  103,  104,   85,   76,
          107,   76,   76,  110,  111,   76,   76,   76,   76,  148,
          149,  118,   76,   76,   76,   76,   70,   76,   76,   76,
           93,   81,   76,   49,   50,   51,   80,   53,   78,   83,
           84,   85,   78,   87,   78,   89,   78,   91,   78,   65,
           94,  148,  149,   78,   98,   99,  100,   81,   70,  103,
          104,  127,   93,  107,   76,   93,  110,  111,   80,   95,
           93,   83,   84,   85,  118,   87,   93,   89,  150,   91,
           95,  101,   94,  101,   28,  122,   98,   99,  100,  108,
          125,  103,  104,  122,  127,  107,  109,  139,  110,  111,
          127,  142,   46,   47,  148,  149,  118,  128,   52,  147,
           54,  125,  151,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   66,   40,   41,   42,   43,  126,  128,  127,
           74,   75,  129,   70,   78,  142,  148,  149,   82,   76,
          142,  142,  146,   80,  149,  148,   83,   84,   85,  142,
           87,  142,   89,  142,   91,  142,  146,   94,  146,  151,
          154,   98,   99,  100,  148,  148,  103,  104,  148,  148,
          107,  148,  148,  110,  111,  148,  148,  148,  148,  148,
          148,  118,   49,   50,   51,  148,  130,  148,  132,  133,
          134,  135,  136,  137,  138,  148,   46,   47,   65,   66,
          144,  145,   52,  148,   54,  148,  148,  151,  148,  153,
          148,  148,  149,  148,  148,  152,   66,  148,  148,  148,
          148,   70,  148,  148,   74,   75,  149,   76,   78,  149,
          149,   80,   82,  149,   83,   84,   85,  149,   87,  149,
           89,  149,   91,  149,  149,   94,  149,  151,  150,   98,
           99,  100,  150,  150,  103,  104,  101,  102,  107,  150,
          150,  110,  111,  108,  150,  150,  150,  112,  113,  118,
          150,  150,  150,  150,  150,   -1,  121,  122,  123,  124,
          130,  151,  132,  133,  134,  135,  136,  137,  138,    8,
            9,   10,  151,  151,  144,  145,  151,  151,  143,  148,
          149,  151,  155,  153,  151,  150,  152,  151,   27,  151,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,  101,  102,  151,  151,  151,  151,  151,  108,  151,
          151,  151,  112,  113,  152,  152,  152,  152,  101,  102,
          152,  121,  122,  123,  124,  108,  152,  152,  152,  112,
          113,  152,    8,    9,   10,  152,  152,  152,  121,  122,
          123,  124,  152,  143,    8,    9,   10,  152,  152,  152,
          150,   27,   -1,   29,   30,   31,   32,   33,   34,  152,
          143,  152,  152,   27,   -1,   29,   30,   31,   32,   33,
           40,   41,   42,   43,   44,   45,   46,   47,   48,  101,
          155,  155,  155,  101,  155,  155,  155,  155,  155,  155,
          112,  113,  155,  155,  112,  113,  101,  155,  155,  121,
          122,  123,  124,  121,  122,  123,  124,  112,  113,  155,
           -1,   -1,   -1,  101,   -1,   -1,  121,  122,  123,  124,
           -1,   -1,   -1,   -1,  112,  113,  101,   -1,  150,   -1,
          101,   -1,  150,  121,  122,  123,  124,  112,  113,   -1,
           -1,  112,  113,  101,   -1,  150,  121,  122,  123,  124,
          121,  122,  123,  124,  112,  113,   -1,   -1,   86,   -1,
           -1,   -1,  150,  121,  122,  123,  124,    8,    9,   10,
           -1,   -1,   -1,  101,   88,  150,   -1,   -1,   -1,  150,
           90,   76,   -1,   78,  112,  113,   27,  101,   29,   30,
           31,  101,  150,  121,  122,  123,  124,   -1,  112,  113,
           -1,   -1,  112,  113,    8,    9,   10,  121,  122,  123,
          124,  121,  122,  123,  124,   -1,  111,   -1,  101,   -1,
           -1,   -1,   -1,   27,   -1,   29,   30,   31,   32,  112,
          113,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  121,  122,
          123,  124,   -1,   -1,   -1,   -1,   -1,   -1,  143,   -1,
           -1,  146,   -1,   -1,   -1,   -1,  151,   -1,  153
    );

    protected $actionBase = array(
            0,  735,  800,  817,  878,  120,  972,   -1,  990,  942,
          882,  929,  986,  925,  912,  895, 1017, 1017, 1017, 1017,
         1017,  458,  509,  394,  387,  394,  511,   -2,   -2,   -2,
          201,  169,  281,  281,  643,  281,  483,  451,  536,  113,
          366,  313,  398,  568,  568,  568,  568,  731,  731,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  568,   47,
          654,  559,  580,  652,  651,  650,  649,  764,  549,  734,
          683,  689,  447,  690,  694,  695,  704,  703,  682,  700,
          727,  696,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,  359,  178,  238,  502,  429,  305,  228,
          228,  228,  228,  228,  228,  425,  425,  425,  425,  425,
          425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
          425,  425,   97,  417,  417,  417,  444,  636,  342,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  200,  -18,  -18, 1059,  442, 1096,  378,  936,  328,
          924,  861,  861,  861,  861,  861,  -25,  290,    4,    4,
            4,    4,  318,  930,  930,  930,  930,  663,  663,  663,
          663,  -31,  350,  269,   56,   56,  583,  583,  477,  575,
          476,  476,  471,  471, 1005, 1005, 1005, 1005, 1005, 1005,
         1005, 1005, 1005, 1005,  540,  499,  738,  738,  -37,  -37,
          -37,  -37,  395,  395,  320,  275,  324,   69,  564,  564,
          564,  713,  713,  713,  202,  208,  504,    8,    8,    8,
          530,  538,  556,  206,   79,   79,   79,   79, -100,  657,
           79,   79,   79,  279,  -27,  -27,  218,  294,  565,  678,
          554,  508,  408,  593,  -23,  592,  592,  592,   75,  560,
          422,  419,  401,  578,   35,   75,   47,  181,  384,  126,
          446,  600,  516,  640,  597,  141,  103,   13,  416,  153,
          229,   63,  645,  642,  762,  763,   62,  133,  547,  446,
          446,  446,  122,  125,  153,  235,  375,  375,  375,  375,
          375,  375,  375,  375,  577,  143,   88,  655,  150,  445,
          721,  529,  760,  519,  521,  529,  546,  445,  725,  725,
          725,  725,  445,  521,  760,  760,  445,  477,  760,   96,
          445,  566,  521,  545,  725,  635,  627,  529,  544,  581,
          760,  760,  760,  519,  445,  725,  561,  542,  194,  760,
          725,  500,  500,  561,  445,  500,  546,  500,   21,  460,
          512,  722,  736,  541,  533,  660,  551,  543,  755,  754,
          759,  527,  520,  756,  710,  576,  619,  513,  362,  510,
          475,  507,  505,  539,  494,  553,  560,  590,  478,  478,
          478,  514,  591,  514,  478,  478,  478,  478,  478,  478,
          478,  478,  854,  587,  573,  582,  503,  617,  404,  576,
          557,  392,  661,  576,  776,  796,  586,  526,  753,  783,
          514,  843,  638,   81,  389,  752,  517,  528,  514,  733,
          514,  664,  514,  775,  531,  702,  576,  478,  774,  842,
          838,  837,  834,  833,  832,  831,  830,  486,  829,  612,
          795,  227,  758,  578,  589,  532,  611,  243,  827,  514,
          514,  668,  657,  514,  610,  637,  809,  609,  790,  826,
          538,  785,  514,  562,  825,  243,  492,  506,  765,  608,
          588,  548,  768,  676,  670,  381,  701,  485,  607,  807,
          797,  810,  604,  672,  674,  434,  515,  550,  555,  675,
          726,  603,  779,  563,  579,  567,  552,  677,  522,  784,
          601,  646,  596,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,    0,    0,    0,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  129,  -18,  -18,  -18,  -18,  129,  -18,
          -18,  -18,  -18,  -18,  -18,  129,  129,  129,  129,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  -18,  129,  129,  129,  -18, 1005,  -18, 1005,
         1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
         1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
         1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
         1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
         1005,  129,    0,    0,  129,  -18,  129,  -18,  129,  -18,
          129,  129,  129,  129,  129,  129,  -18,  -18,  -18,  -18,
          -18,  -18,    0,  564,  564,  564,  564,  -18,  -18,  -18,
          -18,  215,  215,  215, 1005, 1005, 1005, 1005, 1005, 1005,
          564,  564,  713,  713,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  215,  215, 1005, 1005,   79,   79,
           79,   79,   79,   79,  -27,  -27,  -27,  229,    0,    0,
            0,    0,    0,    0,   79,  521,  -27,  268,  268,  268,
          -27,  -27,  -27,  229,    0,    0,    0,    0,  521,  268,
            0,    0,    0,  760,    0,    0,    0,  268,  407,  407,
          407,  407,  243,  153,    0,  521,  521,  521,    0,  544,
            0,    0,    0,  760,    0,    0,    0,    0,    0,    0,
          478,   81,  753,  259,  355,    0,    0,    0,    0,    0,
            0,    0,  355,  355,  252,  252,    0,    0,  486,  478,
          478,  478,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  259,    0,    0,  243
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  111,  103,  117,  102,
          113,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  425,  425,32767,  382,32767,32767,32767,32767,
        32767,32767,32767,  188,  188,  188,32767,32767,32767,  414,
          414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
        32767,32767,32767,32767,32767,  270,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  276,  430,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  251,  252,  254,  255,  187,  415,  139,  277,
          429,  186,  141,  215,  386,32767,32767,32767,  217,   26,
          150,   95,  385,  185,  126,  269,  271,  216,  192,  197,
          198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
          208,  191,  340,  248,  247,  246,  342,32767,  341,  379,
          379,  382,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  213,  368,  367,  214,  338,  218,  339,  220,  343,
          219,  236,  237,  234,  235,  238,  345,  344,  361,  362,
          359,  360,  190,  239,  240,  241,  242,  363,  364,  365,
          366,  172,  172,  172,32767,32767,  424,  424,32767,32767,
          227,  228,  352,  353,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  173,32767,32767,32767,  130,  130,
          130,  130,  130,32767,32767,32767,32767,32767,  222,  223,
          221,  347,  348,  346,32767,32767,  314,32767,32767,32767,
        32767,32767,  316,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  387,  315,32767,32767,32767,32767,32767,
        32767,32767,32767,  400,  303,32767,32767,32767,32767,  296,
          114,  116,   64,  371,32767,32767,32767,32767,32767,  405,
          232,32767,32767,32767,32767,32767,32767,  437,32767,  400,
        32767,32767,32767,32767,32767,32767,32767,32767,  245,  224,
          225,  226,32767,32767,  404,  398,  355,  356,  357,  358,
          349,  350,  351,  354,32767,32767,32767,32767,32767,   68,
          311,32767,  317,32767,32767,32767,32767,   68,32767,32767,
        32767,32767,   68,32767,  403,  402,   68,32767,  297,  381,
           68,   81,32767,   79,32767,  100,  100,32767,32767,   83,
          377,  393,32767,32767,   68,32767,  285,   70,  381,32767,
        32767,  132,  132,  285,   68,  132,32767,  132,32767,    4,
          321,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  298,32767,32767,32767,  266,
          267,  374,  389,32767,  390,32767,  296,32767,  230,  231,
          233,  210,32767,  212,  256,  257,  258,  259,  260,  261,
          262,  264,32767,32767,  301,  304,32767,32767,32767,    6,
           20,  149,32767,  299,32767,  195,32767,32767,32767,32767,
          432,32767,32767,  189,32767,32767,   22,32767,  145,32767,
           66,32767,  422,32767,32767,  398,  300,  229,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  399,32767,32767,
        32767,  121,32767,  334,32767,32767,32767,   82,32767,  193,
          140,32767,32767,  431,32767,32767,32767,32767,32767,32767,
        32767,32767,   67,32767,32767,   84,32767,32767,  398,32767,
        32767,32767,32767,32767,32767,  184,32767,32767,32767,32767,
        32767,  398,32767,32767,32767,  125,32767,32767,32767,32767,
        32767,32767,32767,    4,32767,  166,32767,32767,32767,32767,
        32767,32767,32767,   28,   28,    3,   28,  108,   28,  152,
            3,  100,  100,   61,  152,   28,  152,   28,   28,   28,
           28,   28,  159,   28,   28,   28,   28,   28,   28,   28
    );

    protected $goto = array(
          168,  168,  142,  142,  147,  142,  143,  144,  145,  150,
          152,  188,  170,  166,  166,  166,  166,  147,  147,  167,
          167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
          162,  163,  164,  165,  185,  141,  186,  488,  489,  370,
          490,  494,  495,  496,  497,  498,  499,  500,  501,  836,
          146,  148,  149,  151,  173,  178,  187,  203,  251,  254,
          256,  258,  260,  261,  262,  263,  264,  265,  273,  274,
          275,  276,  290,  291,  318,  319,  320,  389,  390,  391,
          537,  189,  190,  191,  192,  193,  194,  195,  196,  197,
          198,  199,  200,  201,  153,  154,  155,  169,  156,  171,
          157,  204,  172,  158,  159,  160,  205,  161,  139,  553,
          694,  553,  553,  553,  553,  553,  553,  553,  553,  553,
          553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
          553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
          553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
          553,  553,  553,  492,  492,  492,  492,  492,  492, 1042,
         1042,  778,  515,  492,  492,  492,  492,  492,  492,  492,
          492,  492,  492,  533,    1,  503,  503, 1073, 1073,    2,
         1058, 1058, 1058,  649,  649,  649,  428,  428,  428,  428,
          428,  428, 1041, 1076, 1073, 1067,  428,  428,  428,  428,
          428,  428,  428,  428,  428,  428, 1076, 1076,  937,  937,
          767,  767,  767,  767,  767,  767,  539,  540,  541,  542,
          543,  544,  545,  546,  548,  574,  604,  760,  760, 1063,
         1063,  648,  648,  648,  565,  589,  725,  725,  725,  725,
          815,  408,  720,  726,  598,  554,  349,  554,  554,  554,
          554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
          554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
          554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
          554,  554,  554,  554,  554,  554,  554,  554,  554,  972,
          371,  972,  972,  972,  972,  972,  972,  972,  972,  972,
          972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
          972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
          972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
          972,  972,  972,  594, 1023,  332,  599,  590,  368,  316,
          282,  176,  283,  582,  504,  504,  179,  180,  181,  396,
          397,  398,  399,  175,  202,  206,  208,  255,  257,  259,
          266,  267,  268,  269,  270,  271,  277,  278,  279,  280,
          292,  293,  321,  322,  323,  400,  401,  402,  403,  177,
          182,  252,  253,  183,  184,    5, 1035,   16, 1060,    6,
          568,  571,  609,  575,  352,  407,    7,  385,   17,   18,
            8,   19,    9,  834,   20,   10,   11,   12,   13,   14,
           15,  395,  591,  532,  532,  559,  528,  647,  647,  647,
          509,  530,  530,  491,  493,  520,  535,  560,  563,  572,
          578,  350,  351,  509,  378,  505,  505,  746,  731,  729,
          727,  729,  617,  506,  755,  750,  379,  379,  379,  372,
          509,  509,  509,  518,  953,  958,  538,  529,  379,  883,
          514,  764,  893,   26,   21,  364,  394,  933,  934, 1043,
         1043,  447,  773,  514,  514,  948,  947,  658,  549,  382,
          383,  596,  782,  931, 1034,  931,  404,  627,  664,   29,
          928,  787,  932,  973,  587, 1020,  823,  734,  455,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  509,
          526,    0,    0,    0,    0,    0,    0,    0,  513,    0,
            0,    0,    0,    0,    0,    0,    0,  536,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  519
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   39,
           32,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   94,   94,   94,   94,   94,   94,   96,
           96,   63,   79,   94,   94,   94,   94,   94,   94,   94,
           94,   94,   94,   87,    2,   94,   94,  119,  119,    2,
           96,   96,   96,    8,    8,    8,   39,   39,   39,   39,
           39,   39,   96,  119,  119,  118,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,  119,  119,   39,   39,
           39,   39,   39,   39,   39,   39,   88,   88,   88,   88,
           88,   88,   88,   88,   88,   88,   39,   56,   56,   56,
           56,    7,    7,    7,   22,   22,   39,   39,   39,   39,
           76,   76,   39,   39,   39,   97,   51,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,  104,
           29,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,   43,  110,  103,   43,   31,   43,  103,
           47,   13,   47,  106,   97,   97,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   14,   61,   14,  116,   14,
           42,   42,   42,   49,   49,   49,   14,   30,   14,   14,
           14,   14,   14,   79,   14,   14,   14,   14,   14,   14,
           14,   33,   33,   33,   33,   33,   33,    6,    6,    6,
            4,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,   51,   51,    4,    5,  100,  100,    6,    6,    6,
            6,    6,    6,    6,    6,    6,  101,  101,  101,   40,
            4,    4,    4,   40,   16,   61,   26,   40,  101,   80,
           26,   58,   16,   16,   16,   16,  101,   61,   61,   95,
           95,   40,   60,   26,   26,  102,  102,   11,   16,    9,
            9,   40,   64,   61,   61,   61,   10,   53,   12,   16,
           92,   65,   61,  105,   16,  109,   78,   50,   86,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,
            5,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   79
    );

    protected $gotoBase = array(
            0,    0, -441,    0,   95,   96,  416,  230,  182,  124,
           71,  120,   51,  134, -229,    0,   44,    0,    0,    0,
            0,    0,  190,    0,    0,  -30,  426,    0,    0,  244,
          102,   52,   85,  127,    0,    0,    0,    0,    0,  -98,
           27,    0,   81, -119,    0,    0,    0, -284,    0,   58,
           54, -190,    0,  121,    0,    0,  -57,    0,  149,    0,
          159,   43,    0,  130,  117,   53,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  -64,    0,   40,  115,
          152,    0,    0,    0,    0,    0,   45,  140,  166,    0,
            0,    0,   73,    0, -131,  163, -147,   38,    0,    0,
          129,  119,  147,    9,   82,  126,  133,    0,    0,   47,
          123,    0,    0,    0,    0,    0,  101,    0,  160, -138,
            0
    );

    protected $gotoDefault = array(
        -32768,  458,    3,  642,  475,  510,  669,  670,  671,  374,
          373,  659,  665,  174,    4,  667,  884,  360,  674,  361,
          577,  676,  522,  678,  679,  140,  476,  375,  376,  523,
          384,  566,  693,  272,  381,  695,  362,  697,  702,  363,
          597,  581,  550,  593,  477,  439,  561,  281,  531,  557,
          733,  348,  741,  630,  749,  752,  478,  551,  763,  444,
          771,  930,  392,  777,  783,  788,  791,  416,  405,  573,
          795,  796,  324,  800,  605,  606,  814,  304,  822,  835,
          412,  903,  905,  479,  480,  516,  452,  502,  521,  481,
          924,  406,  927,  482,  483,  424,  425,  945,  942,  354,
         1028,  353,  441,  315, 1013, 1012,  569,  977,  448, 1066,
         1024,  343,  484,  485,  369,  386, 1061,  429, 1068, 1075,
          558
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   44,   44,   44,   45,
           45,   48,   48,   46,   46,   49,   49,   23,   23,   32,
           32,   35,   35,   34,   34,   50,   24,   24,   24,   24,
           51,   51,   52,   52,   53,   53,   21,   21,   17,   17,
           54,   19,   19,   55,   18,   18,   20,   20,   31,   31,
           31,   42,   42,   57,   57,   58,   58,   60,   60,   60,
           59,   59,   43,   43,   61,   61,   61,   62,   62,   63,
           63,   63,   27,   27,   64,   64,   64,   28,   28,   65,
           65,   47,   47,   66,   66,   66,   66,   71,   71,   72,
           72,   73,   73,   73,   73,   74,   75,   75,   70,   70,
           67,   67,   69,   69,   77,   77,   76,   76,   76,   76,
           76,   76,   68,   68,   78,   78,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   16,   16,   26,   26,   83,   83,
           84,   84,   84,   84,   79,   86,   86,   91,   91,   92,
           93,   93,   93,   93,   93,   93,   97,   97,   39,   39,
           39,   80,   80,   98,   98,   94,   94,   99,   99,   99,
           99,   81,   81,   81,   85,   85,   85,   90,   90,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,   13,   13,   13,   13,   13,   13,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,   89,   89,   82,   82,   82,   82,  105,  105,  106,
          106,  109,  109,  108,  108,  110,  110,   33,   33,   33,
           33,  112,  112,  111,  111,  111,  111,  111,  113,  113,
           96,   96,  100,  100,   95,   95,  114,  114,  114,  114,
          101,  101,  101,  101,   88,   88,  102,  102,  102,   56,
          115,  115,  116,  116,  116,   87,   87,  117,  117,  118,
          118,  118,  118,  103,  103,  103,  103,  119,  119,  119,
          119,  119,  119,  119,  120,  120,  120
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   10,    7,    6,    5,    1,    2,    2,    0,
            2,    0,    2,    0,    2,    1,    3,    1,    4,    1,
            4,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    1,    3,    5,    4,    3,    4,
            4,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    1,    1,    1,    3,    2,
            1,    2,   10,   11,    3,    3,    2,    4,    4,    3,
            4,    4,    4,    4,    3,    0,    4,    1,    3,    2,
            2,    4,    6,    2,    2,    4,    1,    1,    1,    2,
            3,    1,    1,    1,    1,    1,    1,    3,    3,    4,
            4,    0,    2,    1,    0,    1,    1,    0,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            3,    2,    1,    3,    1,    4,    3,    1,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    5,    4,    4,
            3,    1,    3,    1,    1,    3,    3,    1,    1,    0,
            2,    0,    1,    3,    1,    3,    1,    1,    1,    1,
            1,    6,    4,    3,    4,    2,    4,    4,    1,    3,
            1,    2,    1,    1,    4,    1,    3,    6,    4,    4,
            4,    4,    1,    4,    0,    1,    1,    3,    1,    4,
            3,    1,    1,    1,    0,    0,    2,    3,    1,    3,
            1,    4,    2,    2,    2,    1,    2,    1,    4,    3,
            3,    3,    6,    3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1() {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3() {
         $this->semValue = array(); 
    }

    protected function reduceRule4() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule7() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10() {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule11() {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule12() {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule13() {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule14() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule15() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule16() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule17() {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule18() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule21() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule22() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule23() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule24() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26() {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule27() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28() {
         $this->semValue = array(); 
    }

    protected function reduceRule29() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32() {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule33() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34() {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule35() {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes); 
    }

    protected function reduceRule36() {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule37() {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule38() {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule39() {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule40() {
         $this->semValue = new Node\Stmt\Break_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule41() {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule42() {
         $this->semValue = new Node\Stmt\Continue_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule43() {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule44() {
         $this->semValue = new Node\Stmt\Return_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule45() {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule46() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47() {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule48() {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule49() {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule50() {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule51() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52() {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule53() {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes); 
    }

    protected function reduceRule54() {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule55() {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule56() {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57() {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule58() {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule59() {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule60() {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule61() {
         $this->semValue = array(); 
    }

    protected function reduceRule62() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63() {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes); 
    }

    protected function reduceRule64() {
         $this->semValue = null; 
    }

    protected function reduceRule65() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68() {
         $this->semValue = false; 
    }

    protected function reduceRule69() {
         $this->semValue = true; 
    }

    protected function reduceRule70() {
         $this->semValue = false; 
    }

    protected function reduceRule71() {
         $this->semValue = true; 
    }

    protected function reduceRule72() {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(10-3)], array('byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes); 
    }

    protected function reduceRule73() {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes); 
    }

    protected function reduceRule74() {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule75() {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule76() {
         $this->semValue = 0; 
    }

    protected function reduceRule77() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule78() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule79() {
         $this->semValue = null; 
    }

    protected function reduceRule80() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule81() {
         $this->semValue = array(); 
    }

    protected function reduceRule82() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83() {
         $this->semValue = array(); 
    }

    protected function reduceRule84() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule86() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule87() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule89() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule95() {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule96() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule97() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule98() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule99() {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule100() {
         $this->semValue = array(); 
    }

    protected function reduceRule101() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule102() {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule103() {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule104() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule107() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule108() {
         $this->semValue = array(); 
    }

    protected function reduceRule109() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule110() {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule111() {
         $this->semValue = array(); 
    }

    protected function reduceRule112() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule113() {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule114() {
         $this->semValue = null; 
    }

    protected function reduceRule115() {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule116() {
         $this->semValue = null; 
    }

    protected function reduceRule117() {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule118() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule119() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule120() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule122() {
         $this->semValue = array(); 
    }

    protected function reduceRule123() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule124() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule125() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule126() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule127() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule128() {
         $this->semValue = 'array'; 
    }

    protected function reduceRule129() {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule130() {
         $this->semValue = null; 
    }

    protected function reduceRule131() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule132() {
         $this->semValue = null; 
    }

    protected function reduceRule133() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule134() {
         $this->semValue = array(); 
    }

    protected function reduceRule135() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule136() {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes)); 
    }

    protected function reduceRule137() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule138() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule139() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule140() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule141() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule142() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule143() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule144() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule145() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule146() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule147() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149() {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule150() {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule151() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule152() {
         $this->semValue = array(); 
    }

    protected function reduceRule153() {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule154() {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule155() {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], array('type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule156() {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule157() {
         $this->semValue = array(); 
    }

    protected function reduceRule158() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159() {
         $this->semValue = array(); 
    }

    protected function reduceRule160() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule162() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule163() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule164() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule165() {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167() {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168() {
         $this->semValue = null; 
    }

    protected function reduceRule169() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171() {
         $this->semValue = 0; 
    }

    protected function reduceRule172() {
         $this->semValue = 0; 
    }

    protected function reduceRule173() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175() {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184() {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule185() {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule186() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188() {
         $this->semValue = array(); 
    }

    protected function reduceRule189() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191() {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule192() {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule193() {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule194() {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule195() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196() {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule197() {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule198() {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule199() {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule200() {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule201() {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule202() {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule203() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule204() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule205() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule206() {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule207() {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule208() {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule209() {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule210() {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule211() {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule212() {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule213() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule214() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule215() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule216() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule217() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule218() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule219() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule220() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule221() {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule222() {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule223() {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule224() {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule225() {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule226() {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule227() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule228() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule229() {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule230() {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule231() {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule232() {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule233() {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule234() {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule235() {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule236() {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule237() {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule238() {
         $this->semValue = new Node\Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule239() {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule240() {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule241() {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule242() {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule243() {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule244() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule245() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule246() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule247() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule248() {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule249() {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule250() {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule251() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule252() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule253() {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule254() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule255() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule256() {
         $this->semValue = new Node\Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule257() {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule258() {
         $this->semValue = new Node\Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule259() {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule260() {
         $this->semValue = new Node\Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule261() {
         $this->semValue = new Node\Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule262() {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule263() {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule264() {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule265() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule267() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule268() {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule269() {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule270() {
         $this->semValue = new Node\Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule271() {
         $this->semValue = new Node\Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule272() {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes); 
    }

    protected function reduceRule273() {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes); 
    }

    protected function reduceRule274() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule275() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule276() {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule277() {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule278() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule279() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule280() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule281() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule282() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule283() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule284() {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule285() {
         $this->semValue = array(); 
    }

    protected function reduceRule286() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule287() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule288() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule289() {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule290() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule291() {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule292() {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule293() {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule294() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule295() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule296() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule297() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule298() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule299() {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule300() {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule301() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule303() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule306() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule307() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule308() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule309() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule310() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule311() {
         $this->semValue = null; 
    }

    protected function reduceRule312() {
         $this->semValue = null; 
    }

    protected function reduceRule313() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule314() {
         $this->semValue = array(); 
    }

    protected function reduceRule315() {
         $this->semValue = array(Node\Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule316() {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule317() {
         $this->semValue = array(); 
    }

    protected function reduceRule318() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule319() {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule320() {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule321() {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule322() {
         $this->semValue = new Node\Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule323() {
         $this->semValue = new Node\Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule324() {
         $this->semValue = new Node\Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule325() {
         $this->semValue = new Node\Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule326() {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule327() {
         $this->semValue = new Node\Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule328() {
         $this->semValue = new Node\Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule329() {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule330() {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule331() {
         $this->semValue = new Node\Scalar\String_('', $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule332() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule333() {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule334() {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule335() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule336() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule337() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule338() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule339() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule340() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule341() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule342() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule343() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule344() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule345() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule346() {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule347() {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule348() {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule349() {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule350() {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule351() {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule352() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule353() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule354() {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule355() {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule356() {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule357() {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule358() {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule359() {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule360() {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule361() {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule362() {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule363() {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule364() {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule365() {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule366() {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule367() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule368() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule369() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule370() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule371() {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule372() {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule373() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule374() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule375() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule376() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule377() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule378() {
         $this->semValue = 'class'; 
    }

    protected function reduceRule379() {
         $this->semValue = array(); 
    }

    protected function reduceRule380() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule381() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule382() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule383() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule384() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule385() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule386() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule387() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule388() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule389() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule390() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule391() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule392() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule393() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule394() {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule395() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule396() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule397() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule398() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule399() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule400() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule401() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule402() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule403() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule404() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule405() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule406() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule407() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule408() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule409() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule410() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule411() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule412() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule413() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule414() {
         $this->semValue = null; 
    }

    protected function reduceRule415() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule416() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule417() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule418() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule419() {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule420() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule421() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule422() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule423() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule424() {
         $this->semValue = null; 
    }

    protected function reduceRule425() {
         $this->semValue = array(); 
    }

    protected function reduceRule426() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule427() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule428() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule429() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule430() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule431() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule432() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule433() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule434() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule435() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule436() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule437() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule438() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule439() {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule440() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule441() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule442() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule443() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule444() {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule445() {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule446() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }
}
