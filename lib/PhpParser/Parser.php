<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 390;
    protected $actionTableSize = 1102;
    protected $gotoTableSize = 540;

    protected $invalidToken = 155;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 404;
    protected $YYNLSTATES   = 636;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_COALESCE = 279;
    const T_BOOLEAN_OR = 280;
    const T_BOOLEAN_AND = 281;
    const T_IS_EQUAL = 282;
    const T_IS_NOT_EQUAL = 283;
    const T_IS_IDENTICAL = 284;
    const T_IS_NOT_IDENTICAL = 285;
    const T_IS_SMALLER_OR_EQUAL = 286;
    const T_IS_GREATER_OR_EQUAL = 287;
    const T_SL = 288;
    const T_SR = 289;
    const T_INSTANCEOF = 290;
    const T_INC = 291;
    const T_DEC = 292;
    const T_INT_CAST = 293;
    const T_DOUBLE_CAST = 294;
    const T_STRING_CAST = 295;
    const T_ARRAY_CAST = 296;
    const T_OBJECT_CAST = 297;
    const T_BOOL_CAST = 298;
    const T_UNSET_CAST = 299;
    const T_POW = 300;
    const T_NEW = 301;
    const T_CLONE = 302;
    const T_EXIT = 303;
    const T_IF = 304;
    const T_ELSEIF = 305;
    const T_ELSE = 306;
    const T_ENDIF = 307;
    const T_LNUMBER = 308;
    const T_DNUMBER = 309;
    const T_STRING = 310;
    const T_STRING_VARNAME = 311;
    const T_VARIABLE = 312;
    const T_NUM_STRING = 313;
    const T_INLINE_HTML = 314;
    const T_CHARACTER = 315;
    const T_BAD_CHARACTER = 316;
    const T_ENCAPSED_AND_WHITESPACE = 317;
    const T_CONSTANT_ENCAPSED_STRING = 318;
    const T_ECHO = 319;
    const T_DO = 320;
    const T_WHILE = 321;
    const T_ENDWHILE = 322;
    const T_FOR = 323;
    const T_ENDFOR = 324;
    const T_FOREACH = 325;
    const T_ENDFOREACH = 326;
    const T_DECLARE = 327;
    const T_ENDDECLARE = 328;
    const T_AS = 329;
    const T_SWITCH = 330;
    const T_ENDSWITCH = 331;
    const T_CASE = 332;
    const T_DEFAULT = 333;
    const T_BREAK = 334;
    const T_CONTINUE = 335;
    const T_GOTO = 336;
    const T_FUNCTION = 337;
    const T_CONST = 338;
    const T_RETURN = 339;
    const T_TRY = 340;
    const T_CATCH = 341;
    const T_FINALLY = 342;
    const T_THROW = 343;
    const T_USE = 344;
    const T_INSTEADOF = 345;
    const T_GLOBAL = 346;
    const T_STATIC = 347;
    const T_ABSTRACT = 348;
    const T_FINAL = 349;
    const T_PRIVATE = 350;
    const T_PROTECTED = 351;
    const T_PUBLIC = 352;
    const T_VAR = 353;
    const T_UNSET = 354;
    const T_ISSET = 355;
    const T_EMPTY = 356;
    const T_HALT_COMPILER = 357;
    const T_CLASS = 358;
    const T_TRAIT = 359;
    const T_INTERFACE = 360;
    const T_EXTENDS = 361;
    const T_IMPLEMENTS = 362;
    const T_OBJECT_OPERATOR = 363;
    const T_DOUBLE_ARROW = 364;
    const T_LIST = 365;
    const T_ARRAY = 366;
    const T_CALLABLE = 367;
    const T_CLASS_C = 368;
    const T_TRAIT_C = 369;
    const T_METHOD_C = 370;
    const T_FUNC_C = 371;
    const T_LINE = 372;
    const T_FILE = 373;
    const T_COMMENT = 374;
    const T_DOC_COMMENT = 375;
    const T_OPEN_TAG = 376;
    const T_OPEN_TAG_WITH_ECHO = 377;
    const T_CLOSE_TAG = 378;
    const T_WHITESPACE = 379;
    const T_START_HEREDOC = 380;
    const T_END_HEREDOC = 381;
    const T_DOLLAR_OPEN_CURLY_BRACES = 382;
    const T_CURLY_OPEN = 383;
    const T_PAAMAYIM_NEKUDOTAYIM = 384;
    const T_NAMESPACE = 385;
    const T_NS_C = 386;
    const T_DIR = 387;
    const T_NS_SEPARATOR = 388;
    const T_ELLIPSIS = 389;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,   50,  154,  155,  151,   49,   33,  155,
          149,  150,   47,   44,    7,   45,   46,   48,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,   27,  146,
           38,   13,   40,   26,   62,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,   64,  155,  153,   32,  155,  152,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  147,   31,  148,   52,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
          155,  155,  155,  155,  155,  155,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   30,   34,   35,   36,   37,   39,   41,   42,   43,
           51,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           63,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,  155,  155,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  155,  155,  155,  155,  155,  155,
          136,  137,  138,  139,  140,  141,  142,  143,  144,  145
    );

    protected $action = array(
           60,   61,  414,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,  220,  221,  222,  223,  224,  225,  226,  227,  228,
          229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
          239,  240,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,
        -32767,  283,   66,   67,  299,  241,  242, 1050,   68,    0,
           69,  292,  293,   70,   71,   72,   73,   74,   75,   76,
           77,  219,   32,  302,   78,  406,  415,  764,  765,  411,
          953,  954,  455,  436, 1046,  332,  686,  201,  456,   46,
           27,  416,  135,  457,  807,  458,  558,  459,  434, -122,
          417,  217,  218,  219,   36,   37,  460,  422,  361,   38,
          461,  418,  407,   79,-32766,-32766,  354,  355,  321,  201,
          245,  127,  462,  463,  464,  465,  466,  711,   58, 1012,
          132,  646,  712,  467,  468,  469,  470,  905,  959,  960,
          961,  962,  956,  957,  310,   83,   84,   85,  469,  483,
          963,  958,  419,  334,  692,  609,  131,   47,  296,  335,
          322,  452,  326,   40,  133,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,  102,  103,  104,  105,  106,  107,  439,  303,  324,
          296,  431,  413,-32766, 1053,-32766,-32766,-32766,  373,  640,
          108,   35, 1078,-32766, 1080, 1079,-32766,-32766,-32766,  208,
        -32766,  126,-32766,-32766,-32766,-32766,-32766,-32766,  217,  218,
          219,-32766,-32766,-32766,  438,-32766,-32766,-32766,-32766,-32766,
        -32766,  640,   31,-32766,  482,-32766,  201,  684,-32766,-32766,
        -32766,-32766,-32766,  905,-32766,  608,-32766,  683, 1075,-32766,
          218,  219,  599,-32766,-32766,-32766,  308,  418,-32766,-32766,
           39,  295,-32766, 1068,  294,-32766,  482,  201,  462,  463,
          130,-32766,-32766,-32766,  780,  905,  337,  668,  712,  467,
          468,   41,  109,  110,  111,  112,  113,  114,  115,  116,
          117,  118,  119,  120,  298,  411,  284,  131, 1040,-32766,
          789,  332,  130,-32766,-32766,  640,  619,  770,  566,-32766,
          807,  432,-32766,-32766,-32766,  740,-32766,  799,-32766,  411,
        -32766,  845,  847,-32766,  433,  332,  794,-32766,-32766,-32766,
           22,-32766,-32766,-32766,  807,  920,-32766,  640, 1009,-32766,
          482,-32766,  905,  709,-32766,-32766,-32766,-32766,-32766,  285,
        -32766,  640,-32766,  353,   57,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766, 1068, 1003,-32766,-32766,  965,  710,-32766,  351,
          352,-32766,  482,  343,  905,  771,-32766,-32766,-32766,-32766,
        -32767,-32767,-32767,-32767,  100,  101,  102,  103,  104,  129,
          238,  239,  240, -396,-32766,-32766,-32766, 1046,-32766,-32766,
        -32766,-32766,-32766,-32766,  640,  383,  241,  242,-32766,-32766,
        -32766,-32766,-32766,-32766,  410,-32766,  327,-32766,  483,-32766,
         1010,  419,-32766,  235,  236,  237,-32766,-32766,-32766, 1011,
        -32766,-32766,-32766,  342,  741,-32766,  640,  124,-32766,  482,
        -32766,  905,  281,-32766,-32766,-32766,-32766,-32766,  121,-32766,
           54,-32766,  246,   55,-32766,  102,  103,  104,-32766,-32766,
        -32766,  211,  297,-32766,-32766,  210, -118,-32766,  241,  242,
        -32766,  482,  335,  905,  965, 1012,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,  209,  428,  530,  201,  611,-32766,  247,  217,
          218,  219,  632,  640,  217,  218,  219,-32766,-32766,-32766,
        -32766,-32766,-32766,  625,-32766,  134,-32766,  201,-32766,  136,
          362,-32766,  201,  446,  572,-32766,-32766,-32766,  614,-32766,
        -32766,-32766,  696,  122,-32766,  640,  123,-32766,  482,-32766,
          905,  629,-32766,-32766,-32766,-32766,-32766,  624,-32766,  309,
        -32766,  441,   28,-32766,  579,  580,  560,-32766,-32766,-32766,
          764,  765,-32766,-32766,  804,  635,-32766,  418,  621,-32766,
          482,  418,  905,  793,  628,-32766,-32766,-32766,  462,  463,
          647,  616,  462,  463,  612,-32766,  705,  668,  712,  467,
          468,  668,  712,  467,  468,  303,-32766,  108,  302,   51,
           59,   56,  640,  217,  218,  219,-32766,  676,-32766,-32766,
        -32766,-32766,   53,-32766,   52,-32766,  669,-32766,   50,   49,
        -32766,  201,  584,  607,-32766,-32766,-32766,  576,-32766,-32766,
        -32766,  340,  429,-32766,  640,  596,-32766,  482,-32766,  905,
          521,-32766,-32766,-32766,-32766,-32766, 1004,-32766,  520,-32766,
          427,  640,-32766,  801,  641,  508,-32766,-32766,-32766,  657,
          504,-32766,-32766, 1073,  659,-32766,  503, -170,-32766,  482,
          507,  418,  407,  581,  678,-32766,-32766,  418,  321,  591,
          923,  598,  462,  463,-32766,-32766,-32766,  341,  462,  463,
         1068,  646,  712,  467,  468,-32766,  430,  668,  712,  467,
          468,  640,-32766,  551,  714,-32766,  680,-32766,-32766,-32766,
        -32766,  280,-32766,  334,-32766,  301,-32766,  523,  575,-32766,
          648,  243,  244,-32766,-32766,-32766,  708, -167,-32766,-32766,
          418,  407,-32766,  563,  426,-32766,  482,  321,  450,  212,
          213,  462,  463,-32766,  333,  214,  336,  215,  713,  469,
          646,  712,  467,  468,  331,  330,  964,  313, -396,  206,
          815,  816,  817,  814,  813,  812, -397,  953,  954,  323,
        -32766,-32766,  334,-32766,-32766,  955,  640,  325, -303,  649,
        -32766,  125,   42,-32766,-32766,-32766, -295,-32766,  604,-32766,
          376,-32766,  707,  363,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,  329, -304,-32766,-32766,  790,  798,-32766,  513,  428,
        -32766,  482,  410,-32766,  128,-32766,-32766,-32766,-32766,  650,
          105,  106,  107,  548,  303,  959,  960,  961,  962,  956,
          957,  389,  685,  212,  213,  724,  108,  963,  958,  214,
          726,  215,  728,  671,  216,  735,-32766,  734,-32766,-32766,
          743,  688,  946,  206,  673,  695,  682,  618,-32766,  617,
           45,  953,  954,   44,  640,-32766,  653,  652,-32766,  955,
          651,-32766,-32766,-32766,  800,-32766,  694,-32766,  681,-32766,
          679,  677,-32766,  687,  797,  409,-32766,-32766,-32766,   82,
          418,-32766,-32766,  610,  615,-32766,  620,  622,-32766,  482,
          627,  462,  463,  630,  631,  633,-32766,  634,  405,  733,
          668,  712,  467,  468,  732,  445, 1074,  548, 1047,  959,
          960,  961,  962,  956,  957,  389,-32766,-32766,-32766, 1045,
         1031,  963,  958, 1043, 1041,  903,-32766,-32766,  216,  805,
        -32766,-32766,-32766,-32766,-32766, 1051,-32766,-32766,-32766,-32766,
        -32766,-32766,-32767,-32767,-32767,-32767,-32766,-32766,-32766,-32766,
         1076,-32766,-32766,-32766,-32766,-32766,-32766, 1077,  782,  944,
          418,  338,   33,   34,-32766,  418,-32766,-32766,-32766,-32766,
        -32766,  462,  463,   43,   48,  307,  462,  463,  418,  306,
          668,  712,  467,  468,  418,  668,  712,  467,  468,  462,
          463,   80,-32766,  305,  304,  462,  463,  597,  668,  712,
          467,  468,  291,  290,  668,  712,  467,  468,  418,  699,
          606,  282,  207,  640,  907, 1046,   81,   30,  582,  462,
          463,  885,  552,  418,  884,  908, -119,  906,  668,  712,
          467,  468,  588,  701,  462,  463,-32766,-32766,-32766,  969,
          772,  418,  912,  668,  712,  467,  468,  909,  930,  603,
          543,  453,  462,  463,-32766,  418,-32766,-32766,-32766,-32766,
          449,  668,  712,  467,  468,  447,  462,  463,  442,  384,
           25,   24,   23,    0,    0,  668,  712,  467,  468, -118,
          483, 1025,    0,  419,  970, 1072,  943, 1042,  423, 1026,
          335,    0,    0, 1030, 1044,    0,  929,  916,  917,  914,
          915,  913
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,   30,   31,   32,   11,
           12,   29,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   29,   30,   31,   32,   33,   34,   35,   36,
           37,    7,   44,   45,   33,   63,   64,   74,   50,    0,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   10,   64,   65,   66,   67,   68,  128,  129,  100,
           72,   73,   74,   74,   76,  106,   78,   26,   80,   81,
           82,   83,  147,   85,  115,   87,  151,   89,    7,  150,
           92,    8,    9,   10,   96,   97,   98,   99,    7,  101,
          102,   99,  100,  105,    8,    9,  108,  109,  106,   26,
           27,    7,  110,  111,  116,  117,  118,  148,   64,  120,
          147,  119,  120,  121,  122,  127,  128,   12,  130,  131,
          132,  133,  134,  135,  136,    8,    9,   10,  127,  141,
          142,  143,  144,  141,  146,  147,  147,  149,   33,  151,
          152,    7,  154,   26,   64,   28,   29,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,    7,   51,  125,
           33,   27,    7,   68,  150,    8,    9,   10,   76,   74,
           63,    7,   74,   78,   76,   77,   81,   82,   83,    7,
           85,  147,   87,   26,   89,   28,   29,   92,    8,    9,
           10,   96,   97,   98,   74,   68,  101,  102,   29,   30,
          105,   74,    7,  108,  109,   78,   26,  146,   81,   82,
           83,  116,   85,   12,   87,   74,   89,  146,  148,   92,
            9,   10,   74,   96,   97,   98,    7,   99,  101,  102,
          138,  139,  105,   79,   33,  108,  109,   26,  110,  111,
          145,  146,  147,  116,   76,   12,    7,  119,  120,  121,
          122,   13,   14,   15,   16,   17,   18,   19,   20,   21,
           22,   23,   24,   25,    7,  100,   33,  147,   76,   68,
          146,  106,  145,  146,  147,   74,  148,  150,   79,   78,
          115,  147,   81,   82,   83,   27,   85,  146,   87,  100,
           89,   53,   54,   92,    7,  106,  148,   96,   97,   98,
          150,   68,  101,  102,  115,  150,  105,   74,  154,  108,
          109,   78,   12,  148,   81,   82,   83,  116,   85,  151,
           87,   74,   89,    7,   64,   92,    8,    9,   10,   96,
           97,   98,   79,  153,  101,  102,  137,  148,  105,   99,
          100,  108,  109,  151,   12,  150,    8,  146,  147,  116,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   27,
           47,   48,   49,  125,   29,   30,   31,   76,   68,   29,
           30,   31,   32,   33,   74,   75,   63,   64,   78,  146,
          147,   81,   82,   83,  144,   85,   79,   87,  141,   89,
          137,  144,   92,   44,   45,   46,   96,   97,   98,   74,
           68,  101,  102,   64,  146,  105,   74,  147,  108,  109,
           78,   12,  126,   81,   82,   83,  116,   85,   13,   87,
           64,   89,   13,   64,   92,   44,   45,   46,   96,   97,
           98,   13,   33,  101,  102,   13,  150,  105,   63,   64,
          108,  109,  151,   12,  137,  120,  146,  147,  116,   29,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   13,  144,  125,   26,  147,   68,   13,    8,
            9,   10,   27,   74,    8,    9,   10,   78,  146,  147,
           81,   82,   83,   27,   85,   27,   87,   26,   89,   94,
           95,   92,   26,   69,   70,   96,   97,   98,   27,   68,
          101,  102,   27,  147,  105,   74,  147,  108,  109,   78,
           12,   27,   81,   82,   83,  116,   85,   27,   87,   27,
           89,   69,   70,   92,  103,  104,   84,   96,   97,   98,
          128,  129,  101,  102,  146,  147,  105,   99,   27,  108,
          109,   99,   12,  146,  147,  146,  147,  116,  110,  111,
          146,  147,  110,  111,   27,   29,   33,  119,  120,  121,
          122,  119,  120,  121,  122,   51,   68,   63,   65,   64,
           64,   64,   74,    8,    9,   10,   78,  146,  147,   81,
           82,   83,   64,   85,   64,   87,  148,   89,   64,   64,
           92,   26,   71,   74,   96,   97,   98,  106,   68,  101,
          102,   79,   74,  105,   74,   74,  108,  109,   78,   12,
           74,   81,   82,   83,  116,   85,  150,   87,   74,   89,
           74,   74,   92,   74,   74,   74,   96,   97,   98,   74,
           74,  101,  102,   74,   74,  105,   74,   76,  108,  109,
           76,   99,  100,   76,  146,  147,  116,   99,  106,   76,
           76,   76,  110,  111,    8,    9,   10,   79,  110,  111,
           79,  119,  120,  121,  122,   68,   83,  119,  120,  121,
          122,   74,   26,   91,  120,   78,  146,  147,   81,   82,
           83,   91,   85,  141,   87,   91,   89,   91,   93,   92,
          148,  126,   27,   96,   97,   98,  148,   91,  101,  102,
           99,  100,  105,   93,   99,  108,  109,  106,   99,   44,
           45,  110,  111,  116,  107,   50,  123,   52,  120,  127,
          119,  120,  121,  122,  124,  123,  137,  140,  125,   64,
          109,  110,  111,  112,  113,  114,  125,   72,   73,  125,
           68,   76,  141,  146,  147,   80,   74,  125,  140,  148,
           78,  126,  126,   81,   82,   83,  140,   85,  140,   87,
          140,   89,  145,  140,   92,    8,    9,   10,   96,   97,
           98,  140,  140,  101,  102,  146,  146,  105,  144,  144,
          108,  109,  144,   26,  147,   28,   29,   30,  116,  146,
           47,   48,   49,  128,   51,  130,  131,  132,  133,  134,
          135,  136,  146,   44,   45,  146,   63,  142,  143,   50,
          146,   52,  146,  146,  149,  146,  151,  146,  146,  147,
          146,  146,  150,   64,  146,  146,  146,  146,   68,  146,
          146,   72,   73,  146,   74,   76,  146,  146,   78,   80,
          146,   81,   82,   83,  146,   85,  146,   87,  146,   89,
          146,  146,   92,  146,  146,  149,   96,   97,   98,  147,
           99,  101,  102,  147,  147,  105,  147,  147,  108,  109,
          147,  110,  111,  147,  147,  147,  116,  147,  149,  148,
          119,  120,  121,  122,  148,  148,  148,  128,  148,  130,
          131,  132,  133,  134,  135,  136,    8,    9,   10,  148,
          148,  142,  143,  148,  148,  152,  146,  147,  149,  148,
          151,    8,    9,   10,   26,  148,   28,   29,   30,   31,
           32,   33,   34,   35,   36,   37,    8,    9,   10,   26,
          148,   28,   29,   30,   31,   32,   33,  148,  148,  148,
           99,  149,  149,  149,   26,   99,   28,   29,   30,   31,
           32,  110,  111,  149,  149,  149,  110,  111,   99,  149,
          119,  120,  121,  122,   99,  119,  120,  121,  122,  110,
          111,  149,  149,  149,  149,  110,  111,   88,  119,  120,
          121,  122,  149,  149,  119,  120,  121,  122,   99,  148,
           86,  149,  149,   74,  148,   76,  149,  149,  153,  110,
          111,  150,  150,   99,  150,  150,  150,  148,  119,  120,
          121,  122,   90,  148,  110,  111,    8,    9,   10,  150,
          150,   99,  150,  119,  120,  121,  122,  150,  109,  150,
          150,  150,  110,  111,   26,   99,   28,   29,   30,   31,
          150,  119,  120,  121,  122,  150,  110,  111,  150,  150,
          150,  150,  150,   -1,   -1,  119,  120,  121,  122,  150,
          141,  153,   -1,  144,  153,  153,  153,  153,  149,  153,
          151,   -1,   -1,  153,  153,   -1,  153,  153,  153,  153,
          153,  153
    );

    protected $actionBase = array(
            0,  621,  562,    2,  458,  148,  462,  942,  909,  885,
          568,  879,  924,  866,  861,  781,  956,  956,  956,  956,
          956,  491,  531,  476,  465,  476,  547,   -2,   -2,   -2,
          147,  115,  221,  221,  692,  221,  451,  518,  550,  320,
          352,  253,  419,  617,  617,  617,  617,  780,  780,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
          617,  617,  617,  617,  617,  617,  617,  278,  727,  645,
          646,  725,  724,  722,  720,  875,  610,  871,  758,  760,
          478,  771,  772,  775,  811,  810,  757,  787,  865,  776,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  585,  486,   83,  200,  358,  481,  481,  481,  481,
          481,  481,   96,  231,  338,  338,  338,  338,  338,  338,
          338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
           51,  685,  666,  666,  666,  459,  779,  779,  779,  779,
          779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
          779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
          779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
          779,  779,  779,  779,  779,  779,  779,  779,  -18,  -18,
          177,  546,  777,  189, 1028,  355,  938,  -24,  923,  908,
          908,  908,  908,  360,    3,    3,    3,    3,  258,  332,
          332,  332,  332,  440,  440,  440,  440,  -31,  209,  185,
           11,   11,  612,  612,  523,  657,  401,  401,  369,  369,
          939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
          581,  539,  843,  843,  -61,  -61,  -61,  -61,  422,  422,
          327,  273,  174,   -1,  763,  763,  763,  333,  333,  333,
          168,  260,  542,  -27,  -27,  -27,  598,  609,  601,  140,
          267,  267,  267,  267,  339,  732,  267,  267,  267,  379,
          112,  112,  118,  -65,  630,  756,  615,  751,  417,  652,
           54,  658,  658,  658,  188,  625,  472,  444,  441,  636,
          154,  188,  278,  345,  408,  280,  534,  676,  556,  710,
          663,   91,   81,  359,  424,  376,  212,  170,  714,  711,
          872,  874,   34,   90,  631,  534,  534,  534,  215,  219,
          376,  306,  395,  395,  395,  395,  395,  395,  395,  395,
          649,  144,  175,  728,  161,  543,  814,  576,  868,  564,
          567,  576,  587,  543,  825,  825,  825,  825,  543,  567,
          868,  868,  543,  523,  868,  184,  543,  622,  567,  613,
          825,  703,  701,  576,  584,  620,  868,  868,  868,  564,
          543,  825,  511,  637,  192,  868,  825,  512,  512,  511,
          543,  512,  587,  512,   49,  495,  545,  824,  842,  726,
          582,  736,  618,  574,  854,  853,  867,  571,  566,  862,
          813,  654,  700,  548,  425,  544,  525,  540,  538,  607,
          527,  634,  625,  655,  524,  524,  524,  623,  651,  623,
          524,  524,  524,  524,  524,  524,  524,  524,  948,  640,
          628,  642,  603,  699,  469,  654,  616,  442,  737,  654,
          897,  919,  773,  570,  845,  900,  623,  947,  707,  104,
          438,  844,  602,  575,  623,  830,  623,  739,  623,  892,
          579,  809,  654,  524,  890,  946,  945,  944,  943,  941,
          940,  936,  934,  526,  933,  698,  918,  239,  863,  636,
          643,  580,  695,  259,  932,  623,  623,  740,  732,  623,
          694,  704,  922,  691,  915,  931,  609,  910,  623,  629,
          928,  259,  510,  541,  876,  689,  749,  593,  889,  812,
          743,  429,  802,  504,  687,  921,  920,  929,  686,  746,
          747,  475,  551,  594,  595,  748,  826,  684,  899,  626,
          638,  627,  614,  750,  569,  901,  679,  718,  650,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,    0,    0,    0,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  -18,  -18,  -18,
          -18,  127,  -18,  -18,  -18,  -18,  -18,  -18,  127,  -18,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  -18,  939,  127,  127,
          127,  -18,  939,  939,  939,  939,  939,  939,  939,  939,
          939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
          939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
          939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
          939,  939,  939,  939,    0,    0,  127,  -18,  127,  -18,
          127,  -18,  127,  -18,  127,  127,  127,  127,  127,  -18,
          -18,  -18,  -18,  -18,    0,  763,  763,  763,  763,  -18,
          -18,  -18,  -18,  641,  641,  641,  939,  939,  939,  939,
          939,  939,  763,  763,  333,  333,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  641,  641,  939,  939,
          267,  267,  267,  267,  267,  267,  112,  112,  112,  212,
            0,    0,    0,    0,    0,    0,  267,  567,  112,  311,
          311,  311,  112,  112,  112,  212,    0,    0,    0,    0,
          567,  311,    0,    0,    0,  868,    0,    0,    0,  311,
          415,  415,  415,  415,  259,  376,    0,  567,  567,  567,
            0,  584,    0,    0,    0,  868,    0,    0,    0,    0,
            0,    0,  524,  104,  845,  307,  336,    0,    0,    0,
            0,    0,    0,    0,  336,  336,  277,  277,    0,    0,
          526,  524,  524,  524,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  307,    0,    0,  259
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  111,  103,  117,  102,
          113,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  423,  423,32767,  380,32767,32767,32767,32767,
        32767,32767,32767,  188,  188,  188,32767,32767,32767,  412,
          412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
        32767,32767,32767,32767,32767,  269,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  274,
          428,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          250,  251,  253,  254,  187,  413,  139,  275,  427,  186,
          141,  384,32767,32767,32767,  215,   26,  150,   95,  383,
          185,  126,  217,  338,  268,  216,  192,  197,  198,  199,
          200,  201,  202,  203,  204,  205,  206,  207,  208,  191,
          340,32767,  247,  246,  245,  339,  377,  377,  380,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  366,  365,
          213,  336,  214,  337,  218,  341,  220,  343,  219,  236,
          237,  234,  235,  342,  359,  360,  357,  358,  190,  238,
          239,  240,  241,  361,  362,  363,  364,  172,  172,  172,
        32767,32767,  422,  422,32767,32767,  227,  228,  350,  351,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          173,32767,32767,32767,  130,  130,  130,  130,  130,32767,
        32767,32767,32767,32767,  222,  223,  221,  345,  346,  344,
        32767,32767,  312,32767,32767,32767,32767,32767,  314,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  385,
          313,32767,32767,32767,32767,32767,32767,32767,32767,  398,
          301,32767,32767,32767,32767,  294,  114,  116,   64,  369,
        32767,32767,32767,32767,32767,  403,  232,32767,32767,32767,
        32767,32767,32767,  435,32767,  398,32767,32767,32767,32767,
        32767,32767,32767,32767,  244,  224,  225,  226,32767,32767,
          402,  396,  353,  354,  355,  356,  347,  348,  349,  352,
        32767,32767,32767,32767,32767,   68,  309,32767,  315,32767,
        32767,32767,32767,   68,32767,32767,32767,32767,   68,32767,
          401,  400,   68,32767,  295,  379,   68,   81,32767,   79,
        32767,  100,  100,32767,32767,   83,  375,  391,32767,32767,
           68,32767,  283,   70,  379,32767,32767,  132,  132,  283,
           68,  132,32767,  132,32767,    4,  319,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  296,32767,32767,32767,  265,  266,  372,  387,32767,
          388,32767,  294,32767,  230,  231,  233,  210,32767,  212,
          255,  256,  257,  258,  259,  260,  261,  263,32767,32767,
          299,  302,32767,32767,32767,    6,   20,  149,32767,  297,
        32767,  195,32767,32767,32767,32767,  430,32767,32767,  189,
        32767,32767,   22,32767,  145,32767,   66,32767,  420,32767,
        32767,  396,  298,  229,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  397,32767,32767,32767,  121,32767,  332,
        32767,32767,32767,   82,32767,  193,  140,32767,32767,  429,
        32767,32767,32767,32767,32767,32767,32767,32767,   67,32767,
        32767,   84,32767,32767,  396,32767,32767,32767,32767,32767,
        32767,  184,32767,32767,32767,32767,32767,  396,32767,32767,
        32767,  125,32767,32767,32767,32767,32767,32767,32767,    4,
        32767,  166,32767,32767,32767,32767,32767,32767,32767,   28,
           28,    3,   28,  108,   28,  152,    3,  100,  100,   61,
          152,   28,  152,   28,   28,   28,   28,   28,  159,   28,
           28,   28,   28,   28,   28,   28
    );

    protected $goto = array(
          166,  166,  140,  140,  145,  140,  141,  142,  143,  148,
          150,  186,  168,  164,  164,  164,  164,  145,  145,  165,
          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
          160,  161,  162,  163,  184,  139,  484,  485,  366,  486,
          490,  491,  492,  493,  494,  495,  496,  497,  832,  144,
          146,  147,  149,  175,  182,  185,  202,  250,  252,  254,
          256,  258,  259,  260,  261,  262,  269,  270,  271,  272,
          286,  287,  314,  315,  316,  385,  386,  387,  533,  187,
          188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
          198,  199,  151,  152,  153,  167,  154,  169,  155,  203,
          170,  156,  157,  158,  204,  159,  137,  549,  756,  756,
         1057, 1057,  549,  549,  549,  549,  549,  549,  549,  549,
          549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
          549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
          549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
          549,  549,  549,  549,  488,  488,  488,  488,  488,  488,
         1036, 1036,  690,  511,  488,  488,  488,  488,  488,  488,
          488,  488,  488,  488,    1,  590,  499,  499,  595,    2,
          364, 1052, 1052, 1052,  561,  585,  424,  424,  424,  424,
          424,  424,  278, 1035,  279,  774,  424,  424,  424,  424,
          424,  424,  424,  424,  424,  424,  345,  529,  931,  931,
          763,  763,  763,  763,  763,  763,  535,  536,  537,  538,
          539,  540,  541,  542,  544,  570,  600,  645,  645,  645,
          644,  644,  644,  564,  567,  605,  721,  721,  721,  721,
          550, 1061,  716,  722,  594,  550,  550,  550,  550,  550,
          550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
          550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
          550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
          550,  550,  550,  550,  550,  550,  550,  966,  571,  348,
          403,  367,  966,  966,  966,  966,  966,  966,  966,  966,
          966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
          966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
          966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
          966,  966,  966,  966,  328,  173,  811,  404,  312,  501,
          501,  500,  500,  176,  177,  178,  392,  393,  394,  395,
          172,  183,  200,  205,  251,  253,  255,  257,  263,  264,
          265,  266,  267,  273,  274,  275,  276,  288,  289,  317,
          318,  319,  396,  397,  398,  399,  174,  179,  248,  249,
          180,  181,    5, 1029,   16,  578,    6,  374, 1017, 1037,
         1037,  346,  347,    7,  586,   17,   18,    8,   19,    9,
          830,   20,   10,   11,   12,   13,   14,   15,  391,  587,
          528,  528,  555,  524,  643,  643,  643,  505,  526,  526,
          487,  489,  516,  531,  556,  559,  568,  574, 1067, 1067,
          505,  942,  941, 1054,  742,  727,  725,  723,  725,  613,
          502,  751,  746,  381, 1070, 1067,  368,  505,  505,  505,
          514,  947,  952,  760,  525,  378,  379, 1070, 1070,  888,
           26,   21,  360,  522,  927,  928,  878,  769,  443,  778,
          400,  654,  375,  375,  375,  545,  623,  922,  592,  534,
          925, 1028,  925,  510,  375,  967,   29,  660,  730,  926,
          783,  583,  390,  819, 1014,  451,  510,  510,    0,    0,
            0,    0,    0,    0,    0,    0,  505,    0,    0,    0,
            0,    0,    0,    0,    0,  509,    0,    0,    0,    0,
            0,    0,    0,    0,  532,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  515
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   39,   56,   56,
           56,   56,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   94,   94,   94,   94,   94,   94,
           96,   96,   32,   79,   94,   94,   94,   94,   94,   94,
           94,   94,   94,   94,    2,   43,   94,   94,   43,    2,
           43,   96,   96,   96,   22,   22,   39,   39,   39,   39,
           39,   39,   47,   96,   47,   63,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   51,   87,   39,   39,
           39,   39,   39,   39,   39,   39,   88,   88,   88,   88,
           88,   88,   88,   88,   88,   88,   39,    8,    8,    8,
            7,    7,    7,   42,   42,   42,   39,   39,   39,   39,
           97,  118,   39,   39,   39,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
           97,   97,   97,   97,   97,   97,   97,  104,   49,   49,
           49,   29,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
          104,  104,  104,  104,  103,   13,   76,   76,  103,  100,
          100,   97,   97,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   14,   61,   14,  106,   14,    5,  110,   95,
           95,   51,   51,   14,   31,   14,   14,   14,   14,   14,
           79,   14,   14,   14,   14,   14,   14,   14,   33,   33,
           33,   33,   33,   33,    6,    6,    6,    4,   33,   33,
           33,   33,   33,   33,   33,   33,   33,   33,  119,  119,
            4,  102,  102,  116,    6,    6,    6,    6,    6,    6,
            6,    6,    6,   30,  119,  119,   40,    4,    4,    4,
           40,   16,   61,   58,   40,    9,    9,  119,  119,   16,
           16,   16,   16,    5,   61,   61,   80,   60,   40,   64,
           10,   11,  101,  101,  101,   16,   53,   92,   40,   26,
           61,   61,   61,   26,  101,  105,   16,   12,   50,   61,
           65,   16,  101,   78,  109,   86,   26,   26,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   79
    );

    protected $gotoBase = array(
            0,    0, -437,    0,   96,   53,  413,  229,  226,  104,
           59,  118,   54,  134, -228,    0,   45,    0,    0,    0,
            0,    0,  140,    0,    0,  -30,  449,    0,    0,  245,
          152,  113,  137,  128,    0,    0,    0,    0,    0,  -94,
           28,    0,  -72, -273,    0,    0,    0, -428,    0,  -43,
           49, -226,    0,  114,    0,    0, -172,    0,  145,    0,
          158,   44,    0,  164,  108,   56,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   36,    0,   41,  116,
          163,    0,    0,    0,    0,    0,   46,  174,  166,    0,
            0,    0,   64,    0, -126,   87, -142,   39,    0,    0,
           37,  149,  107,   12,   86,  122,  178,    0,    0,   50,
          180,    0,    0,    0,    0,    0,  150,    0,  206,  117,
            0
    );

    protected $gotoDefault = array(
        -32768,  454,    3,  638,  471,  506,  665,  666,  667,  370,
          369,  655,  661,  171,    4,  663,  879,  356,  670,  357,
          573,  672,  518,  674,  675,  138,  472,  371,  372,  519,
          380,  562,  689,  268,  377,  691,  358,  693,  698,  359,
          593,  577,  546,  589,  473,  435,  557,  277,  527,  553,
          729,  344,  737,  626,  745,  748,  474,  547,  759,  440,
          767,  924,  388,  773,  779,  784,  787,  412,  401,  569,
          791,  792,  320,  796,  601,  602,  810,  300,  818,  831,
          408,  898,  900,  475,  476,  512,  448,  498,  517,  477,
          918,  402,  921,  478,  479,  420,  421,  939,  936,  350,
         1022,  349,  437,  311, 1007, 1006,  565,  971,  444, 1060,
         1018,  339,  480,  481,  365,  382, 1055,  425, 1062, 1069,
          554
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   44,   44,   44,   45,
           45,   48,   48,   46,   46,   49,   49,   23,   23,   32,
           32,   35,   35,   34,   34,   50,   24,   24,   24,   24,
           51,   51,   52,   52,   53,   53,   21,   21,   17,   17,
           54,   19,   19,   55,   18,   18,   20,   20,   31,   31,
           31,   42,   42,   57,   57,   58,   58,   60,   60,   60,
           59,   59,   43,   43,   61,   61,   61,   62,   62,   63,
           63,   63,   27,   27,   64,   64,   64,   28,   28,   65,
           65,   47,   47,   66,   66,   66,   66,   71,   71,   72,
           72,   73,   73,   73,   73,   74,   75,   75,   70,   70,
           67,   67,   69,   69,   77,   77,   76,   76,   76,   76,
           76,   76,   68,   68,   78,   78,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   16,   16,   26,   26,   83,   83,   84,   84,
           84,   84,   79,   86,   86,   91,   91,   92,   93,   93,
           93,   93,   93,   93,   97,   97,   39,   39,   39,   80,
           80,   98,   98,   94,   94,   99,   99,   99,   99,   81,
           81,   81,   85,   85,   85,   90,   90,  104,  104,  104,
          104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
           13,   13,   13,   13,   13,   13,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,  107,  107,  107,  107,  107,  107,   89,
           89,   82,   82,   82,   82,  105,  105,  106,  106,  109,
          109,  108,  108,  110,  110,   33,   33,   33,   33,  112,
          112,  111,  111,  111,  111,  111,  113,  113,   96,   96,
          100,  100,   95,   95,  114,  114,  114,  114,  101,  101,
          101,  101,   88,   88,  102,  102,  102,   56,  115,  115,
          116,  116,  116,   87,   87,  117,  117,  118,  118,  118,
          118,  103,  103,  103,  103,  119,  119,  119,  119,  119,
          119,  119,  120,  120,  120
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   10,    7,    6,    5,    1,    2,    2,    0,
            2,    0,    2,    0,    2,    1,    3,    1,    4,    1,
            4,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    1,    3,    5,    4,    3,    4,    4,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    1,    1,    1,    3,    2,    1,
           10,   11,    3,    3,    2,    4,    4,    3,    4,    4,
            4,    4,    3,    0,    4,    1,    3,    2,    2,    4,
            6,    2,    2,    4,    1,    1,    1,    2,    3,    1,
            1,    1,    1,    1,    1,    3,    3,    4,    4,    0,
            2,    1,    0,    1,    1,    0,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
            1,    3,    1,    4,    3,    1,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    5,    4,    4,    3,    1,
            3,    1,    1,    3,    3,    1,    1,    0,    2,    0,
            1,    3,    1,    3,    1,    1,    1,    1,    1,    6,
            4,    3,    4,    2,    4,    4,    1,    3,    1,    2,
            1,    1,    4,    1,    3,    6,    4,    4,    4,    4,
            1,    4,    0,    1,    1,    3,    1,    4,    3,    1,
            1,    1,    0,    0,    2,    3,    1,    3,    1,    4,
            2,    2,    2,    1,    2,    1,    4,    3,    3,    3,
            6,    3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule62($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule64($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule69($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(10-3)], array('byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule80($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule86($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule87($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule95($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule96($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule99($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule101($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule102($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule103($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule104() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule107($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule108($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule109($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule110($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule111($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule112($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule113($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule114($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule117($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule124($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule125($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule126($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule129($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule136($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule137($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule138($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule140($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule141($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule142($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule143($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule146($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule147($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule150($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule151($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule152($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], array('type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule156($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule160($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule165($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule185($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule186($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Cast\Int($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Cast\String($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Cast\Object($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $attributes); 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule283($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule286($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule287($attributes) {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule288($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule289($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule291($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule292($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule297($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule298($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule303($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule312($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = array(Node\Scalar\String::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule314($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule315($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule320($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = new Node\Scalar\String('', $attributes); 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule369($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule370($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule372($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule373($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule374($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule375($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule376($attributes) {
         $this->semValue = 'class'; 
    }

    protected function reduceRule377($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule378($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule379() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule380() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule381($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule382($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule385($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule386($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule387($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule414($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule417($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule418($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule419($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule421($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule424($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule425($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule426($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule427($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule428($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule430($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule431($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule432($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule433($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule438($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule444($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
