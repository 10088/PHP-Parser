<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 1169;
    protected $gotoTableSize = 579;

    protected $invalidSymbol = 157;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 409;
    protected $YYNLSTATES   = 646;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_YIELD_FROM = 267;
    const T_PLUS_EQUAL = 268;
    const T_MINUS_EQUAL = 269;
    const T_MUL_EQUAL = 270;
    const T_DIV_EQUAL = 271;
    const T_CONCAT_EQUAL = 272;
    const T_MOD_EQUAL = 273;
    const T_AND_EQUAL = 274;
    const T_OR_EQUAL = 275;
    const T_XOR_EQUAL = 276;
    const T_SL_EQUAL = 277;
    const T_SR_EQUAL = 278;
    const T_POW_EQUAL = 279;
    const T_COALESCE = 280;
    const T_BOOLEAN_OR = 281;
    const T_BOOLEAN_AND = 282;
    const T_IS_EQUAL = 283;
    const T_IS_NOT_EQUAL = 284;
    const T_IS_IDENTICAL = 285;
    const T_IS_NOT_IDENTICAL = 286;
    const T_SPACESHIP = 287;
    const T_IS_SMALLER_OR_EQUAL = 288;
    const T_IS_GREATER_OR_EQUAL = 289;
    const T_SL = 290;
    const T_SR = 291;
    const T_INSTANCEOF = 292;
    const T_INC = 293;
    const T_DEC = 294;
    const T_INT_CAST = 295;
    const T_DOUBLE_CAST = 296;
    const T_STRING_CAST = 297;
    const T_ARRAY_CAST = 298;
    const T_OBJECT_CAST = 299;
    const T_BOOL_CAST = 300;
    const T_UNSET_CAST = 301;
    const T_POW = 302;
    const T_NEW = 303;
    const T_CLONE = 304;
    const T_EXIT = 305;
    const T_IF = 306;
    const T_ELSEIF = 307;
    const T_ELSE = 308;
    const T_ENDIF = 309;
    const T_LNUMBER = 310;
    const T_DNUMBER = 311;
    const T_STRING = 312;
    const T_STRING_VARNAME = 313;
    const T_VARIABLE = 314;
    const T_NUM_STRING = 315;
    const T_INLINE_HTML = 316;
    const T_CHARACTER = 317;
    const T_BAD_CHARACTER = 318;
    const T_ENCAPSED_AND_WHITESPACE = 319;
    const T_CONSTANT_ENCAPSED_STRING = 320;
    const T_ECHO = 321;
    const T_DO = 322;
    const T_WHILE = 323;
    const T_ENDWHILE = 324;
    const T_FOR = 325;
    const T_ENDFOR = 326;
    const T_FOREACH = 327;
    const T_ENDFOREACH = 328;
    const T_DECLARE = 329;
    const T_ENDDECLARE = 330;
    const T_AS = 331;
    const T_SWITCH = 332;
    const T_ENDSWITCH = 333;
    const T_CASE = 334;
    const T_DEFAULT = 335;
    const T_BREAK = 336;
    const T_CONTINUE = 337;
    const T_GOTO = 338;
    const T_FUNCTION = 339;
    const T_CONST = 340;
    const T_RETURN = 341;
    const T_TRY = 342;
    const T_CATCH = 343;
    const T_FINALLY = 344;
    const T_THROW = 345;
    const T_USE = 346;
    const T_INSTEADOF = 347;
    const T_GLOBAL = 348;
    const T_STATIC = 349;
    const T_ABSTRACT = 350;
    const T_FINAL = 351;
    const T_PRIVATE = 352;
    const T_PROTECTED = 353;
    const T_PUBLIC = 354;
    const T_VAR = 355;
    const T_UNSET = 356;
    const T_ISSET = 357;
    const T_EMPTY = 358;
    const T_HALT_COMPILER = 359;
    const T_CLASS = 360;
    const T_TRAIT = 361;
    const T_INTERFACE = 362;
    const T_EXTENDS = 363;
    const T_IMPLEMENTS = 364;
    const T_OBJECT_OPERATOR = 365;
    const T_DOUBLE_ARROW = 366;
    const T_LIST = 367;
    const T_ARRAY = 368;
    const T_CALLABLE = 369;
    const T_CLASS_C = 370;
    const T_TRAIT_C = 371;
    const T_METHOD_C = 372;
    const T_FUNC_C = 373;
    const T_LINE = 374;
    const T_FILE = 375;
    const T_COMMENT = 376;
    const T_DOC_COMMENT = 377;
    const T_OPEN_TAG = 378;
    const T_OPEN_TAG_WITH_ECHO = 379;
    const T_CLOSE_TAG = 380;
    const T_WHITESPACE = 381;
    const T_START_HEREDOC = 382;
    const T_END_HEREDOC = 383;
    const T_DOLLAR_OPEN_CURLY_BRACES = 384;
    const T_CURLY_OPEN = 385;
    const T_PAAMAYIM_NEKUDOTAYIM = 386;
    const T_NAMESPACE = 387;
    const T_NS_C = 388;
    const T_DIR = 389;
    const T_NS_SEPARATOR = 390;
    const T_ELLIPSIS = 391;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   52,  156,  157,  153,   51,   34,  157,
          151,  152,   49,   46,    7,   47,   48,   50,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   28,  148,
           40,   14,   42,   27,   64,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   66,  157,  155,   33,  157,  154,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   32,  150,   54,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           29,   30,   31,   35,   36,   37,   38,   39,   41,   43,
           44,   45,   53,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   65,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,  157,  157,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147
    );

    protected $action = array(
           60,   61,  420,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,   66,  223,  224,  225,  226,  227,  228,  229,  230,
          231,   55,  232,  233,  234,  235,  236,  237,  238,  239,
          240,  241,  242,  243,-32766,-32766,-32766,-32766,-32766,-32767,
        -32767,-32767,-32767,  616,   67,   68,   58,  244,  245,  790,
           69,  378,   70,  297,  298,   71,   72,   73,   74,   75,
           76,   77,   78,    0,   32,  305,   79,  411,  421,-32766,
          356,  357,  967,  968,  463,-32766, 1060,  288,  696,  750,
          464,   46,   27,  422,-32766,  465,  286,  466,  303,  467,
          440,  597,  423,-32766,-32766,-32766,   36,   37,  468,  428,
          424,   38,  469,  342,  125,   80,  447,  329,  359,  360,
         -118,  470,  471,   39,  300,  416,  472,  473,  474,  419,
          678,  722,  475,  476,  290,  916, 1060,  477,  478,  128,
          973,  974,  975,  976,  970,  971,  315,   84,   85,   86,
         1054,  491,  977,  972,  425,  443,  702,  618,  460,   47,
          366,  340,  327,   31,  331,  358,   40,  313,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  916,  308,-32766,  774,  775,  220,  221,  222,  650,
          388, 1026,   54,-32766,  110, -170,-32766,-32766,-32766,  751,
        -32766,  340,-32766,  301,-32766,  207, -122,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,  304,  348,-32766,-32766,  133,-32766,
        -32766,  424, 1067,-32766,  490,-32766,  441,-32766,  608,-32766,
        -32766,-32766,  470,  471,-32766,  301,  220,  221,  222,-32766,
          650,  678,  722,  475,  476,  650,  220,  221,  222,-32766,
          438,   22,-32766,-32766,-32766,  207,-32766,  222,-32766,  617,
        -32766,-32766,-32766,-32766,  934,  207,  248,-32766,-32766,-32766,
          628,-32766,-32766,-32766,  207,  124,-32766,  650,  135,-32766,
          490,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  799,
        -32766,  693,-32766,  916, 1082,-32766,  221,  222,  781,-32766,
        -32766,-32766,  804,   57,-32766,-32766,   35,  491,-32766,  477,
          425,-32766,  490,  211,  207,  299,  132,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,  916,  347,  220,  221,  222,
         1018,  809,   41,  111,  112,  113,  114,  115,  116,  117,
          118,  119,  120,  121,  122,  445,  207,  289,  132,-32766,
        -32766,-32766, 1092,  780, 1094, 1093,  246,  650,-32766,-32766,
        -32766,-32766, 1089, 1082,-32766,-32766,-32766,  694,-32766, 1023,
        -32766,  439,-32766,  855,  857,-32766, 1025,-32766,  916,-32766,
        -32766,-32766,  332,-32766,-32766,-32766,  126,  538,-32766,  650,
          575,-32766,  490,-32766,  131,  129,-32766,-32766,-32766,-32766,
        -32766,  137,-32766,  250,-32766,  566, 1064,-32766,-32766,-32766,
          916,-32766,-32766,-32766,  413,-32766,-32766,-32766,  133,  249,
        -32766, 1024, 1026,-32766,  490,-32766,-32766,-32766,  214,-32766,
        -32766,-32766,  302,  104,  105,  106,-32766,  220,  221,  222,
          979,  434,  650,-32766,  620, -400,-32766,  213,  979,-32766,
        -32766,-32766,  123,-32766,  212,-32766,  207,-32766,  244,  245,
        -32766,-32766,-32766,  916,-32766,-32766,-32766,  621,-32766,-32766,
        -32766,  449,   28,-32766,  650,  207,-32766,  490,-32766,  134,
          635,-32766,-32766,-32766,-32766,-32766,  630,-32766,  642,-32766,
          454,  581,-32766,  138,  367,  916,-32766,-32766,-32766,  588,
          589,-32766,-32766,  774,  775,-32766,  803,  638,-32766,  490,
          238,  239,  240,  639,-32766,-32766,-32766,  657,  625,  814,
          645,-32766,  136,  634,  706,  623,  314,  650,  107,  108,
          109,-32766,  308,-32766,-32766,-32766,-32766,  308,-32766,  715,
        -32766,  110,-32766,   50,  110,-32766,-32766,-32766,  916,-32766,
        -32766,-32766,   52,-32766,-32766,-32766,   51,   56,-32766,  650,
          305,-32766,  490,-32766,  650,   59,-32766,-32766,-32766,-32766,
        -32766,  307,-32766,   53,-32766,   49,  605,-32766,  529,  593,
          916,-32766,-32766,-32766, 1017,  346,-32766,-32766,  528,  516,
        -32766,  512,  669,-32766,  490,  435, 1087,  433,  811,-32766,
        -32766,-32766,  651,  511,  667, 1082,-32766,  515,  590,  600,
          607,  937,  650,  584,  724,  345,-32766,  338,  285,-32766,
        -32766,-32766,  437,-32766,  432,-32766,  335,-32766,  559, -308,
        -32766,  690,-32766, -167,-32766,-32766,-32766,  531,-32766,-32766,
        -32766,  572,  458,-32766,  650,   42,-32766,  490,-32766,  978,
          585,-32766,-32766,-32766,-32766,-32766,  368,-32766,  717,-32766,
          723,    0,-32766,    0,  247,  336,-32766,-32766,-32766,    0,
          341,-32766,-32766,    0, -400,-32766, -401,  330,-32766,  490,
          328,  477,  215,  216,  686,-32766,-32766,  127,  217,  521,
          218,    0,    0,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,  209,-32767,-32767,-32767,-32767,  334, -307,  381,
          967,  968, -299,-32766,-32766,  613,  688,-32766,  969,  650,
          318,  434,  416,-32766,  930,  800,-32766,-32766,-32766,  695,
        -32766,  704,-32766,  691,-32766,  689,  660,-32766,  808,  810,
          734,-32766,-32766,-32766,  736,  738,-32766,-32766,  681,  745,
        -32766,  744,  753,-32766,  490,  698,  683,  705,  692,  627,
          626,-32766,  241,  242,  243,   45,  556,   44,  973,  974,
          975,  976,  970,  971,  394,  687,  215,  216,  244,  245,
          977,  972,  217,  663,  218,  662,  661,  219,  697,-32766,
          807,-32766,-32766,   83,  619,  960,  209,  624,  629,  631,
          632,-32766,  637,  640,  967,  968,  644,  650,-32766,  641,
          643,-32766,  969,  130,-32766,-32766,-32766,  719,-32766,  743,
        -32766,  720,-32766,  721,  453,-32766, 1055, 1065,  792,-32766,
        -32766,-32766,  958, 1057,-32766,-32766,  424,  412,-32766, 1045,
         1059,-32766,  490,  326, 1061, 1090, 1091,  470,  471,-32766,
          742, 1088,  914,  415,  410,  343,  656,  722,  475,  476,
          556,   33,  973,  974,  975,  976,  970,  971,  394,-32766,
        -32766,-32766,   34,   43,  977,  972,   48,  312,  339,-32766,
        -32766,  219,  591,-32766,  311,  658,  896,   81,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,
        -32767,  424,  412,  310,  309,  296,  295,  287,  326,  210,
           82,   30,  470,  471,  560,  895,  920, -119,  424,  412,
          983,  656,  722,  475,  476,  326,  782,  924,  921,  470,
          471,  612,-32766,-32766,-32766,  551,  461,  457,  656,  722,
          475,  476,  455,  339,-32766,-32766,-32766,  450,  389,   25,
          659,-32766,    0,-32766,-32766,-32766,-32766,-32766,-32766,   24,
          339,   23, -118,-32766,  417,-32766,-32766,-32766,-32766,-32766,
          337, 1039,    0,  825,  826,  827,  824,  823,  822,  817,
        -32767,-32767,-32767,-32767,  102,  103,  104,  105,  106,  424,
          984, 1086,  957,  424, 1056, 1040, 1044, 1058,  943,  928,
          470,  471,  929,  926,  470,  471,  424,  927,  925,  678,
          722,  475,  476,  678,  722,  475,  476,  470,  471,    0,
            0,    0,    0,  424,    0,    0,  678,  722,  475,  476,
            0,    0,    0,    0,  470,  471,  424,    0,  679,    0,
          424,    0,  815,  678,  722,  475,  476,  470,  471,    0,
            0,  470,  471,  424,    0,  709,  678,  722,  475,  476,
          678,  722,  475,  476,  470,  471,    0,    0,  569,    0,
            0,    0,  919,  678,  722,  475,  476,-32766,-32766,-32766,
            0,    0,    0,  424,  615,  918,    0,    0,    0,  718,
          606,  650,    0, 1060,  470,  471,-32766,  424,-32766,-32766,
        -32766,  424,  711,  678,  722,  475,  476,    0,  470,  471,
            0,    0,  470,  471,-32766,-32766,-32766,  678,  722,  475,
          476,  678,  722,  475,  476,    0,  944,    0,  424,    0,
            0,    0,    0,-32766,    0,-32766,-32766,-32766,-32766,  470,
          471,    0,    0,    0,    0,    0,    0,    0,  678,  722,
          475,  476,    0,    0,    0,    0,    0,    0,  491,    0,
            0,  425,    0,    0,    0,    0,  429,    0,  340
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   30,   31,   32,   33,   11,
           12,   13,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   66,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   76,   46,   47,   66,   65,   66,   78,
           52,   78,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,    0,   66,   67,   68,   69,   70,  102,
          101,  102,   74,   75,   76,  108,   78,    7,   80,   28,
           82,   83,   84,   85,  117,   87,  128,   89,    7,   91,
            7,   92,   94,    8,    9,   10,   98,   99,  100,  101,
          101,  103,  104,    7,  149,  107,    7,  127,  110,  111,
          152,  112,  113,  140,  141,  146,  118,  119,  120,    7,
          121,  122,  123,  124,  153,   12,   78,  129,  130,  149,
          132,  133,  134,  135,  136,  137,  138,    8,    9,   10,
           78,  143,  144,  145,  146,   76,  148,  149,    7,  151,
            7,  153,  154,    7,  156,    7,   27,    7,   29,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   12,   53,   70,  130,  131,    8,    9,   10,   76,
           77,  122,   66,   80,   65,   78,   83,   84,   85,  148,
           87,  153,   89,   34,   91,   27,  152,   94,    8,    9,
           10,   98,   99,  100,   34,  153,  103,  104,  149,  102,
          107,  101,  152,  110,  111,  108,    7,   27,   76,   29,
           30,  118,  112,  113,  117,   34,    8,    9,   10,   70,
           76,  121,  122,  123,  124,   76,    8,    9,   10,   80,
           28,  152,   83,   84,   85,   27,   87,   10,   89,   76,
           91,  148,  149,   94,  152,   27,   28,   98,   99,  100,
          150,   70,  103,  104,   27,  149,  107,   76,   66,  110,
          111,   80,    8,    9,   83,   84,   85,  118,   87,  148,
           89,  148,   91,   12,   81,   94,    9,   10,  152,   98,
           99,  100,  150,   66,  103,  104,    7,  143,  107,  129,
          146,  110,  111,    7,   27,   34,  147,  148,  149,  118,
           30,   31,   32,   33,   34,   12,   66,    8,    9,   10,
          152,  148,   14,   15,   16,   17,   18,   19,   20,   21,
           22,   23,   24,   25,   26,   76,   27,   34,  147,  148,
          149,   70,   76,  152,   78,   79,  128,   76,    8,    9,
           10,   80,  150,   81,   83,   84,   85,  148,   87,  156,
           89,  149,   91,   55,   56,   94,   76,   27,   12,   98,
           99,  100,   81,   70,  103,  104,  149,  127,  107,   76,
           81,  110,  111,   80,   28,    7,   83,   84,   85,  118,
           87,  149,   89,   14,   91,  153,   76,   94,   30,   31,
           12,   98,   99,  100,  122,    8,  103,  104,  149,   14,
          107,  139,  122,  110,  111,   30,   31,   32,   14,  148,
          149,  118,   34,   46,   47,   48,   70,    8,    9,   10,
          139,  146,   76,  151,  149,  127,   80,   14,  139,   83,
           84,   85,   14,   87,   14,   89,   27,   91,   65,   66,
           94,  148,  149,   12,   98,   99,  100,   28,   70,  103,
          104,   71,   72,  107,   76,   27,  110,  111,   80,  149,
           28,   83,   84,   85,  118,   87,   28,   89,   28,   91,
           71,   72,   94,   96,   97,   12,   98,   99,  100,  105,
          106,  103,  104,  130,  131,  107,  148,  149,  110,  111,
           46,   47,   48,   28,  148,  149,  118,  148,  149,  148,
          149,   70,   28,   28,   28,   28,   28,   76,   49,   50,
           51,   80,   53,   30,   83,   84,   85,   53,   87,   34,
           89,   65,   91,   66,   65,   94,  148,  149,   12,   98,
           99,  100,   66,   70,  103,  104,   66,   66,  107,   76,
           67,  110,  111,   80,   76,   66,   83,   84,   85,  118,
           87,   93,   89,   66,   91,   66,   76,   94,   76,   73,
           12,   98,   99,  100,  155,   81,  103,  104,   76,   76,
          107,   76,   76,  110,  111,   76,   76,   76,   76,  148,
          149,  118,   76,   76,   76,   81,   70,   78,   78,   78,
           78,   78,   76,   95,  122,   81,   80,  109,   93,   83,
           84,   85,   85,   87,  101,   89,  125,   91,   93,  142,
           94,  148,  149,   93,   98,   99,  100,   93,   70,  103,
          104,   95,  101,  107,   76,  128,  110,  111,   80,  139,
          108,   83,   84,   85,  118,   87,  142,   89,  147,   91,
          122,   -1,   94,   -1,   28,  126,   98,   99,  100,   -1,
          125,  103,  104,   -1,  127,  107,  127,  127,  110,  111,
          127,  129,   46,   47,  148,  149,  118,  128,   52,  146,
           54,   -1,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   66,   40,   41,   42,   43,  142,  142,  142,
           74,   75,  142,   70,   78,  142,  148,  149,   82,   76,
          142,  146,  146,   80,  150,  148,   83,   84,   85,  148,
           87,  148,   89,  148,   91,  148,  148,   94,  148,  148,
          148,   98,   99,  100,  148,  148,  103,  104,  148,  148,
          107,  148,  148,  110,  111,  148,  148,  148,  148,  148,
          148,  118,   49,   50,   51,  148,  130,  148,  132,  133,
          134,  135,  136,  137,  138,  148,   46,   47,   65,   66,
          144,  145,   52,  148,   54,  148,  148,  151,  148,  153,
          148,  148,  149,  149,  149,  152,   66,  149,  149,  149,
          149,   70,  149,  149,   74,   75,  149,   76,   78,  149,
          149,   80,   82,  149,   83,   84,   85,  150,   87,  150,
           89,  150,   91,  150,  150,   94,  150,  150,  150,   98,
           99,  100,  150,  150,  103,  104,  101,  102,  107,  150,
          150,  110,  111,  108,  150,  150,  150,  112,  113,  118,
          150,  150,  154,  151,  151,  151,  121,  122,  123,  124,
          130,  151,  132,  133,  134,  135,  136,  137,  138,    8,
            9,   10,  151,  151,  144,  145,  151,  151,  143,  148,
          149,  151,  155,  153,  151,  150,  152,  151,   27,  151,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,  101,  102,  151,  151,  151,  151,  151,  108,  151,
          151,  151,  112,  113,  152,  152,  152,  152,  101,  102,
          152,  121,  122,  123,  124,  108,  152,  152,  152,  112,
          113,  152,    8,    9,   10,  152,  152,  152,  121,  122,
          123,  124,  152,  143,    8,    9,   10,  152,  152,  152,
          150,   27,   -1,   29,   30,   31,   32,   33,   34,  152,
          143,  152,  152,   27,  102,   29,   30,   31,   32,   33,
          108,  155,   -1,  111,  112,  113,  114,  115,  116,  117,
           40,   41,   42,   43,   44,   45,   46,   47,   48,  101,
          155,  155,  155,  101,  155,  155,  155,  155,  155,  155,
          112,  113,  155,  155,  112,  113,  101,  155,  155,  121,
          122,  123,  124,  121,  122,  123,  124,  112,  113,   -1,
           -1,   -1,   -1,  101,   -1,   -1,  121,  122,  123,  124,
           -1,   -1,   -1,   -1,  112,  113,  101,   -1,  150,   -1,
          101,   -1,  150,  121,  122,  123,  124,  112,  113,   -1,
           -1,  112,  113,  101,   -1,  150,  121,  122,  123,  124,
          121,  122,  123,  124,  112,  113,   -1,   -1,   86,   -1,
           -1,   -1,  150,  121,  122,  123,  124,    8,    9,   10,
           -1,   -1,   -1,  101,   88,  150,   -1,   -1,   -1,  150,
           90,   76,   -1,   78,  112,  113,   27,  101,   29,   30,
           31,  101,  150,  121,  122,  123,  124,   -1,  112,  113,
           -1,   -1,  112,  113,    8,    9,   10,  121,  122,  123,
          124,  121,  122,  123,  124,   -1,  111,   -1,  101,   -1,
           -1,   -1,   -1,   27,   -1,   29,   30,   31,   32,  112,
          113,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  121,  122,
          123,  124,   -1,   -1,   -1,   -1,   -1,   -1,  143,   -1,
           -1,  146,   -1,   -1,   -1,   -1,  151,   -1,  153
    );

    protected $actionBase = array(
            0,  800,  735,  817,  888,  120,  982,   -1, 1000,  952,
          939,  935,  996,  922,  905,  892, 1027, 1027, 1027, 1027,
         1027,  497,  458,  452,  460,  452,  439,   -2,   -2,   -2,
          201,  169,  281,  281,  643,  281,  536,  568,  483,  113,
          366,  313,  398,  451,  451,  451,  451,  731,  731,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,   51,
          640,  559,  517,  627,  587,  585,  583,  764,  525,  734,
          701,  694,  494,  690,  689,  683,  682,  678,  674,  677,
          727,  676,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,  407,  228,  178,  238,  429,  274,  319,
          319,  319,  319,  319,  319,   85,   85,   85,   85,   85,
           85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
           85,   85,  287,  350,  350,  350,  247,  636,  448,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
          730,  200,  -18,  -18, 1069,  503, 1106,  378,  936,  395,
          924,  861,  861,  861,  861,  861,  -25,  290,    4,    4,
            4,    4,  318,  940,  940,  940,  940,  663,  663,  663,
          663,  673,  671,  667,  574,  180,  180,  552,  552,  493,
          664,  387,  387,  464,  464, 1015, 1015, 1015, 1015, 1015,
         1015, 1015, 1015, 1015, 1015,  292,  117,  -33,  738,   54,
           54,   54,   54,  373,  373,  301,  282,  213,   69,  479,
          479,  479,  713,  713,  713,  152,  -31,  534,  330,  330,
          330,  504,  510,  524,  269,  164,  164,  164,  164,  295,
          644,  164,  164,  164,  -45,  -27,  -27,  276,  252,  546,
          700,  518,  669,  358,  487,  -20,  576,  576,  576,  -29,
          523,  400,  419,  394,  570,  222,  -29,   51,  300,  371,
          237,  484,  581,  502,  635,  588,  143,  219,  260,  369,
          126,   62,   99,  638,  637,  762,  763,   70,  212,  549,
          484,  484,  484,  146,  309,  126,  -42,  393,  393,  393,
          393,  393,  393,  393,  393,  577,  141,  112,  642,  183,
          505,  721,  515,  760,  760,  512,  488,  515,  530,  505,
          725,  725,  725,  725,  505,  488,  760,  760,  505,  493,
          760,  299,  505,  501,  488,  545,  545,  725,  612,  611,
          515,  529,  539,  760,  760,  760,  539,  512,  505,  725,
          542,  511,  306,  760,  725,  498,  498,  542,  505,  498,
          530,  498,   63,  496,  509,  722,  736,  702,  527,  645,
          538,  492,  755,  754,  759,  513,  521,  756,  710,  543,
          610,  519,  438,  477,  490,  486,  507,  578,  491,  553,
          523,  575,  476,  476,  476,  547,  565,  547,  476,  476,
          476,  476,  476,  476,  476,  476,  853,  567,  566,  550,
          537,  609,  440,  543,  544,  433,  648,  543,  776,  796,
          698,  526,  753,  783,  547,  852,  619,  388,  414,  752,
          535,  528,  547,  733,  547,  649,  547,  775,  520,  696,
          543,  476,  774,  848,  847,  844,  843,  842,  841,  840,
          839,  499,  837,  608,  795,  150,  758,  570,  514,  516,
          607,   96,  836,  547,  547,  650,  644,  547,  651,  604,
          617,  809,  603,  790,  835,  510,  785,  547,  541,  816,
           96,  495,  506,  765,  601,  703,  531,  768,  704,  653,
          405,  695,  485,  600,  807,  797,  810,  597,  654,  660,
          389,  500,  533,  532,  661,  726,  596,  779,  540,  573,
          508,  478,  657,  522,  784,  592,  591,  590,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,    0,    0,    0,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,  129,  129,  129,  129,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,  129,  129,  129,  129,  129,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
          -18,  -18,  -18,  -18,  129,  -18,  -18,  -18,  -18,  -18,
          -18,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  -18,  129,
          129,  129,  -18, 1015,  -18, 1015, 1015, 1015, 1015, 1015,
         1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
         1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
         1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
         1015, 1015, 1015, 1015, 1015, 1015, 1015,  129,    0,    0,
          129,  -18,  129,  -18,  129,  -18,  129,  129,  129,  129,
          129,  129,  -18,  -18,  -18,  -18,  -18,  -18,    0,  479,
          479,  479,  479,  -18,  -18,  -18,  -18,  862,  862,  862,
          862, 1015, 1015, 1015, 1015, 1015, 1015,  479,  479,  713,
          713,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0, 1015,  862,  862, 1015,  164,  164,  164,  164,  164,
          164,  -27,  -27,  -27,   62,    0,    0,    0,    0,    0,
            0,  164,  488,  -27,   48,   48,   48,  -27,  -27,  -27,
           62,    0,    0,    0,    0,  488,   48,    0,    0,    0,
          760,    0,    0,    0,   48,  397,  397,  397,  397,   96,
          126,    0,  488,  488,  488,    0,  529,    0,    0,    0,
          760,    0,    0,    0,    0,    0,    0,  476,  388,  753,
           83,  148,    0,    0,    0,    0,    0,    0,    0,  148,
          148,   81,   81,    0,    0,  499,  476,  476,  476,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   83,    0,    0,   96
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  111,  103,  117,  102,
          113,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  427,  427,32767,  384,32767,32767,32767,32767,
        32767,32767,32767,  188,  188,  188,32767,32767,32767,  416,
          416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
        32767,32767,32767,32767,32767,  270,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  276,  432,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  251,  252,  254,  255,  187,  417,  139,  277,
          431,  186,  141,  215,  388,32767,32767,32767,  217,   26,
          150,   95,  387,  185,  126,  269,  271,  216,  192,  197,
          198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
          208,  191,  342,  248,  247,  246,  344,32767,  343,  381,
          381,  384,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  213,  370,  369,  214,  340,  218,  341,  220,  345,
          219,  236,  237,  234,  235,  238,  347,  346,  363,  364,
          361,  362,  190,  239,  240,  241,  242,  365,  366,  367,
          368,  172,  172,  172,  172,32767,32767,  426,  426,32767,
        32767,  227,  228,  354,  355,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  173,32767,32767,  130,
          130,  130,  130,  130,32767,32767,32767,32767,32767,  222,
          223,  221,  349,  350,  348,32767,32767,  316,32767,32767,
        32767,32767,32767,  318,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  389,  317,32767,32767,32767,32767,
        32767,32767,32767,32767,  402,  305,32767,32767,32767,32767,
          298,  114,  116,   64,  373,32767,32767,32767,32767,32767,
          407,  232,32767,32767,32767,32767,32767,32767,  439,32767,
          402,32767,32767,32767,32767,32767,32767,32767,32767,  245,
          224,  225,  226,32767,32767,  406,  400,  357,  358,  359,
          360,  351,  352,  353,  356,32767,32767,32767,32767,32767,
           68,  313,32767,  319,  319,32767,32767,32767,32767,   68,
        32767,32767,32767,32767,   68,32767,  405,  404,   68,32767,
          299,  383,   68,   81,32767,   79,   79,32767,  100,  100,
        32767,32767,   83,  379,  395,32767,   83,32767,   68,32767,
          287,   70,  383,32767,32767,  132,  132,  287,   68,  132,
        32767,  132,32767,    4,  323,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  300,
        32767,32767,32767,  266,  267,  376,  391,32767,  392,32767,
          298,32767,  230,  231,  233,  210,32767,  212,  256,  257,
          258,  259,  260,  261,  262,  264,32767,32767,  303,  306,
        32767,32767,32767,    6,   20,  149,32767,  301,32767,  195,
        32767,32767,32767,32767,  434,32767,32767,  189,32767,32767,
           22,32767,  145,32767,   66,32767,  424,32767,32767,  400,
          302,  229,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  401,32767,32767,32767,  121,32767,  336,32767,32767,
        32767,   82,32767,  193,  140,32767,32767,  433,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,   67,32767,32767,
           84,32767,32767,  400,32767,32767,32767,32767,32767,32767,
          184,32767,32767,32767,32767,32767,  400,32767,32767,32767,
          125,32767,32767,32767,32767,32767,32767,32767,    4,32767,
          166,32767,32767,32767,32767,32767,32767,32767,   28,   28,
            3,   28,  108,   28,  152,    3,  100,  100,   61,  152,
           28,  152,  152,   28,   28,   28,   28,   28,  159,   28,
           28,   28,   28,   28,   28,   28
    );

    protected $goto = array(
          168,  168,  142,  142,  147,  142,  143,  144,  145,  150,
          152,  188,  170,  166,  166,  166,  166,  147,  147,  167,
          167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
          162,  163,  164,  165,  185,  141,  186,  492,  493,  371,
          494,  498,  499,  500,  501,  502,  503,  504,  505,  842,
          146,  148,  149,  151,  173,  178,  187,  203,  251,  254,
          256,  258,  260,  261,  262,  263,  264,  265,  273,  274,
          275,  276,  291,  292,  319,  320,  321,  390,  391,  392,
          541,  189,  190,  191,  192,  193,  194,  195,  196,  197,
          198,  199,  200,  201,  153,  154,  155,  169,  156,  171,
          157,  204,  172,  158,  159,  160,  205,  161,  139,  557,
          784,  557,  557,  557,  557,  557,  557,  557,  557,  557,
          557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
          557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
          557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
          557,  557,  557,  496,  496,  496,  496,  496,  496,  766,
          766, 1071, 1071,  496,  496,  496,  496,  496,  496,  496,
          496,  496,  496,  507,  570,  594,  507,  543,  544,  545,
          546,  547,  548,  549,  550,  552,  579,  430,  430,  430,
          430,  430,  430,  654,  654,  654,  519,  430,  430,  430,
          430,  430,  430,  430,  430,  430,  430,  945,  350,  700,
          945,  773,  773,  773,  773,  773,  773,  282,  537,  283,
          284,  380,  380,  380,  333,    1,  599,  609,  317,  604,
            2,  369, 1075,  380,  655,  655,  655,  731,  731,  731,
          731,  395,  372,  726,  732,  603,  558, 1031,  558,  558,
          558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
          558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
          558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
          558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
          980,  587,  980,  980,  980,  980,  980,  980,  980,  980,
          980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
          980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
          980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
          980,  980,  980,  980,  573,  576,  614,  580,  353,  408,
          821,  409,  509,  176,  508,  509,  379,  508,  179,  180,
          181,  397,  398,  399,  400,  175,  202,  206,  208,  255,
          257,  259,  266,  267,  268,  269,  270,  271,  277,  278,
          279,  280,  293,  294,  322,  323,  324,  401,  402,  403,
          404,  177,  182,  252,  253,  183,  184,    5,  595,   16,
         1051,    6, 1068, 1051,  386,  351,  352,  889,    7,  956,
          955,   17,   18,    8,   19,    9,  770,   20,   10,   11,
           12,   13,   14,   15,  396,  596,  536,  536,  563,  532,
          653,  653,  653,  530,  534,  534,  495,  497,  524,  539,
          564,  567,  577,  583, 1043, 1081, 1081,  513,  840,  779,
          752,  737,  735,  733,  735,  622,  510,  761,  756,  961,
          513, 1084, 1081, 1050,  938,  664, 1050,  788,  899,   26,
           21,  365,  383,  384, 1084, 1084,  373,  513,  513,  513,
          522,  981,  633,  931,  533,  553, 1066, 1066, 1066,  542,
          405,  936,  446,  518,  670, 1028,  793,   29, 1049,  568,
          451,  829,  592,    0,  740,    0,  518,  518,  459,    0,
          601,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  941,  942,    0,    0,
          938,    0,    0,    0,    0,    0,    0,  513,    0,    0,
            0,    0,    0,  939, 1042,  939,  517,    0,    0,    0,
            0,    0,    0,  940,    0,  540,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  523
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   39,
           63,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   95,   95,   95,   95,   95,   95,   56,
           56,   56,   56,   95,   95,   95,   95,   95,   95,   95,
           95,   95,   95,   95,   22,   22,   95,   88,   88,   88,
           88,   88,   88,   88,   88,   88,   88,   39,   39,   39,
           39,   39,   39,    7,    7,    7,   79,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   51,   32,
           39,   39,   39,   39,   39,   39,   39,   47,   87,   47,
           47,  102,  102,  102,  104,    2,   43,   39,  104,   43,
            2,   43,  119,  102,    8,    8,    8,   39,   39,   39,
           39,  102,   29,   39,   39,   39,   98,  111,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
           98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
          105,  107,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,   42,   42,   42,   49,   49,   49,
           76,   76,  101,   13,   98,  101,    5,   98,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   14,   31,   14,
           96,   14,  117,   96,   30,   51,   51,   80,   14,  103,
          103,   14,   14,   14,   14,   14,   58,   14,   14,   14,
           14,   14,   14,   14,   33,   33,   33,   33,   33,   33,
            6,    6,    6,    5,   33,   33,   33,   33,   33,   33,
           33,   33,   33,   33,   61,  120,  120,    4,   79,   60,
            6,    6,    6,    6,    6,    6,    6,    6,    6,   16,
            4,  120,  120,   97,   61,   11,   97,   64,   16,   16,
           16,   16,    9,    9,  120,  120,   40,    4,    4,    4,
           40,  106,   53,   91,   40,   16,   97,   97,   97,   26,
           10,   93,   45,   26,   12,  110,   65,   16,   97,   46,
           40,   78,   16,   -1,   50,   -1,   26,   26,   86,   -1,
           40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   61,   61,   -1,   -1,
           61,   -1,   -1,   -1,   -1,   -1,   -1,    4,   -1,   -1,
           -1,   -1,   -1,   61,   61,   61,    4,   -1,   -1,   -1,
           -1,   -1,   -1,   61,   -1,    4,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   79
    );

    protected $gotoBase = array(
            0,    0, -395,    0,  111,    7,  419,  192,  233,  106,
           63,   97,   44,  136, -232,    0,   38,    0,    0,    0,
            0,    0,  130,    0,    0,  -30,  449,    0,    0,  196,
           98,  102,  184,  129,    0,    0,    0,    0,    0,  -98,
           42,    0,   24, -230,    0,   46,   43, -412,    0,    1,
           47, -231,    0,  105,    0,    0, -126,    0,   93,    0,
          125,   90,    0,   79,   91,   45,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   34,    0,   31,  149,
           89,    0,    0,    0,    0,    0,   41,  185,  127,    0,
            0,   59,    0,   62,    0, -132,   85,  148,   39,    0,
            0,   37, -107,   70, -103,   83,  103,   81,    0,    0,
           33,   36,    0,    0,    0,    0,    0,  104,    0,  197,
          119,    0
    );

    protected $gotoDefault = array(
        -32768,  462,    3,  648,  479,  514,  675,  676,  677,  375,
          374,  665,  671,  174,    4,  673,  890,  361,  680,  362,
          582,  682,  526,  684,  685,  140,  480,  376,  377,  527,
          385,  571,  699,  272,  382,  701,  363,  703,  708,  364,
          602,  586,  554,  598,  481,  442,  565,  281,  535,  561,
          739,  349,  747,  636,  755,  758,  482,  555,  769,  448,
          777,  966,  393,  783,  789,  794,  797,  418,  406,  578,
          801,  802,  325,  806,  610,  611,  820,  306,  828,  841,
          414,  909,  911,  483,  484,  520,  456,  506,  525,  485,
          932,  436,  407,  935,  486,  487,  426,  427,  953,  950,
          355, 1036,  354,  444,  316, 1021, 1020,  574,  985,  452,
         1074, 1032,  344,  488,  489,  370,  387, 1069,  431, 1076,
         1083,  562
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   44,   44,   44,   45,
           45,   48,   48,   46,   46,   49,   49,   23,   23,   32,
           32,   35,   35,   34,   34,   50,   24,   24,   24,   24,
           51,   51,   52,   52,   53,   53,   21,   21,   17,   17,
           54,   19,   19,   55,   18,   18,   20,   20,   31,   31,
           31,   42,   42,   57,   57,   58,   58,   60,   60,   60,
           59,   59,   43,   43,   61,   61,   61,   62,   62,   63,
           63,   63,   27,   27,   64,   64,   64,   28,   28,   65,
           65,   47,   47,   66,   66,   66,   66,   71,   71,   72,
           72,   73,   73,   73,   73,   74,   75,   75,   70,   70,
           67,   67,   69,   69,   77,   77,   76,   76,   76,   76,
           76,   76,   68,   68,   78,   78,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   16,   16,   26,   26,   83,   83,
           84,   84,   84,   84,   90,   79,   79,   86,   86,   92,
           92,   93,   94,   94,   94,   94,   94,   94,   98,   98,
           39,   39,   39,   80,   80,   99,   99,   95,   95,  100,
          100,  100,  100,   81,   81,   81,   85,   85,   85,   91,
           91,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,   13,   13,   13,   13,   13,   13,
          108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
          108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
          108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
          108,  108,  108,   89,   89,   82,   82,   82,   82,  106,
          106,  107,  107,  110,  110,  109,  109,  111,  111,   33,
           33,   33,   33,  113,  113,  112,  112,  112,  112,  112,
          114,  114,   97,   97,  101,  101,   96,   96,  115,  115,
          115,  115,  102,  102,  102,  102,   88,   88,  103,  103,
          103,   56,  116,  116,  117,  117,  117,   87,   87,  118,
          118,  119,  119,  119,  119,  104,  104,  104,  104,  120,
          120,  120,  120,  120,  120,  120,  121,  121,  121
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   10,    7,    6,    5,    1,    2,    2,    0,
            2,    0,    2,    0,    2,    1,    3,    1,    4,    1,
            4,    1,    4,    1,    3,    3,    3,    4,    4,    5,
            0,    2,    4,    3,    1,    1,    1,    4,    0,    2,
            3,    0,    2,    4,    0,    2,    0,    3,    1,    2,
            1,    1,    0,    1,    3,    4,    6,    1,    1,    1,
            0,    1,    0,    2,    2,    3,    3,    1,    3,    1,
            2,    2,    3,    1,    1,    2,    4,    3,    1,    1,
            3,    2,    0,    3,    3,    9,    3,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    1,    3,    5,    4,    3,    4,
            4,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    1,    1,    1,    3,    2,
            1,    2,   10,   11,    3,    3,    2,    4,    4,    3,
            4,    4,    4,    4,    7,    3,    2,    0,    4,    1,
            3,    2,    2,    4,    6,    2,    2,    4,    1,    1,
            1,    2,    3,    1,    1,    1,    1,    1,    1,    3,
            3,    4,    4,    0,    2,    1,    0,    1,    1,    0,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    3,    2,    1,    3,    1,    4,    3,    1,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    2,    2,    2,
            2,    3,    3,    3,    3,    3,    3,    3,    3,    5,
            4,    4,    3,    1,    3,    1,    1,    3,    3,    1,
            1,    0,    2,    0,    1,    3,    1,    3,    1,    1,
            1,    1,    1,    6,    4,    3,    4,    2,    4,    4,
            1,    3,    1,    2,    1,    1,    4,    1,    3,    6,
            4,    4,    4,    4,    1,    4,    0,    1,    1,    3,
            1,    4,    3,    1,    1,    1,    0,    0,    2,    3,
            1,    3,    1,    4,    2,    2,    2,    1,    2,    1,
            4,    3,    3,    3,    6,    3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1() {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3() {
         $this->semValue = array(); 
    }

    protected function reduceRule4() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule7() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10() {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule11() {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule12() {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule13() {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule14() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule15() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule16() {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule17() {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule18() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule21() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule22() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule23() {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule24() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26() {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule27() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28() {
         $this->semValue = array(); 
    }

    protected function reduceRule29() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32() {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule33() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34() {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule35() {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes); 
    }

    protected function reduceRule36() {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule37() {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule38() {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule39() {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule40() {
         $this->semValue = new Node\Stmt\Break_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule41() {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule42() {
         $this->semValue = new Node\Stmt\Continue_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule43() {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule44() {
         $this->semValue = new Node\Stmt\Return_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule45() {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule46() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47() {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule48() {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule49() {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule50() {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule51() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52() {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule53() {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes); 
    }

    protected function reduceRule54() {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule55() {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule56() {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57() {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule58() {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule59() {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule60() {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule61() {
         $this->semValue = array(); 
    }

    protected function reduceRule62() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63() {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes); 
    }

    protected function reduceRule64() {
         $this->semValue = null; 
    }

    protected function reduceRule65() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68() {
         $this->semValue = false; 
    }

    protected function reduceRule69() {
         $this->semValue = true; 
    }

    protected function reduceRule70() {
         $this->semValue = false; 
    }

    protected function reduceRule71() {
         $this->semValue = true; 
    }

    protected function reduceRule72() {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(10-3)], array('byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes); 
    }

    protected function reduceRule73() {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes); 
    }

    protected function reduceRule74() {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule75() {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule76() {
         $this->semValue = 0; 
    }

    protected function reduceRule77() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule78() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule79() {
         $this->semValue = null; 
    }

    protected function reduceRule80() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule81() {
         $this->semValue = array(); 
    }

    protected function reduceRule82() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83() {
         $this->semValue = array(); 
    }

    protected function reduceRule84() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule86() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule87() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule89() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule95() {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule96() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule97() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule98() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule99() {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule100() {
         $this->semValue = array(); 
    }

    protected function reduceRule101() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule102() {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule103() {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule104() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule105() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule106() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule107() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule108() {
         $this->semValue = array(); 
    }

    protected function reduceRule109() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule110() {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule111() {
         $this->semValue = array(); 
    }

    protected function reduceRule112() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule113() {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule114() {
         $this->semValue = null; 
    }

    protected function reduceRule115() {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule116() {
         $this->semValue = null; 
    }

    protected function reduceRule117() {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule118() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule119() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule120() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule122() {
         $this->semValue = array(); 
    }

    protected function reduceRule123() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule124() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule125() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule126() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule127() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule128() {
         $this->semValue = 'array'; 
    }

    protected function reduceRule129() {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule130() {
         $this->semValue = null; 
    }

    protected function reduceRule131() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule132() {
         $this->semValue = null; 
    }

    protected function reduceRule133() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule134() {
         $this->semValue = array(); 
    }

    protected function reduceRule135() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule136() {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes)); 
    }

    protected function reduceRule137() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule138() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule139() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule140() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule141() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule142() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule143() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule144() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule145() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule146() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule147() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149() {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule150() {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule151() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule152() {
         $this->semValue = array(); 
    }

    protected function reduceRule153() {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule154() {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule155() {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], array('type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes); 
    }

    protected function reduceRule156() {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule157() {
         $this->semValue = array(); 
    }

    protected function reduceRule158() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159() {
         $this->semValue = array(); 
    }

    protected function reduceRule160() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule162() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule163() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule164() {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule165() {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167() {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168() {
         $this->semValue = null; 
    }

    protected function reduceRule169() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171() {
         $this->semValue = 0; 
    }

    protected function reduceRule172() {
         $this->semValue = 0; 
    }

    protected function reduceRule173() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175() {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181() {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184() {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule185() {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule186() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188() {
         $this->semValue = array(); 
    }

    protected function reduceRule189() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191() {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule192() {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule193() {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule194() {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule195() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196() {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule197() {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule198() {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule199() {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule200() {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule201() {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule202() {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule203() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule204() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule205() {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule206() {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule207() {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule208() {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule209() {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule210() {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule211() {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule212() {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule213() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule214() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule215() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule216() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule217() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule218() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule219() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule220() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule221() {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule222() {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule223() {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule224() {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule225() {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule226() {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule227() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule228() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule229() {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule230() {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule231() {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule232() {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule233() {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule234() {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule235() {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule236() {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule237() {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule238() {
         $this->semValue = new Node\Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule239() {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule240() {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule241() {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule242() {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule243() {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule244() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule245() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule246() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule247() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule248() {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule249() {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule250() {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule251() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule252() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule253() {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule254() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule255() {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule256() {
         $this->semValue = new Node\Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule257() {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule258() {
         $this->semValue = new Node\Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule259() {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule260() {
         $this->semValue = new Node\Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule261() {
         $this->semValue = new Node\Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule262() {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule263() {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule264() {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule265() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule267() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule268() {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule269() {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule270() {
         $this->semValue = new Node\Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule271() {
         $this->semValue = new Node\Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule272() {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes); 
    }

    protected function reduceRule273() {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes); 
    }

    protected function reduceRule274() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule275() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule276() {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule277() {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule278() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule279() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule280() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule281() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule282() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule283() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule284() {
         $this->semValue = array(new Node\Stmt\Class_(null, array('type' => 0, 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-2)]); 
    }

    protected function reduceRule285() {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule286() {
         list($class, $ctorArgs) = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = new Node\Expr\New_($class, $ctorArgs, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule287() {
         $this->semValue = array(); 
    }

    protected function reduceRule288() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule289() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule290() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule291() {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule292() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule293() {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule294() {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule295() {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule296() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule297() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule298() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule299() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule300() {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule301() {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule302() {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule303() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule306() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule307() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule308() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule309() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule310() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule311() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule312() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule313() {
         $this->semValue = null; 
    }

    protected function reduceRule314() {
         $this->semValue = null; 
    }

    protected function reduceRule315() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule316() {
         $this->semValue = array(); 
    }

    protected function reduceRule317() {
         $this->semValue = array(Node\Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule318() {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule319() {
         $this->semValue = array(); 
    }

    protected function reduceRule320() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule321() {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule322() {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule323() {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule324() {
         $this->semValue = new Node\Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule325() {
         $this->semValue = new Node\Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule326() {
         $this->semValue = new Node\Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule327() {
         $this->semValue = new Node\Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule328() {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule329() {
         $this->semValue = new Node\Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule330() {
         $this->semValue = new Node\Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule331() {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule332() {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule333() {
         $this->semValue = new Node\Scalar\String_('', $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule334() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule335() {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule336() {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule337() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule338() {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule339() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule340() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule341() {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule342() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule343() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule344() {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule345() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule346() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule347() {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule348() {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule349() {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule350() {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule351() {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule352() {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule353() {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule354() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule355() {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule356() {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule357() {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule358() {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule359() {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule360() {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule361() {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule362() {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule363() {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule364() {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule365() {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule366() {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule367() {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule368() {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule369() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes); 
    }

    protected function reduceRule370() {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule371() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule372() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule373() {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule374() {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule375() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule376() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule377() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule378() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule379() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule380() {
         $this->semValue = 'class'; 
    }

    protected function reduceRule381() {
         $this->semValue = array(); 
    }

    protected function reduceRule382() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule383() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule384() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule385() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule386() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule387() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule388() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule389() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule390() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule391() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule392() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule393() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule394() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule395() {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule396() {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule397() {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule398() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule399() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule400() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule401() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule402() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule403() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule404() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule405() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule406() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule407() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule408() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule409() {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule410() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule411() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule412() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule413() {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule414() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule415() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule416() {
         $this->semValue = null; 
    }

    protected function reduceRule417() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule418() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule419() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule420() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule421() {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule422() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule423() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule424() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule425() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule426() {
         $this->semValue = null; 
    }

    protected function reduceRule427() {
         $this->semValue = array(); 
    }

    protected function reduceRule428() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule429() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule430() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule431() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule432() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule433() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule434() {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes); 
    }

    protected function reduceRule435() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule436() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule437() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule438() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule439() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule440() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes); 
    }

    protected function reduceRule441() {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule442() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule443() {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes); 
    }

    protected function reduceRule444() {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes); 
    }

    protected function reduceRule445() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule446() {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule447() {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }

    protected function reduceRule448() {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes); 
    }
}
