<?php

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the parser skeleton grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 *
 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
 * the work by Masato Bito and is in the PUBLIC DOMAIN.
 */
class PHPParser_Parser
{
    const TOKEN_NONE    = -1;
    const TOKEN_INVALID = 149;

    const TOKEN_MAP_SIZE = 384;

    const YYLAST       = 913;
    const YY2TBLSTATE  = 327;
    const YYGLAST      = 415;
    const YYNLSTATES   = 544;
    const YYUNEXPECTED = 32767;
    const YYDEFAULT    = -32766;

    // {{{ Tokens
    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_PLUS_EQUAL = 266;
    const T_MINUS_EQUAL = 267;
    const T_MUL_EQUAL = 268;
    const T_DIV_EQUAL = 269;
    const T_CONCAT_EQUAL = 270;
    const T_MOD_EQUAL = 271;
    const T_AND_EQUAL = 272;
    const T_OR_EQUAL = 273;
    const T_XOR_EQUAL = 274;
    const T_SL_EQUAL = 275;
    const T_SR_EQUAL = 276;
    const T_BOOLEAN_OR = 277;
    const T_BOOLEAN_AND = 278;
    const T_IS_EQUAL = 279;
    const T_IS_NOT_EQUAL = 280;
    const T_IS_IDENTICAL = 281;
    const T_IS_NOT_IDENTICAL = 282;
    const T_IS_SMALLER_OR_EQUAL = 283;
    const T_IS_GREATER_OR_EQUAL = 284;
    const T_SL = 285;
    const T_SR = 286;
    const T_INSTANCEOF = 287;
    const T_INC = 288;
    const T_DEC = 289;
    const T_INT_CAST = 290;
    const T_DOUBLE_CAST = 291;
    const T_STRING_CAST = 292;
    const T_ARRAY_CAST = 293;
    const T_OBJECT_CAST = 294;
    const T_BOOL_CAST = 295;
    const T_UNSET_CAST = 296;
    const T_NEW = 297;
    const T_CLONE = 298;
    const T_EXIT = 299;
    const T_IF = 300;
    const T_ELSEIF = 301;
    const T_ELSE = 302;
    const T_ENDIF = 303;
    const T_LNUMBER = 304;
    const T_DNUMBER = 305;
    const T_STRING = 306;
    const T_STRING_VARNAME = 307;
    const T_VARIABLE = 308;
    const T_NUM_STRING = 309;
    const T_INLINE_HTML = 310;
    const T_CHARACTER = 311;
    const T_BAD_CHARACTER = 312;
    const T_ENCAPSED_AND_WHITESPACE = 313;
    const T_CONSTANT_ENCAPSED_STRING = 314;
    const T_ECHO = 315;
    const T_DO = 316;
    const T_WHILE = 317;
    const T_ENDWHILE = 318;
    const T_FOR = 319;
    const T_ENDFOR = 320;
    const T_FOREACH = 321;
    const T_ENDFOREACH = 322;
    const T_DECLARE = 323;
    const T_ENDDECLARE = 324;
    const T_AS = 325;
    const T_SWITCH = 326;
    const T_ENDSWITCH = 327;
    const T_CASE = 328;
    const T_DEFAULT = 329;
    const T_BREAK = 330;
    const T_CONTINUE = 331;
    const T_GOTO = 332;
    const T_FUNCTION = 333;
    const T_CONST = 334;
    const T_RETURN = 335;
    const T_TRY = 336;
    const T_CATCH = 337;
    const T_THROW = 338;
    const T_USE = 339;
    const T_INSTEADOF = 340;
    const T_GLOBAL = 341;
    const T_STATIC = 342;
    const T_ABSTRACT = 343;
    const T_FINAL = 344;
    const T_PRIVATE = 345;
    const T_PROTECTED = 346;
    const T_PUBLIC = 347;
    const T_VAR = 348;
    const T_UNSET = 349;
    const T_ISSET = 350;
    const T_EMPTY = 351;
    const T_HALT_COMPILER = 352;
    const T_CLASS = 353;
    const T_TRAIT = 354;
    const T_INTERFACE = 355;
    const T_EXTENDS = 356;
    const T_IMPLEMENTS = 357;
    const T_OBJECT_OPERATOR = 358;
    const T_DOUBLE_ARROW = 359;
    const T_LIST = 360;
    const T_ARRAY = 361;
    const T_CALLABLE = 362;
    const T_CLASS_C = 363;
    const T_TRAIT_C = 364;
    const T_METHOD_C = 365;
    const T_FUNC_C = 366;
    const T_LINE = 367;
    const T_FILE = 368;
    const T_COMMENT = 369;
    const T_DOC_COMMENT = 370;
    const T_OPEN_TAG = 371;
    const T_OPEN_TAG_WITH_ECHO = 372;
    const T_CLOSE_TAG = 373;
    const T_WHITESPACE = 374;
    const T_START_HEREDOC = 375;
    const T_END_HEREDOC = 376;
    const T_DOLLAR_OPEN_CURLY_BRACES = 377;
    const T_CURLY_OPEN = 378;
    const T_PAAMAYIM_NEKUDOTAYIM = 379;
    const T_NAMESPACE = 380;
    const T_NS_C = 381;
    const T_DIR = 382;
    const T_NS_SEPARATOR = 383;
    // }}}

    /* @var array Map of token ids to their respective names */
    protected static $terminals = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "'?'",
        "':'",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "']'",
        "'`'",
        "'\"'"
        , "???"
    );

    /* @var array Map which translates lexer tokens to internal tokens */
    protected static $translate = array(
            0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,   47,  148,  149,  145,   46,   30,  149,
          143,  144,   44,   41,    7,   42,   43,   45,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,   25,  140,
           35,   12,   37,   24,   59,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,   60,  149,  146,   29,  149,  147,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  141,   28,  142,   49,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,  149,  149,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   13,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   26,   27,   31,
           32,   33,   34,   36,   38,   39,   40,   48,   50,   51,
           52,   53,   54,   55,   56,   57,   58,   61,   62,   63,
           64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,  149,  149,   75,   76,   77,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  149,
          149,  149,  149,  149,  149,  131,  132,  133,  134,  135,
          136,  137,  138,  139
    );

    protected static $yyaction = array(
           60,   61,  361,   62,   63,-32766,-32766,-32766,  261,   64,
          710,  711,  712,  709,  708,  707,-32766,-32766,-32766,-32766,
        -32766,-32766,  132,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,-32766,  334,-32766,-32766,-32766,-32766,-32766,   65,
           66,  350,  665,  666,  274,   67,  548,   68,  232,  233,
           69,   70,   71,   72,   73,   74,   75,   76,   29,  245,
           77,  335,  362, -114,    0,  848,  836,  837,  363,  640,
          893,  224,  590,  126,  838,   52,   26,  364,  348,  365,
          240,  366,  924,  367,  926,  925,  368,-32766,-32766,-32766,
           41,   42,  369,  338, -110,   43,  370,  336,   78,  296,
          293,  291,  292,-32766,  921,-32766,-32766,  371,  372,  373,
          374,  375,  390,   40,  359,  337,  573,  612,  376,  377,
          378,  379,-32766,  842,  843,  844,  845,  839,  840,  252,
          206,   86,   87,   88,  390,  846,  841,  337,  596,  519,
          128,   79,  509,  272,  797,  256,  260,   46,  893,   89,
           90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
          100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
          802,  246,  378,  107,  108,  109,  238,  246,   21,-32766,
          309,-32766,-32766,-32766,  641,  548,-32766,-32766,-32766,-32766,
           55,  352,-32766,-32766,-32766,   57,-32766,-32766,-32766,-32766,
        -32766,   54,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,  588,-32766,-32766,  689,-32766,  548,  675,-32766,  389,
        -32766,  272,  347,-32766,-32766,-32766,-32766,-32766,  228,-32766,
          227,-32766,  587,  557,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,   45,  236,-32766,-32766,  914,-32766,  684,  251,-32766,
          389,-32766,  198,  332,  887,-32766,-32766,-32766,  270,  445,
          914,  234,  435,  468,-32766,  897,   58,  702,  239,  518,
          548,  123,  279,   34,-32766,  332,  124,-32766,-32766,-32766,
          270,-32766,  122,-32766,   39,-32766,-32766,-32766,-32766,  702,
          229,  205,-32766,-32766,-32766,-32766,  607,-32766,-32766,  610,
        -32766,  548,  134,-32766,  389,-32766,  460,  353,-32766,-32766,
        -32766,-32766,-32766,  121,-32766,  237,-32766,  859,  858,-32766,
          848,  609,  199,-32766,-32766,-32766,  258,  280,-32766,-32766,
          129,-32766,  426,  129,-32766,  389,  130,  200,  332,  694,
        -32766,-32766,-32766,  270,-32766,-32766,-32766,  125,  345,-32766,
          521,  201,  702,  488,   27,  548,  104,  105,  106,-32766,
          499,  500,-32766,-32766,-32766,  542,-32766,  532,-32766,  600,
        -32766,-32766,-32766,-32766,  135,  298,  525,-32766,-32766,-32766,
        -32766,  527,-32766,-32766,  611,-32766,  548,  539,-32766,  389,
        -32766,  665,  666,-32766,-32766,-32766,-32766,-32766,  528,-32766,
          538,-32766,  554,  523,-32766,  699,  543,  133,-32766,-32766,
        -32766,  688,  535,-32766,-32766,  246,-32766,   53,   59,-32766,
          389,   56,  506,  549,  245,-32766,-32766,-32766,  412,  416,
          415,  470,  223,  453,-32766,  404,  505,  242,  401,  346,
          548,  317,  344,  805,-32766,  271,  562,-32766,-32766,-32766,
          548,-32766,  914,-32766,  517,-32766,-32766,-32766,-32766,  919,
          829,  564,-32766,-32766,-32766,-32766,  851,-32766,-32766,  696,
        -32766,  548,  486,-32766,  389,-32766,  402,  484,-32766,-32766,
        -32766,-32766,-32766, -157,-32766,  403,-32766,  504,  493,-32766,
          417,  277,  278,-32766,-32766,-32766, -154,  336,-32766,-32766,
          613,-32766,  358,  502,-32766,  389,  273,  371,  372,  494,
        -32766,-32766,-32766,  343,  269,-32766,  573,  612,  376,  377,
          482,  548,  268,  614,  847,-32766,  345,  522,-32766,-32766,
        -32766,  204,-32766,   48,-32766,  520,-32766,  408,   85,-32766,
          795,  583,-32766,-32766,-32766,-32766,-32766,  259,-32766,-32766,
         -335,-32766,  548,  257,-32766,  389,-32766, -336,  423,-32766,
        -32766,-32766,-32766,-32766, -277,-32766, -278,-32766,  589, -269,
        -32766,  342,  487,  513,-32766,-32766,-32766,  469,  336,-32766,
        -32766,  311,-32766,  264,  263,-32766,  389,  693,  371,  372,
          695,  581,-32766,-32766,  586,  624,-32766,  573,  612,  376,
          377,  626,  548,  576,  635,  634,-32766,  598,  628,-32766,
        -32766,-32766,  643,-32766,  578,-32766,  592,-32766,  202,  203,
        -32766,  599,-32766,-32766,-32766,-32766,-32766,  531,  530,-32766,
        -32766,   51,-32766,   50,  584,-32766,  389,  196,  582,  591,
          558,  685,  692,-32766,  127,  836,  837,  541,  537,-32766,
          534,  524,  533,  838,   47,  110,  111,  112,  113,  114,
          115,  116,  117,  118,  119,  120,  529,  249,  890,  336,
          329,  633,  585,-32766,  250,  290,  336,  329,  632,  371,
          372,  923,  290,  888,  898,  677,  371,  372,  553,  612,
          376,  377,  739,  741,  827,  553,  612,  376,  377,  878,
          450,  892,  842,  843,  844,  845,  839,  840,  319,  894,
          276,  920,  477,  922,  846,  841,  556,  276,  336,  329,
        -32766,   37,-32766,  555,  290,   36,   35,   33,  371,  372,
           32,  247,   31,   30,  225,  226,  275,  553,  612,  376,
          377,-32767,-32767,-32767,-32767,  102,  103,  104,  105,  106,
          336,  328,  330,  230,  336,-32766,  231,  235,  197,  276,
          371,  372, -335,  137,  371,  372,  776,  336,  136,  573,
          612,  376,  377,  573,  612,  376,  377,  371,  372,  131,
           84,  248,   83,  336,   44,    0,  573,  612,  376,  377,
           49,   38,   80,  371,  372,   82,  336,  608,  489,   81,
          336,  574,  573,  612,  376,  377,  371,  372,  454,  903,
          371,  372,  800,  336,  331,  573,  612,  376,  377,  573,
          612,  376,  377,  371,  372,  516,  830,  780,  772,  515,
          700,  507,  573,  612,  376,  377,  479,  548,  336,  893,
          297,   28,  336,  603,   25,  872,   20,  798,  371,  372,
          855, -111,  371,  372,-32766,-32766,-32766,  573,  612,  376,
          377,  573,  612,  376,  377,  808,  854,  875,  807,  835,
        -32766,  812,-32766,-32766,-32766,-32766,  876,  810,  809,  806,
          793,  777,  508,  481,  444,  357,  354,    0,  318,  299,
           24,    0,   23,   22, -110,    0,    0,  918,  826,  889,
          873,  877,  891,  390,  811,  794,  337,    0,    0,    0,
          339,    0,  272
    );

    protected static $yycheck = array(
            2,    3,    4,    5,    6,    8,    9,   10,   75,   11,
          104,  105,  106,  107,  108,  109,    8,    9,   10,    8,
            9,   24,   60,   26,   27,   28,   29,   30,   31,   32,
           33,   34,   24,    7,   26,   27,   28,   29,   30,   41,
           42,    7,  123,  124,    7,   47,   70,   49,   50,   51,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,  144,    0,  132,   68,   69,   70,   25,
           72,  121,   74,    7,   76,   77,   78,   79,    7,   81,
           30,   83,   70,   85,   72,   73,   88,    8,    9,   10,
           92,   93,   94,   95,  144,   97,   98,   95,  100,    7,
            7,  103,  104,   24,  142,   26,   27,  105,  106,  111,
          112,  113,  136,    7,    7,  139,  114,  115,  116,  117,
          122,  123,    8,  125,  126,  127,  128,  129,  130,  131,
           12,    8,    9,   10,  136,  137,  138,  139,  140,  141,
           25,  143,   70,  145,  142,  147,  148,   24,   72,   26,
           27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
          144,   48,  122,   44,   45,   46,   30,   48,  144,   64,
           72,    8,    9,   10,  140,   70,    8,    9,   10,   74,
           60,   25,   77,   78,   79,   60,   81,   24,   83,   26,
           85,   60,   24,   88,   26,   27,   28,   92,   93,   94,
           64,  140,   97,   98,  142,  100,   70,   72,  103,  104,
           74,  145,    7,   77,   78,   79,  111,   81,    7,   83,
           30,   85,  140,  140,   88,    8,    9,   10,   92,   93,
           94,  133,  134,   97,   98,   75,  100,  140,    7,  103,
          104,   24,    7,   96,   72,  140,  141,  111,  101,   70,
           75,   30,   70,   75,   64,   70,   60,  110,    7,   70,
           70,  141,   60,  143,   74,   96,  141,   77,   78,   79,
          101,   81,  141,   83,    7,   85,  140,  141,   88,  110,
          145,   12,   92,   93,   94,   64,   30,   97,   98,  142,
          100,   70,  141,  103,  104,   74,  145,  141,   77,   78,
           79,  111,   81,   12,   83,   30,   85,  132,  148,   88,
          132,  142,   12,   92,   93,   94,  120,  145,   97,   98,
          141,  100,  120,  141,  103,  104,  141,   12,   96,  140,
          140,  141,  111,  101,    8,    9,   10,  141,  139,   64,
          141,   12,  110,   65,   66,   70,   41,   42,   43,   74,
           65,   66,   77,   78,   79,   25,   81,   25,   83,   25,
           85,  140,  141,   88,   90,   91,   25,   92,   93,   94,
           64,   25,   97,   98,  142,  100,   70,   25,  103,  104,
           74,  123,  124,   77,   78,   79,  111,   81,   25,   83,
           25,   85,  140,  141,   88,  140,  141,   25,   92,   93,
           94,  140,  141,   97,   98,   48,  100,   60,   60,  103,
          104,   60,   67,   70,   61,  140,  141,  111,   79,   70,
           70,   99,   87,   87,   64,   70,   70,   87,   70,   70,
           70,   71,   70,   72,   74,  102,   70,   77,   78,   79,
           70,   81,   75,   83,   70,   85,  140,  141,   88,   70,
          144,   70,   92,   93,   94,   64,   70,   97,   98,   70,
          100,   70,   72,  103,  104,   74,   70,   72,   77,   78,
           79,  111,   81,   72,   83,   72,   85,   72,   86,   88,
           87,   75,   75,   92,   93,   94,   87,   95,   97,   98,
          115,  100,   95,   89,  103,  104,  118,  105,  106,   89,
          140,  141,  111,   95,  119,   64,  114,  115,  116,  117,
          101,   70,  118,  115,  132,   74,  139,  141,   77,   78,
           79,  121,   81,  121,   83,  141,   85,  139,  141,   88,
          147,  140,  141,   92,   93,   94,   64,  120,   97,   98,
          120,  100,   70,  120,  103,  104,   74,  120,  122,   77,
           78,   79,  111,   81,  135,   83,  135,   85,  140,  135,
           88,  139,  146,  135,   92,   93,   94,  135,   95,   97,
           98,  135,  100,  135,  135,  103,  104,  140,  105,  106,
          140,  140,  141,  111,  140,  140,   64,  114,  115,  116,
          117,  140,   70,  140,  140,  140,   74,  140,  140,   77,
           78,   79,  140,   81,  140,   83,  140,   85,   41,   42,
           88,  140,  140,  141,   92,   93,   94,  140,  140,   97,
           98,  140,  100,  140,  140,  103,  104,   60,  140,  140,
          140,  140,  140,  111,  141,   68,   69,  141,  141,   72,
          141,  141,  141,   76,   12,   13,   14,   15,   16,   17,
           18,   19,   20,   21,   22,   23,  141,  143,  142,   95,
           96,  142,  140,  141,  143,  101,   95,   96,  142,  105,
          106,  142,  101,  142,  142,  142,  105,  106,  114,  115,
          116,  117,   50,   51,  142,  114,  115,  116,  117,  142,
          123,  142,  125,  126,  127,  128,  129,  130,  131,  142,
          136,  142,  142,  142,  137,  138,  142,  136,   95,   96,
          143,  143,  145,  142,  101,  143,  143,  143,  105,  106,
          143,  143,  143,  143,  143,  143,  143,  114,  115,  116,
          117,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           95,  143,  143,  143,   95,  143,  143,  143,  143,  136,
          105,  106,  120,  143,  105,  106,  144,   95,  143,  114,
          115,  116,  117,  114,  115,  116,  117,  105,  106,  143,
          143,  143,  143,   95,  143,   -1,  114,  115,  116,  117,
          143,  143,  143,  105,  106,  143,   95,  142,   80,  143,
           95,  142,  114,  115,  116,  117,  105,  106,  144,  144,
          105,  106,  144,   95,  142,  114,  115,  116,  117,  114,
          115,  116,  117,  105,  106,   82,  144,  144,  144,  144,
          142,   84,  114,  115,  116,  117,  144,   70,   95,   72,
          144,  144,   95,  142,  144,  146,  144,  142,  105,  106,
          146,  144,  105,  106,    8,    9,   10,  114,  115,  116,
          117,  114,  115,  116,  117,  144,  144,  144,  144,  144,
           24,  104,   26,   27,   28,   29,  144,  144,  144,  144,
          144,  144,  144,  144,  144,  144,  144,   -1,  144,  144,
          144,   -1,  144,  144,  144,   -1,   -1,  146,  146,  146,
          146,  146,  146,  136,  146,  146,  139,   -1,   -1,   -1,
          143,   -1,  145
    );

    protected static $yybase = array(
            0,  574,  581,  623,  659,  672,  718,  402,  747,  655,
            2,  705,  743,  701,  688,  483,  483,  483,  483,  483,
          356,  373,  342,  362,  342,  351,   -2,   -2,   -2,  231,
          231,  285,  285,  285,  285,  285,  285,  285,  285,  231,
          285,  451,  401,  532,  316,  370,  115,  200,  146,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
          482,  482,  482,  482,  482,  482,  482,  482,   44,  499,
          412,  498,  494,  454,  467,  684,  683,  682,  700,  702,
          345,  696,  569,  567,  382,  559,  557,  526,  552,  543,
          570,  542,  692,  426,  541,  697,  685,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  114,   11,  336,  336,
          336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
          336,  336,  336,  227,  227,  173,  577,  577,  577,  577,
          577,  577,  577,  577,  577,  577,  577,   79,  178,  846,
            8,   -3,   -3,   -3,   -3,  642,  706,  706,  706,  706,
          242,  157,  179,   50,   50,  436,  436,  363,  436,  503,
          767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
          767,  411,  384,  315,  315,  612,  612,  -81,  -81,  -81,
          -81,  268,  -67,  185,  170,   72,  416,  195,  195,  195,
          417,  392,  377,  192,  189,  129,  129,  129,  -24,  -24,
          -24,  -24,  397,  -24,  -24,  -24,  209,  108,  108,   12,
          161,  420,  536,  271,  414,  529,  431,  130,  206,  262,
          432,  145,  418,  432,  288,  295,  145,  166,   44,  265,
          434,  135,  428,  359,  500,  403,   93,   92,   71,  212,
          141,  182,   34,  346,  664,  622,  668,  -38,  437,  188,
          141,  -50,  665,  501,  107,   26,  502,  199,  266,  406,
          360,  332,  406,  400,  266,  641,  266,  380,  266,  363,
          277,  583,  380,  266,  404,  380,  388,  406,  413,  395,
          360,  266,  488,  487,  419,  245,  332,  419,  266,  400,
           64,  649,  656,  344,  652,  647,  639,  609,  637,  368,
          394,  385,  408,  610,  613,  614,  365,  372,  591,  590,
          398,  369,  301,  357,  449,  587,  584,  361,  433,  418,
          387,  367,  430,  589,  448,  430,  759,  446,  429,  427,
          349,  481,  310,  325,  386,  398,  744,  393,  353,  588,
          740,  430,  636,  493,   66,  339,  638,  376,  430,  524,
          430,  737,  510,  592,  430,  736,  389,  539,  398,  367,
          367,  367,  735,  106,  758,  582,  734,  733,  756,  755,
          732,  754,  578,  753,  358,  582,  725,  752,  742,  241,
          615,  434,  442,  391,  476,   37,  751,  430,  430,  525,
          397,  430,  491,  749,  739,  405,  410,  704,  392,  396,
          593,  741,  430,  407,  699,   37,  724,  648,  723,  474,
          707,  511,  608,  509,  279,  722,  118,  571,  625,  472,
          748,  746,  750,  468,  465,  415,  507,  366,  721,  620,
          375,  355,  464,  371,  738,  531,  463,  461,  506,  409,
          438,  343,  350,  399,  745,  340,  455,  450,  447,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
            0,    0,    0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,  123,  123,  123,  123,  123,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
          123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
          123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
          767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
          767,  123,  123,  123,  123,  123,  123,  123,  123,    0,
          129,  129,  129,  129,  -94,  -94,  -94,  767,  767,  767,
          767,  767,  767,  767,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  -94,  -94,  129,  129,  767,
          767,  -24,  -24,  -24,  -24,  -24,  108,  108,  108,  -24,
          108,   76,   76,   76,  108,  108,  108,  182,  182,    0,
            0,    0,    0,    0,    0,    0,   76,    0,    0,    0,
          380,    0,    0,    0,   76,  284,  284,   37,  284,  284,
          141,    0,    0,  398,  380,    0,  413,  380,    0,    0,
            0,    0,    0,    0,  589,    0,   66,  588,  215,  398,
            0,    0,    0,    0,    0,    0,    0,  398,  261,  261,
          221,    0,  358,    0,    0,    0,  221,  215,    0,    0,
           37
    );

    protected static $yydefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  103,   95,  109,   94,  105,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  361,
          361,  124,  124,  124,  124,  124,  124,  124,  124,  319,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  175,
          175,  175,32767,  351,  351,  351,  351,  351,  351,  351,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          366,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  234,  235,  237,
          238,  174,  127,  352,  365,  173,  201,  203,  252,  202,
          179,  184,  185,  186,  187,  188,  189,  190,  191,  192,
          193,  194,  178,  231,  230,  199,  316,  316,  319,32767,
        32767,32767,32767,32767,32767,32767,32767,  200,  204,  206,
          205,  221,  222,  219,  220,  177,  223,  224,  225,  226,
          159,  159,  159,32767,32767,  360,  360,32767,  360,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  160,32767,  213,  214,  279,  279,  119,  119,  119,
          119,  119,32767,32767,32767,32767,  287,32767,32767,32767,
        32767,32767,  289,32767,32767,  208,  209,  207,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  288,32767,32767,
        32767,32767,32767,32767,32767,32767,  337,  324,  275,32767,
        32767,32767,  268,32767,  106,  108,32767,32767,32767,32767,
          305,  342,32767,32767,32767,   17,32767,32767,32767,  373,
          337,32767,32767,   19,32767,32767,32767,32767,  229,32767,
          341,  335,32767,32767,32767,32767,32767,32767,   62,32767,
        32767,32767,32767,32767,   62,  284,   62,32767,   62,32767,
          318,  290,32767,   62,   73,32767,   71,32767,32767,   75,
        32767,   62,   92,   92,  257,  318,   53,  257,   62,32767,
        32767,32767,32767,    4,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          270,32767,32767,  326,32767,  340,  339,  327,32767,  268,
        32767,  217,  196,  269,32767,  198,32767,32767,  273,  276,
        32767,32767,32767,  136,32767,  271,  182,32767,32767,32767,
        32767,  368,32767,32767,  176,32767,32767,32767,  132,32767,
           60,  335,32767,32767,  358,32767,32767,  335,  272,  210,
          211,  212,32767,  123,32767,  313,32767,32767,32767,32767,
        32767,32767,  330,32767,  336,32767,32767,32767,32767,  113,
        32767,  305,32767,32767,32767,   74,32767,  180,  128,32767,
        32767,  367,32767,32767,32767,32767,  323,32767,32767,32767,
        32767,32767,   61,32767,32767,   76,32767,32767,32767,32767,
          335,32767,32767,32767,  117,32767,  171,32767,32767,32767,
        32767,32767,  335,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,    4,
        32767,  153,32767,32767,32767,32767,32767,32767,32767,   25,
           25,    3,  139,    3,  139,   25,  100,   25,   25,  139,
           92,   92,   25,   25,   25,  146,   25,   25,   25,   25,
           25,   25,   25,   25
    );

    protected static $yygoto = array(
          140,  140,  172,  172,  172,  172,  172,  172,  172,  172,
          140,  172,  141,  142,  143,  147,  152,  154,  180,  174,
          171,  171,  171,  171,  173,  173,  173,  173,  173,  173,
          173,  167,  168,  169,  170,  178,  759,  760,  391,  762,
          783,  784,  785,  786,  787,  788,  789,  791,  727,  144,
          145,  146,  148,  149,  150,  151,  153,  176,  177,  179,
          195,  207,  208,  209,  210,  211,  212,  213,  214,  216,
          217,  218,  219,  243,  244,  265,  266,  267,  429,  430,
          431,  181,  182,  183,  184,  185,  186,  187,  188,  189,
          190,  191,  192,  155,  156,  157,  158,  175,  159,  193,
          160,  161,  162,  163,  194,  164,  138,  165,  166,  451,
          451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
          452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
          452,  552,  552,  552,  462,  490,  393,  393,  393,  393,
          393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
          393,  393,  393,  393,  406,  282,  656,  656,  813,  813,
          664,  664,  664,  664,  664,  551,  551,  551,  510,  398,
          398,  567,  681,  631,  852,  853,  866,  662,  716,  594,
          221,  621,  621,  621,  621,  222,  616,  622,  495,  394,
          394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
          394,  394,  394,  394,  394,  394,  394,  464,  471,  514,
          425,  397,  397,  321,  492,  424,  424,  457,  424,  418,
          420,  420,  392,  395,  411,  421,  427,  458,  461,  472,
          480,    5,  475,  283,  326,    1,   15,    2,    6,    7,
          550,  550,  550,    8,    9,   10,  907,   16,   11,   17,
           12,   18,   13,   19,   14,  706,  327,  399,  399,  642,
          627,  625,  623,  625,  526,  400,  651,  646,  850,  850,
          850,  850,  850,  850,  850,  850,  850,  850,  850,  436,
          437,  440,  446,  476,  478,  498,  289,  913,  913,  884,
          884,  670,  883,  883,  262,  916,  913,  302,  254,  485,
          305,  864,  725,  305,  899,  899,  899,  310,  310,  310,
          491,  916,  916,  438,  439,  441,  443,  447,  474,  882,
          322,  303,  310,  409,  825,  824,  900,  315,  419,  771,
          320,  660,  284,  285,  559,  673,  465,  323,  536,  565,
          804,  678,  861,  497,  630,  602,    0,  405,  496,    0,
            0,    0,  313,    0,  714,  428,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  410
    );

    protected static $yygcheck = array(
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   35,
           35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
           88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
           88,    7,    7,    7,   21,   21,   35,   35,   35,   35,
           35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
           35,   35,   35,   35,   72,   45,   50,   50,   35,   35,
           35,   35,   35,   35,   35,    6,    6,    6,   35,   88,
           88,   12,   12,   12,   12,   12,   12,   12,   12,   29,
           41,   35,   35,   35,   35,   41,   35,   35,   35,   84,
           84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
           84,   84,   84,   84,   84,   84,   84,   37,   37,   37,
           76,   84,   84,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   13,   43,   43,   43,    2,   13,    2,   13,   13,
            5,    5,    5,   13,   13,   13,  106,   13,   13,   13,
           13,   13,   13,   13,   13,   69,   69,   91,   91,    5,
            5,    5,    5,    5,    5,    5,    5,    5,   95,   95,
           95,   95,   95,   95,   95,   95,   95,   95,   95,   54,
           54,   54,   54,   54,   54,   54,    4,  107,  107,   85,
           85,   56,   86,   86,   94,  107,  107,   26,   94,   96,
            4,   99,   72,    4,   86,   86,   86,   92,   92,   92,
           28,  107,  107,   87,   87,   87,   87,   87,   87,   86,
           80,   36,   92,   36,   93,   93,  104,   27,   36,   73,
           92,   52,   45,   45,   10,   57,   36,    9,   47,   11,
           82,   58,   98,   36,   44,   34,   -1,    4,   78,   -1,
           -1,   -1,    4,   -1,   71,    4,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   72
    );

    protected static $yygbase = array(
            0,    0, -286,    0,   10,  239,  164,  130,    0,    5,
           41,   -8,  -28, -289,    0,  -29,    0,    0,    0,    0,
            0,   84,    0,    0,    0,    0,  245,   96,   86,  155,
          -10,    0,    0,    0,  -11,  -87,  -15,  -41,    0,    0,
            0, -344,    0,  -37,   -6, -198,    0,   40,    0,    0,
          -67,    0,   80,    0,  247,    0,  251,   39,   -7,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
            0,   -5,   75,   83,    0,    0,  180,    0,   -9,    0,
           94,    0,    6,    0,  -34,   44,   47,  259,  -76,    0,
            0,   12,   50,   66,   38,   72,  102,    0,  -13,  103,
            0,    0,    0,    0,   98,    0,  207,   34,    0
    );

    protected static $yygdefault = array(
        -32768,  360,    3,  546,  380,  570,  571,  572,  306,  304,
          560,  566,  466,    4,  568,  139,  294,  575,  295,  501,
          577,  413,  579,  580,  307,  308,  414,  314,  463,  593,
          215,  312,  595,  356,  601,  300,  503,  448,  381,  349,
          459,  220,  422,  455,  629,  281,  637,  540,  645,  648,
          382,  449,  659,  351,  432,  433,  669,  674,  679,  682,
          333,  324,  473,  686,  687,  255,  691,  511,  512,  705,
          241,  713,  726,  341,  790,  792,  396,  407,  483,  799,
          316,  325,  803,  383,  384,  385,  386,  434,  821,  818,
          288,  869,  286,  442,  253,  856,  467,  355,  906,  865,
          287,  387,  388,  301,  901,  340,  908,  915,  456
    );

    protected static $yylhs = array(
            0,    1,    2,    2,    4,    4,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    8,    8,   10,   10,   10,
           10,    9,    9,   11,   13,   13,   14,   14,   14,   14,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,   33,   33,   34,
           27,   27,   36,   36,    6,    7,    7,    7,   38,   38,
           38,   39,   39,   42,   42,   40,   40,   43,   43,   22,
           22,   29,   29,   32,   32,   31,   31,   44,   23,   23,
           23,   23,   45,   45,   46,   46,   47,   47,   20,   20,
           16,   16,   48,   18,   18,   49,   17,   17,   19,   19,
           28,   28,   28,   37,   37,   51,   51,   52,   52,   53,
           53,   53,   53,   54,   54,   55,   55,   56,   56,   24,
           24,   57,   57,   57,   25,   25,   58,   58,   41,   41,
           59,   59,   59,   59,   64,   64,   65,   65,   66,   66,
           66,   66,   67,   68,   68,   63,   63,   60,   60,   62,
           62,   70,   70,   69,   69,   69,   69,   69,   69,   61,
           61,   71,   71,   26,   26,   21,   21,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
           15,   15,   15,   15,   15,   72,   50,   78,   78,   81,
           81,   82,   83,   83,   83,   83,   83,   83,   88,   88,
           35,   35,   35,   73,   73,   89,   89,   84,   84,   90,
           90,   90,   90,   90,   74,   74,   74,   77,   77,   77,
           79,   79,   95,   95,   95,   95,   95,   95,   95,   95,
           95,   95,   95,   95,   95,   95,   12,   12,   12,   12,
           12,   12,   75,   75,   75,   75,   96,   96,   98,   98,
           97,   97,   99,   99,   30,   30,   30,   30,  101,  101,
          100,  100,  100,  100,  100,  102,  102,   86,   86,   91,
           91,   85,   85,  103,  103,  103,  103,   92,   92,   92,
           92,   87,   87,   93,   93,   93,   80,   80,  104,  104,
          104,   76,   76,  105,  105,  106,  106,  106,  106,   94,
           94,   94,   94,  107,  107,  107,  107,  107,  107,  107,
          108,  108,  108
    );

    protected static $yylen = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            3,    5,    4,    3,    3,    3,    1,    1,    3,    2,
            4,    3,    1,    3,    2,    0,    1,    1,    1,    1,
            3,    7,   10,    5,    7,    9,    5,    2,    3,    2,
            3,    2,    3,    3,    3,    3,    1,    2,    5,    7,
            9,    5,    1,    5,    3,    3,    2,    1,    2,    8,
            1,    3,    0,    1,    9,    7,    6,    5,    1,    2,
            2,    0,    2,    0,    2,    0,    2,    1,    3,    1,
            4,    1,    4,    1,    4,    1,    3,    3,    3,    4,
            4,    5,    0,    2,    4,    3,    1,    1,    1,    4,
            0,    2,    5,    0,    2,    6,    0,    2,    0,    3,
            1,    2,    1,    1,    0,    1,    3,    3,    5,    0,
            1,    1,    1,    1,    0,    1,    3,    1,    2,    3,
            1,    1,    2,    4,    3,    1,    1,    3,    2,    0,
            3,    3,    8,    3,    1,    3,    0,    2,    4,    5,
            4,    4,    3,    1,    1,    1,    3,    1,    1,    0,
            1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
            3,    1,    3,    3,    1,    0,    1,    1,    3,    3,
            4,    4,    1,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            5,    4,    4,    4,    2,    2,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    1,    4,
            3,    3,    2,    9,   10,    3,    4,    0,    4,    1,
            3,    2,    4,    6,    8,    4,    4,    4,    1,    1,
            1,    2,    3,    1,    1,    1,    1,    1,    1,    0,
            3,    3,    4,    4,    0,    2,    3,    0,    1,    1,
            0,    3,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    3,    2,    1,    1,    3,    2,    2,
            4,    3,    1,    3,    3,    3,    0,    2,    0,    1,
            3,    1,    3,    1,    1,    1,    1,    1,    6,    4,
            3,    6,    4,    4,    4,    1,    3,    1,    2,    1,
            1,    4,    1,    3,    6,    4,    4,    4,    4,    1,
            4,    0,    1,    1,    3,    1,    3,    1,    1,    4,
            0,    0,    2,    3,    1,    3,    1,    4,    2,    2,
            2,    1,    2,    1,    4,    3,    3,    3,    6,    3,
            1,    1,    1
    );

    protected $yyval;
    protected $yyastk;
    protected $stackPos;
    protected $lexer;

    /**
     * Creates a parser instance.
     *
     * @param PHPParser_Lexer $lexer A lexer
     */
    public function __construct(PHPParser_Lexer $lexer) {
        $this->lexer = $lexer;
    }

    /**
     * Parses PHP code into a node tree.
     *
     * @param string $code The source code to parse
     *
     * @return array Array of statements
     */
    public function parse($code) {
        $this->lexer->startLexing($code);

        // We start off with no lookahead-token
        $tokenId = self::TOKEN_NONE;

        // The attributes for a node are taken from the first and last token of the node.
        // From the first token only the startAttributes are taken and from the last only
        // the endAttributes. Both are merged using the array union operator (+).
        $startAttributes = array('startLine' => 1);
        $endAttributes   = array();

        // In order to figure out the attributes for the starting token, we have to keep
        // them in a stack
        $attributeStack = array($startAttributes);

        // Start off in the initial state and keep a stack of previous states
        $state = 0;
        $stateStack = array($state);

        // AST stack (?)
        $this->yyastk = array();

        // Current position in the stack(s)
        $this->stackPos = 0;

        for (;;) {
            if (self::$yybase[$state] == 0) {
                $yyn = self::$yydefault[$state];
            } else {
                if ($tokenId === self::TOKEN_NONE) {
                    // fetch the next token id from the lexer and fetch additional info by-ref
                    $origTokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $endAttributes);

                    // map the lexer token id to the internally used token id's
                    $tokenId = $origTokenId >= 0 && $origTokenId < self::TOKEN_MAP_SIZE
                        ? self::$translate[$origTokenId]
                        : self::TOKEN_INVALID;

                    if ($tokenId === self::TOKEN_INVALID) {
                        throw new RangeException(sprintf(
                            'The lexer returned an invalid token (id=%d, value=%s)',
                            $origTokenId, $tokenValue
                        ));
                    }

                    $attributeStack[$this->stackPos] = $startAttributes;
                }

                if ((($yyn = self::$yybase[$state] + $tokenId) >= 0
                     && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokenId
                     || ($state < self::YY2TBLSTATE
                        && ($yyn = self::$yybase[$state + self::YYNLSTATES] + $tokenId) >= 0
                        && $yyn < self::YYLAST
                        && self::$yycheck[$yyn] == $tokenId))
                    && ($yyn = self::$yyaction[$yyn]) != self::YYDEFAULT) {
                    /*
                     * >= YYNLSTATE: shift and reduce
                     * > 0: shift
                     * = 0: accept
                     * < 0: reduce
                     * = -YYUNEXPECTED: error
                     */
                    if ($yyn > 0) {
                        /* shift */
                        ++$this->stackPos;

                        $stateStack[$this->stackPos]     = $state = $yyn;
                        $this->yyastk[$this->stackPos]   = $tokenValue;
                        $attributeStack[$this->stackPos] = $startAttributes;
                        $tokenId = self::TOKEN_NONE;

                        if ($yyn < self::YYNLSTATES)
                            continue;

                        /* $yyn >= YYNLSTATES means shift-and-reduce */
                        $yyn -= self::YYNLSTATES;
                    } else {
                        $yyn = -$yyn;
                    }
                } else {
                    $yyn = self::$yydefault[$state];
                }
            }

            for (;;) {
                /* reduce/error */
                if ($yyn == 0) {
                    /* accept */
                    return $this->yyval;
                } elseif ($yyn != self::YYUNEXPECTED) {
                    /* reduce */
                    try {
                        $this->{'yyn' . $yyn}(
                            $attributeStack[$this->stackPos - self::$yylen[$yyn]]
                            + $endAttributes
                        );
                    } catch (PHPParser_Error $e) {
                        if (-1 === $e->getRawLine()) {
                            $e->setRawLine($startAttributes['startLine']);
                        }

                        throw $e;
                    }

                    /* Goto - shift nonterminal */
                    $this->stackPos -= self::$yylen[$yyn];
                    $yyn = self::$yylhs[$yyn];
                    if (($yyp = self::$yygbase[$yyn] + $stateStack[$this->stackPos]) >= 0
                         && $yyp < self::YYGLAST
                         && self::$yygcheck[$yyp] == $yyn) {
                        $state = self::$yygoto[$yyp];
                    } else {
                        $state = self::$yygdefault[$yyn];
                    }

                    ++$this->stackPos;

                    $stateStack[$this->stackPos]     = $state;
                    $this->yyastk[$this->stackPos]   = $this->yyval;
                    $attributeStack[$this->stackPos] = $startAttributes;
                } else {
                    /* error */
                    throw new PHPParser_Error(
                        'Unexpected token ' . self::$terminals[$tokenId],
                        $startAttributes['startLine']
                    );
                }

                if ($state < self::YYNLSTATES)
                    break;
                /* >= YYNLSTATES means shift-and-reduce */
                $yyn = $state - self::YYNLSTATES;
            }
        }
    }

    protected function yyn0() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn1($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Namespace::postprocess($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn2($attributes) {
         if (is_array($this->yyastk[$this->stackPos-(2-2)])) { $this->yyval = array_merge($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); } else { $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; }; 
    }

    protected function yyn3($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn4($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn5($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn6($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn7($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn8($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn9($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function yyn10($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Namespace(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(3-2)], $attributes), null, $attributes); 
    }

    protected function yyn11($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Namespace(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(5-2)], $attributes), $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn12($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Namespace(null, $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn13($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Use($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn14($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Const($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn15($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn16($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn17($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_UseUse(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(1-1)], $attributes), null, $attributes); 
    }

    protected function yyn18($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_UseUse(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(3-1)], $attributes), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn19($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_UseUse(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(2-2)], $attributes), null, $attributes); 
    }

    protected function yyn20($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_UseUse(new PHPParser_Node_Name($this->yyastk[$this->stackPos-(4-2)], $attributes), $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn21($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn22($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn23($attributes) {
         $this->yyval = new PHPParser_Node_Const($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn24($attributes) {
         if (is_array($this->yyastk[$this->stackPos-(2-2)])) { $this->yyval = array_merge($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); } else { $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; }; 
    }

    protected function yyn25($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn26($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn27($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn28($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn29($attributes) {
         throw new PHPParser_Error('__halt_compiler() can only be used from the outermost scope'); 
    }

    protected function yyn30($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn31($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_If($this->yyastk[$this->stackPos-(7-3)], array('stmts' => is_array($this->yyastk[$this->stackPos-(7-5)]) ? $this->yyastk[$this->stackPos-(7-5)] : array($this->yyastk[$this->stackPos-(7-5)]), 'elseifs' => $this->yyastk[$this->stackPos-(7-6)], 'else' => $this->yyastk[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function yyn32($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_If($this->yyastk[$this->stackPos-(10-3)], array('stmts' => $this->yyastk[$this->stackPos-(10-6)], 'elseifs' => $this->yyastk[$this->stackPos-(10-7)], 'else' => $this->yyastk[$this->stackPos-(10-8)]), $attributes); 
    }

    protected function yyn33($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_While($this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn34($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Do($this->yyastk[$this->stackPos-(7-5)], is_array($this->yyastk[$this->stackPos-(7-2)]) ? $this->yyastk[$this->stackPos-(7-2)] : array($this->yyastk[$this->stackPos-(7-2)]), $attributes); 
    }

    protected function yyn35($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_For(array('init' => $this->yyastk[$this->stackPos-(9-3)], 'cond' => $this->yyastk[$this->stackPos-(9-5)], 'loop' => $this->yyastk[$this->stackPos-(9-7)], 'stmts' => $this->yyastk[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function yyn36($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Switch($this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn37($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Break(null, $attributes); 
    }

    protected function yyn38($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Break($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn39($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Continue(null, $attributes); 
    }

    protected function yyn40($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Continue($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn41($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Return(null, $attributes); 
    }

    protected function yyn42($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Return($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn43($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Global($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn44($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Static($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn45($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Echo($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn46($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_InlineHTML($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn47($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn48($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Unset($this->yyastk[$this->stackPos-(5-3)], $attributes); 
    }

    protected function yyn49($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Foreach($this->yyastk[$this->stackPos-(7-3)], $this->yyastk[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->yyastk[$this->stackPos-(7-5)][1], 'stmts' => $this->yyastk[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function yyn50($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Foreach($this->yyastk[$this->stackPos-(9-3)], $this->yyastk[$this->stackPos-(9-7)][0], array('keyVar' => $this->yyastk[$this->stackPos-(9-5)], 'byRef' => $this->yyastk[$this->stackPos-(9-7)][1], 'stmts' => $this->yyastk[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function yyn51($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Declare($this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn52($attributes) {
         $this->yyval = array(); /* means: no statement */ 
    }

    protected function yyn53($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TryCatch($this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn54($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Throw($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn55($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Goto($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn56($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Label($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn57($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn58($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn59($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Catch($this->yyastk[$this->stackPos-(8-3)], substr($this->yyastk[$this->stackPos-(8-4)], 1), $this->yyastk[$this->stackPos-(8-7)], $attributes); 
    }

    protected function yyn60($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn61($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn62($attributes) {
         $this->yyval = false; 
    }

    protected function yyn63($attributes) {
         $this->yyval = true; 
    }

    protected function yyn64($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Function($this->yyastk[$this->stackPos-(9-3)], array('byRef' => $this->yyastk[$this->stackPos-(9-2)], 'params' => $this->yyastk[$this->stackPos-(9-5)], 'stmts' => $this->yyastk[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function yyn65($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Class($this->yyastk[$this->stackPos-(7-2)], array('type' => $this->yyastk[$this->stackPos-(7-1)], 'extends' => $this->yyastk[$this->stackPos-(7-3)], 'implements' => $this->yyastk[$this->stackPos-(7-4)], 'stmts' => $this->yyastk[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function yyn66($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Interface($this->yyastk[$this->stackPos-(6-2)], array('extends' => $this->yyastk[$this->stackPos-(6-3)], 'stmts' => $this->yyastk[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function yyn67($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Trait($this->yyastk[$this->stackPos-(5-2)], $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn68($attributes) {
         $this->yyval = 0; 
    }

    protected function yyn69($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_ABSTRACT; 
    }

    protected function yyn70($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_FINAL; 
    }

    protected function yyn71($attributes) {
         $this->yyval = null; 
    }

    protected function yyn72($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn73($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn74($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn75($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn76($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn77($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn78($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn79($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn80($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn81($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn82($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn83($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn84($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn85($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn86($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn87($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_DeclareDeclare($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn88($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn89($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn90($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn91($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(5-3)]; 
    }

    protected function yyn92($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn93($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn94($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Case($this->yyastk[$this->stackPos-(4-2)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn95($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Case(null, $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn96() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn97() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn98($attributes) {
         $this->yyval = is_array($this->yyastk[$this->stackPos-(1-1)]) ? $this->yyastk[$this->stackPos-(1-1)] : array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn99($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-2)]; 
    }

    protected function yyn100($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn101($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn102($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_ElseIf($this->yyastk[$this->stackPos-(5-3)], is_array($this->yyastk[$this->stackPos-(5-5)]) ? $this->yyastk[$this->stackPos-(5-5)] : array($this->yyastk[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function yyn103($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn104($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn105($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_ElseIf($this->yyastk[$this->stackPos-(6-3)], $this->yyastk[$this->stackPos-(6-6)], $attributes); 
    }

    protected function yyn106($attributes) {
         $this->yyval = null; 
    }

    protected function yyn107($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Else(is_array($this->yyastk[$this->stackPos-(2-2)]) ? $this->yyastk[$this->stackPos-(2-2)] : array($this->yyastk[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function yyn108($attributes) {
         $this->yyval = null; 
    }

    protected function yyn109($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Else($this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn110($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)], false); 
    }

    protected function yyn111($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(2-2)], true); 
    }

    protected function yyn112($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)], false); 
    }

    protected function yyn113($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn114($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn115($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn116($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn117($attributes) {
         $this->yyval = new PHPParser_Node_Param(substr($this->yyastk[$this->stackPos-(3-3)], 1), null, $this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn118($attributes) {
         $this->yyval = new PHPParser_Node_Param(substr($this->yyastk[$this->stackPos-(5-3)], 1), $this->yyastk[$this->stackPos-(5-5)], $this->yyastk[$this->stackPos-(5-1)], $this->yyastk[$this->stackPos-(5-2)], $attributes); 
    }

    protected function yyn119($attributes) {
         $this->yyval = null; 
    }

    protected function yyn120($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn121($attributes) {
         $this->yyval = 'array'; 
    }

    protected function yyn122($attributes) {
         $this->yyval = 'callable'; 
    }

    protected function yyn123($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn124($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn125($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn126($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn127($attributes) {
         $this->yyval = new PHPParser_Node_Arg($this->yyastk[$this->stackPos-(1-1)], false, $attributes); 
    }

    protected function yyn128($attributes) {
         $this->yyval = new PHPParser_Node_Arg($this->yyastk[$this->stackPos-(2-2)], true, $attributes); 
    }

    protected function yyn129($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn130($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn131($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn132($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn133($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn134($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn135($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn136($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_StaticVar(substr($this->yyastk[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function yyn137($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_StaticVar(substr($this->yyastk[$this->stackPos-(3-1)], 1), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn138($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn139($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn140($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_Property($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn141($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_ClassConst($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn142($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_ClassMethod($this->yyastk[$this->stackPos-(8-4)], array('type' => $this->yyastk[$this->stackPos-(8-1)], 'byRef' => $this->yyastk[$this->stackPos-(8-3)], 'params' => $this->yyastk[$this->stackPos-(8-6)], 'stmts' => $this->yyastk[$this->stackPos-(8-8)]), $attributes); 
    }

    protected function yyn143($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TraitUse($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn144($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn145($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn146($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn147($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn148($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TraitUseAdaptation_Precedence($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn149($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TraitUseAdaptation_Alias($this->yyastk[$this->stackPos-(5-1)][0], $this->yyastk[$this->stackPos-(5-1)][1], $this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-4)], $attributes); 
    }

    protected function yyn150($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TraitUseAdaptation_Alias($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], $this->yyastk[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function yyn151($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_TraitUseAdaptation_Alias($this->yyastk[$this->stackPos-(4-1)][0], $this->yyastk[$this->stackPos-(4-1)][1], null, $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn152($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)]); 
    }

    protected function yyn153($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn154($attributes) {
         $this->yyval = array(null, $this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn155($attributes) {
         $this->yyval = null; 
    }

    protected function yyn156($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn157($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn158($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_PUBLIC; 
    }

    protected function yyn159($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_PUBLIC; 
    }

    protected function yyn160($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn161($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn162($attributes) {
         PHPParser_Node_Stmt_Class::verifyModifier($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); $this->yyval = $this->yyastk[$this->stackPos-(2-1)] | $this->yyastk[$this->stackPos-(2-2)]; 
    }

    protected function yyn163($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_PUBLIC; 
    }

    protected function yyn164($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_PROTECTED; 
    }

    protected function yyn165($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_PRIVATE; 
    }

    protected function yyn166($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_STATIC; 
    }

    protected function yyn167($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_ABSTRACT; 
    }

    protected function yyn168($attributes) {
         $this->yyval = PHPParser_Node_Stmt_Class::MODIFIER_FINAL; 
    }

    protected function yyn169($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn170($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn171($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_PropertyProperty(substr($this->yyastk[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function yyn172($attributes) {
         $this->yyval = new PHPParser_Node_Stmt_PropertyProperty(substr($this->yyastk[$this->stackPos-(3-1)], 1), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn173($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn174($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn175($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn176($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn177($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn178($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Assign($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn179($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Assign($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn180($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignRef($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn181($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignRef($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn182($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn183($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Clone($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn184($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignPlus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn185($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignMinus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn186($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignMul($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn187($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignDiv($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn188($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignConcat($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn189($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignMod($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn190($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignBitwiseAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn191($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignBitwiseOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn192($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignBitwiseXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn193($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignShiftLeft($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn194($attributes) {
         $this->yyval = new PHPParser_Node_Expr_AssignShiftRight($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn195($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PostInc($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn196($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PreInc($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn197($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PostDec($this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn198($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PreDec($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn199($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BooleanOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn200($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BooleanAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn201($attributes) {
         $this->yyval = new PHPParser_Node_Expr_LogicalOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn202($attributes) {
         $this->yyval = new PHPParser_Node_Expr_LogicalAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn203($attributes) {
         $this->yyval = new PHPParser_Node_Expr_LogicalXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn204($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BitwiseOr($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn205($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BitwiseAnd($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn206($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BitwiseXor($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn207($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Concat($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn208($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Plus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn209($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Minus($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn210($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Mul($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn211($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Div($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn212($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Mod($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn213($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ShiftLeft($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn214($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ShiftRight($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn215($attributes) {
         $this->yyval = new PHPParser_Node_Expr_UnaryPlus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn216($attributes) {
         $this->yyval = new PHPParser_Node_Expr_UnaryMinus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn217($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BooleanNot($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn218($attributes) {
         $this->yyval = new PHPParser_Node_Expr_BitwiseNot($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn219($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Identical($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn220($attributes) {
         $this->yyval = new PHPParser_Node_Expr_NotIdentical($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn221($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Equal($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn222($attributes) {
         $this->yyval = new PHPParser_Node_Expr_NotEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn223($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Smaller($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn224($attributes) {
         $this->yyval = new PHPParser_Node_Expr_SmallerOrEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn225($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Greater($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn226($attributes) {
         $this->yyval = new PHPParser_Node_Expr_GreaterOrEqual($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn227($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Instanceof($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn228($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn229($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn230($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Ternary($this->yyastk[$this->stackPos-(5-1)], $this->yyastk[$this->stackPos-(5-3)], $this->yyastk[$this->stackPos-(5-5)], $attributes); 
    }

    protected function yyn231($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Ternary($this->yyastk[$this->stackPos-(4-1)], null, $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn232($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Isset($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn233($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Empty($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn234($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Include($this->yyastk[$this->stackPos-(2-2)], PHPParser_Node_Expr_Include::TYPE_INCLUDE, $attributes); 
    }

    protected function yyn235($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Include($this->yyastk[$this->stackPos-(2-2)], PHPParser_Node_Expr_Include::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function yyn236($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Eval($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn237($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Include($this->yyastk[$this->stackPos-(2-2)], PHPParser_Node_Expr_Include::TYPE_REQUIRE, $attributes); 
    }

    protected function yyn238($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Include($this->yyastk[$this->stackPos-(2-2)], PHPParser_Node_Expr_Include::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function yyn239($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Int($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn240($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Double($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn241($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_String($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn242($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Array($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn243($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Object($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn244($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Bool($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn245($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Cast_Unset($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn246($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Exit($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn247($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ErrorSuppress($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn248($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn249($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Array($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn250($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Array($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn251($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ShellExec($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn252($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Print($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn253($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Closure(array('static' => false, 'byRef' => $this->yyastk[$this->stackPos-(9-2)], 'params' => $this->yyastk[$this->stackPos-(9-4)], 'uses' => $this->yyastk[$this->stackPos-(9-6)], 'stmts' => $this->yyastk[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function yyn254($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Closure(array('static' => true, 'byRef' => $this->yyastk[$this->stackPos-(10-3)], 'params' => $this->yyastk[$this->stackPos-(10-5)], 'uses' => $this->yyastk[$this->stackPos-(10-7)], 'stmts' => $this->yyastk[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function yyn255($attributes) {
         $this->yyval = new PHPParser_Node_Expr_New($this->yyastk[$this->stackPos-(3-2)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn256($attributes) {
         $this->yyval = new PHPParser_Node_Expr_List($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn257($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn258($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn259($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn260($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn261($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ClosureUse(substr($this->yyastk[$this->stackPos-(2-2)], 1), $this->yyastk[$this->stackPos-(2-1)], $attributes); 
    }

    protected function yyn262($attributes) {
         $this->yyval = new PHPParser_Node_Expr_FuncCall($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn263($attributes) {
         $this->yyval = new PHPParser_Node_Expr_StaticCall($this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-3)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn264($attributes) {
         $this->yyval = new PHPParser_Node_Expr_StaticCall($this->yyastk[$this->stackPos-(8-1)], $this->yyastk[$this->stackPos-(8-4)], $this->yyastk[$this->stackPos-(8-7)], $attributes); 
    }

    protected function yyn265($attributes) {
        
            if ($this->yyastk[$this->stackPos-(4-1)] instanceof PHPParser_Node_Expr_StaticPropertyFetch) {
                $this->yyval = new PHPParser_Node_Expr_StaticCall($this->yyastk[$this->stackPos-(4-1)]->class, new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(4-1)]->name, $attributes), $this->yyastk[$this->stackPos-(4-3)], $attributes);
            } elseif ($this->yyastk[$this->stackPos-(4-1)] instanceof PHPParser_Node_Expr_ArrayDimFetch) {
                $tmp = $this->yyastk[$this->stackPos-(4-1)];
                while ($tmp->var instanceof PHPParser_Node_Expr_ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->yyval = new PHPParser_Node_Expr_StaticCall($tmp->var->class, $this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes);
                $tmp->var = new PHPParser_Node_Expr_Variable($tmp->var->name, $attributes);
            } else {
                throw new Exception;
            }
          
    }

    protected function yyn266($attributes) {
         $this->yyval = new PHPParser_Node_Expr_FuncCall($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn267($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn268($attributes) {
         $this->yyval = new PHPParser_Node_Name('static', $attributes); 
    }

    protected function yyn269($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn270($attributes) {
         $this->yyval = new PHPParser_Node_Name($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn271($attributes) {
         $this->yyval = new PHPParser_Node_Name_FullyQualified($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn272($attributes) {
         $this->yyval = new PHPParser_Node_Name_Relative($this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn273($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn274($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn275($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn276($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn277($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn278($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn279() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn280($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn281($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn282($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn283($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn284($attributes) {
         $this->yyval = null; 
    }

    protected function yyn285($attributes) {
         $this->yyval = null; 
    }

    protected function yyn286($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn287($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn288($attributes) {
         $this->yyval = array(PHPParser_Node_Scalar_String::parseEscapeSequences($this->yyastk[$this->stackPos-(1-1)], '`')); 
    }

    protected function yyn289($attributes) {
         foreach ($this->yyastk[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = PHPParser_Node_Scalar_String::parseEscapeSequences($s, '`'); } }; $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn290($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn291($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn292($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_LNumber(PHPParser_Node_Scalar_LNumber::parse($this->yyastk[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function yyn293($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_DNumber(PHPParser_Node_Scalar_DNumber::parse($this->yyastk[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function yyn294($attributes) {
         $this->yyval = PHPParser_Node_Scalar_String::create($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn295($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_LineConst($attributes); 
    }

    protected function yyn296($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_FileConst($attributes); 
    }

    protected function yyn297($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_DirConst($attributes); 
    }

    protected function yyn298($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_ClassConst($attributes); 
    }

    protected function yyn299($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_TraitConst($attributes); 
    }

    protected function yyn300($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_MethodConst($attributes); 
    }

    protected function yyn301($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_FuncConst($attributes); 
    }

    protected function yyn302($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_NSConst($attributes); 
    }

    protected function yyn303($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_String(PHPParser_Node_Scalar_String::parseDocString($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function yyn304($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_String('', $attributes); 
    }

    protected function yyn305($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ConstFetch($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn306($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn307($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ClassConstFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn308($attributes) {
         $this->yyval = new PHPParser_Node_Expr_UnaryPlus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn309($attributes) {
         $this->yyval = new PHPParser_Node_Expr_UnaryMinus($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn310($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Array($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn311($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Array($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn312($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn313($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ClassConstFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn314($attributes) {
         foreach ($this->yyastk[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = PHPParser_Node_Scalar_String::parseEscapeSequences($s, '"'); } }; $this->yyval = new PHPParser_Node_Scalar_Encapsed($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn315($attributes) {
         foreach ($this->yyastk[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = PHPParser_Node_Scalar_String::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->yyastk[$this->stackPos-(3-2)]);; $this->yyval = new PHPParser_Node_Scalar_Encapsed($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn316($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn317($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn318() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn319() {
        $this->yyval = $this->yyastk[$this->stackPos];
    }

    protected function yyn320($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn321($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn322($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(3-3)], $this->yyastk[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function yyn323($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function yyn324($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn325($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn326($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn327($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn328($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(6-2)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn329($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn330($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PropertyFetch($this->yyastk[$this->stackPos-(3-1)], $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn331($attributes) {
         $this->yyval = new PHPParser_Node_Expr_MethodCall($this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-3)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn332($attributes) {
         $this->yyval = new PHPParser_Node_Expr_FuncCall($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn333($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn334($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn335($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn336($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn337($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn338($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(2-2)], $attributes); 
    }

    protected function yyn339($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn340($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn341($attributes) {
         $this->yyval = new PHPParser_Node_Expr_StaticPropertyFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-4)], $attributes); 
    }

    protected function yyn342($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn343($attributes) {
         $this->yyval = new PHPParser_Node_Expr_StaticPropertyFetch($this->yyastk[$this->stackPos-(3-1)], substr($this->yyastk[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function yyn344($attributes) {
         $this->yyval = new PHPParser_Node_Expr_StaticPropertyFetch($this->yyastk[$this->stackPos-(6-1)], $this->yyastk[$this->stackPos-(6-5)], $attributes); 
    }

    protected function yyn345($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn346($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn347($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn348($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch($this->yyastk[$this->stackPos-(4-1)], $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn349($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn350($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn351($attributes) {
         $this->yyval = null; 
    }

    protected function yyn352($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn353($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn354($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn355($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn356($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn357($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn358($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(1-1)]; 
    }

    protected function yyn359($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(4-3)]; 
    }

    protected function yyn360($attributes) {
         $this->yyval = null; 
    }

    protected function yyn361($attributes) {
         $this->yyval = array(); 
    }

    protected function yyn362($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn363($attributes) {
         $this->yyastk[$this->stackPos-(3-1)][] = $this->yyastk[$this->stackPos-(3-3)]; $this->yyval = $this->yyastk[$this->stackPos-(3-1)]; 
    }

    protected function yyn364($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn365($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(3-3)], $this->yyastk[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function yyn366($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function yyn367($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(4-4)], $this->yyastk[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function yyn368($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayItem($this->yyastk[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function yyn369($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn370($attributes) {
         $this->yyastk[$this->stackPos-(2-1)][] = $this->yyastk[$this->stackPos-(2-2)]; $this->yyval = $this->yyastk[$this->stackPos-(2-1)]; 
    }

    protected function yyn371($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(1-1)]); 
    }

    protected function yyn372($attributes) {
         $this->yyval = array($this->yyastk[$this->stackPos-(2-1)], $this->yyastk[$this->stackPos-(2-2)]); 
    }

    protected function yyn373($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function yyn374($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch(new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(4-1)], 1), $attributes), $this->yyastk[$this->stackPos-(4-3)], $attributes); 
    }

    protected function yyn375($attributes) {
         $this->yyval = new PHPParser_Node_Expr_PropertyFetch(new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(3-1)], 1), $attributes), $this->yyastk[$this->stackPos-(3-3)], $attributes); 
    }

    protected function yyn376($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn377($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(3-2)], $attributes); 
    }

    protected function yyn378($attributes) {
         $this->yyval = new PHPParser_Node_Expr_ArrayDimFetch(new PHPParser_Node_Expr_Variable($this->yyastk[$this->stackPos-(6-2)], $attributes), $this->yyastk[$this->stackPos-(6-4)], $attributes); 
    }

    protected function yyn379($attributes) {
         $this->yyval = $this->yyastk[$this->stackPos-(3-2)]; 
    }

    protected function yyn380($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_String($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn381($attributes) {
         $this->yyval = new PHPParser_Node_Scalar_String($this->yyastk[$this->stackPos-(1-1)], $attributes); 
    }

    protected function yyn382($attributes) {
         $this->yyval = new PHPParser_Node_Expr_Variable(substr($this->yyastk[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
